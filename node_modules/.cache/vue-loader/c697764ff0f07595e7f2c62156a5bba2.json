{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/components/TimeSlotDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/components/TimeSlotDetails.vue","mtime":1695242036401},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/babel-loader/lib/index.js","mtime":1692833949708},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVGltZVNsb3REZXRhaWxzJywKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc2VydmljZTogewogICAgICAgIHRpbWU6ICcnLAogICAgICAgIHN0YXJ0X3RpbWU6ICcnLAogICAgICAgIGVuZF90aW1lOiAnJywKICAgICAgICBkYXRlOiAnJwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRDdXJyZW50RGF0ZSgpIHsKICAgICAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpOwogICAgICBjdXJyZW50RGF0ZS5zZXREYXRlKGN1cnJlbnREYXRlLmdldERhdGUoKSArIDEpOyAvLyBBZGQgb25lIGRheQogICAgICAvLyBGb3JtYXQgdGhlIGRhdGUgYXMgbmVlZGVkLCBlLmcuLCAiWVlZWS1NTS1ERCIKICAgICAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IGN1cnJlbnREYXRlLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTsKICAgICAgcmV0dXJuIGZvcm1hdHRlZERhdGU7CiAgICB9LAogICAgYXN5bmMgc3VibWl0Rm9ybSgpewogICAgICBhd2FpdCB0aGlzLmNyZWF0ZV9jYXJ0X2l0ZW0oKTsKICAgIH0sCiAgICBhc3luYyBjcmVhdGVfY2FydF9pdGVtKCkgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IGRhdGUgPSBhd2FpdCB0aGlzLmZldGNoX3RpbWVfc2xvdCgpCiAgICAgICAgY29uc3Qgc2VydmljZV9pZCA9IHRoaXMuJHJvdXRlLnBhcmFtcy5zZXJ2aWNlSWQ7CiAgICAgICAgY29uc3QgdGltZSA9IHRoaXMuc2VydmljZS50aW1lCiAgICAgICAgY29uc29sZS5sb2coJ3NlcnZpY2VpZCBpcyAnLCBzZXJ2aWNlX2lkKQogICAgICAgIGNvbnNvbGUubG9nKCdkYXRlICcsIGRhdGUpOwogICAgICAgIGNvbnNvbGUubG9nKCd0aW1lICcsIHRpbWUpCgogICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuJGFwb2xsby5tdXRhdGUoewogICAgICAgIG11dGF0aW9uOiByZXF1aXJlKCdAL2dyYXBocWwvQ2FydEl0ZW1DcmVhdGUuZ3FsJyksCiAgICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgICBzZXJ2aWNlSWQ6IHNlcnZpY2VfaWQsCiAgICAgICAgICBkYXRlOiB0aGlzLiRyb3V0ZS5xdWVyeS5kYXRlLAogICAgICAgICAgdGltZTogdGltZSwKICAgICAgICB9LAogICAgICB9KTsKICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpOwogICAgICBpZiAocmVzcG9uc2UuZGF0YS5jcmVhdGVDYXJ0SXRlbS5lcnJvcnMgPCAxKSB7CiAgICAgICAgYWxlcnQoJ1NVQ0NFU1MgIScpCiAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goJy9jYXJ0JykKICAgICAgfQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gY3JlYXRlX2NhcnRfaXRlbTonLCBlcnJvcik7CiAgICAgIC8vIEhhbmRsZSB0aGUgZXJyb3IgaGVyZSwgZS5nLiwgc2hvdyBhbiBlcnJvciBtZXNzYWdlIHRvIHRoZSB1c2VyLgogICAgfQogICAgfSwKICAgIGFzeW5jIGZldGNoX3RpbWVfc2xvdCgpewogICAgICB0cnkgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy4kYXBvbGxvLnF1ZXJ5KHsKICAgICAgICAgIHF1ZXJ5OiByZXF1aXJlKCdAL2dyYXBocWwvVGltZVNsb3RPbmUuZ3FsJyksCiAgICAgICAgICB2YXJpYWJsZXM6IHsgaWQ6IHBhcnNlSW50KHRoaXMuJHJvdXRlLnBhcmFtcy50aW1lU2xvdElkKX0KICAgICAgICB9KTsKICAgICAgICB0aGlzLnNlcnZpY2Uuc3RhcnRfdGltZSA9IGF3YWl0IHRoaXMuZm9ybWF0dGVkU3RhcnRUaW1lKHJlc3BvbnNlLmRhdGEudGltZVNsb3RPbmUuc3RhcnRUaW1lKTsKICAgICAgICB0aGlzLnNlcnZpY2UuZW5kX3RpbWUgPSBhd2FpdCB0aGlzLmZvcm1hdHRlZFN0YXJ0VGltZShyZXNwb25zZS5kYXRhLnRpbWVTbG90T25lLmVuZFRpbWUpOwogICAgICAgIHRoaXMuc2VydmljZS5kYXRlID0gYXdhaXQgcmVzcG9uc2UuZGF0YS50aW1lU2xvdE9uZS5kYXRlOwogICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKQogICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLnRpbWVTbG90T25lLmRhdGU7CgogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGZldGNoX3RpbWVfc2xvdDonLCBlcnJvcik7CiAgICAgIH0KICAgIH0sCiAgICBmb3JtYXR0ZWRTdGFydFRpbWUodGltZSkgewogICAgICAvLyBQYXJzZSB0aGUgc3RhcnRfdGltZSBzdHJpbmcgaW50byBhIERhdGUgb2JqZWN0CiAgICAgIGNvbnN0IGRhdGVPYmogPSBuZXcgRGF0ZSh0aW1lKTsKCiAgICAgIC8vIEV4dHJhY3QgdGhlIGhvdXIsIG1pbnV0ZSwgYW5kIEFNL1BNIHBhcnRzCiAgICAgIGNvbnN0IGhvdXIgPSBkYXRlT2JqLmdldFVUQ0hvdXJzKCk7CiAgICAgIGNvbnN0IG1pbnV0ZSA9IGRhdGVPYmouZ2V0VVRDTWludXRlcygpOwogICAgICBjb25zdCBhbXBtID0gaG91ciA+PSAxMiA/ICJQTSIgOiAiQU0iOwoKICAgICAgLy8gQ29udmVydCB0byAxMi1ob3VyIGZvcm1hdCBhbmQgZm9ybWF0IHRoZSBob3VyIGFuZCBtaW51dGUgYXMgIkhIOk1NIEFNL1BNIgogICAgICBjb25zdCBmb3JtYXR0ZWRIb3VyID0gKChob3VyICsgMTEpICUgMTIgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyk7CiAgICAgIHJldHVybiBgJHtmb3JtYXR0ZWRIb3VyfToke21pbnV0ZS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9ICR7YW1wbX1gOwogICAgfSwKICB9LAogIG1vdW50ZWQoKXsKICAgIHRoaXMuZmV0Y2hfdGltZV9zbG90KCkKICB9LCAgICAKfQo="},{"version":3,"sources":["TimeSlotDetails.vue"],"names":[],"mappings":";AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TimeSlotDetails.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h1>TimeSlot Details</h1>\n    <p>Category Name: {{ this.$route.params.categoryId }}</p>\n    <p>Service Name: {{ this.$route.params.serviceId }}</p>\n    <p>Time Slot: {{ this.$route.params.timeSlotId }}</p>\n    <p>Choose time between {{  this.service.start_time }} and {{   this.service.end_time }}</p>\n    <p v-if=\"service.date == getCurrentDate()\">You're about to select the date today ({{ this.service.date }}), please select the time in the future.</p>\n    <form @submit.prevent=\"submitForm\">\n      <input type=\"time\" v-model=\"service.time\">\n      <input type=\"submit\">\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TimeSlotDetails',\n  data() {\n    return {\n      service: {\n        time: '',\n        start_time: '',\n        end_time: '',\n        date: ''\n      }\n    }\n  },\n  methods: {\n    getCurrentDate() {\n      const currentDate = new Date();\n      currentDate.setDate(currentDate.getDate() + 1); // Add one day\n      // Format the date as needed, e.g., \"YYYY-MM-DD\"\n      const formattedDate = currentDate.toISOString().split('T')[0];\n      return formattedDate;\n    },\n    async submitForm(){\n      await this.create_cart_item();\n    },\n    async create_cart_item() {\n      try {\n        const date = await this.fetch_time_slot()\n        const service_id = this.$route.params.serviceId;\n        const time = this.service.time\n        console.log('serviceid is ', service_id)\n        console.log('date ', date);\n        console.log('time ', time)\n\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/CartItemCreate.gql'),\n        variables: {\n          serviceId: service_id,\n          date: this.$route.query.date,\n          time: time,\n        },\n      });\n      console.log(response);\n      if (response.data.createCartItem.errors < 1) {\n        alert('SUCCESS !')\n        this.$router.push('/cart')\n      }\n    } catch (error) {\n      console.error('Error in create_cart_item:', error);\n      // Handle the error here, e.g., show an error message to the user.\n    }\n    },\n    async fetch_time_slot(){\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/TimeSlotOne.gql'),\n          variables: { id: parseInt(this.$route.params.timeSlotId)}\n        });\n        this.service.start_time = await this.formattedStartTime(response.data.timeSlotOne.startTime);\n        this.service.end_time = await this.formattedStartTime(response.data.timeSlotOne.endTime);\n        this.service.date = await response.data.timeSlotOne.date;\n        console.log(response)\n        return response.data.timeSlotOne.date;\n\n      } catch (error) {\n        console.error('Error in fetch_time_slot:', error);\n      }\n    },\n    formattedStartTime(time) {\n      // Parse the start_time string into a Date object\n      const dateObj = new Date(time);\n\n      // Extract the hour, minute, and AM/PM parts\n      const hour = dateObj.getUTCHours();\n      const minute = dateObj.getUTCMinutes();\n      const ampm = hour >= 12 ? \"PM\" : \"AM\";\n\n      // Convert to 12-hour format and format the hour and minute as \"HH:MM AM/PM\"\n      const formattedHour = ((hour + 11) % 12 + 1).toString().padStart(2, '0');\n      return `${formattedHour}:${minute.toString().padStart(2, '0')} ${ampm}`;\n    },\n  },\n  mounted(){\n    this.fetch_time_slot()\n  },    \n}\n</script>\n\n<style>\n\n</style>\n"]}]}