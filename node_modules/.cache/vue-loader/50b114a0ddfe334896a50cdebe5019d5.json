{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/views/ServiceNew.vue?vue&type=style&index=0&id=36f3d6e5&lang=css&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/views/ServiceNew.vue","mtime":1697855384580},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/css-loader/dist/cjs.js","mtime":1692833962858},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js","mtime":1692833962314},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/postcss-loader/dist/cjs.js","mtime":1692833963133},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zZXJ2aWNlX25ld19mb3JtIHsKICB3aWR0aDogMzkwcHg7CiAgbWFyZ2luOiAwIGF1dG87Cn0KCi5jZW50ZXJlZC1mb3JtIHsKICB3aWR0aDogMjMwcHg7CiAgbWFyZ2luOiAwIGF1dG87Cn0KCi5jbG91ZGluYXJ5LWJ1dHRvbiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmOwogICAgY29sb3I6IHdoaXRlOwogICAgcGFkZGluZzogMTBweCAyMHB4OwogICAgYm9yZGVyOiBub25lOwogICAgY3Vyc29yOiBwb2ludGVyOwp9CgouY2xvdWRpbmFyeS1idXR0b246aG92ZXIgewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTZiMzsKfQoKLyogU3R5bGUgdGhlIHVwbG9hZGVkIGltYWdlICovCi51cGxvYWRlZC1pbWFnZSB7CiAgICBtYXgtd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IGF1dG87CiAgICBtYXJnaW4tdG9wOiAxMHB4OwogICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKICAgIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7Cn0K"},{"version":3,"sources":["ServiceNew.vue"],"names":[],"mappings":";AAmOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ServiceNew.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"service_category_header\">\n      <h2 class=\"service_category_title\">New <span class=\"service_category_title_name\">Service</span></h2>\n      <span class=\"btn btn-success service_category_add_btn\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-save2-fill\" viewBox=\"0 0 16 16\">\n          <path d=\"M8.5 1.5A1.5 1.5 0 0 1 10 0h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6c-.314.418-.5.937-.5 1.5v6h-2a.5.5 0 0 0-.354.854l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5A.5.5 0 0 0 10.5 7.5h-2v-6z\"/>\n        </svg>\n        Save New Service\n      </span>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <form @submit.prevent=\"submitForm\" class=\"centered-form\">\n          <div class=\"input-field-signin\">\n            <div :class=\"{ error: v$.services.name.$errors.length }\">\n              <label class=\"form-label\">Service Name\n                <input v-model=\"services.name\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.name.$errors.length }\" ref=\"service_name\">\n                <div class=\"input-errors\" v-for=\"error of v$.services.name.$errors\" :key=\"error.$uid\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n                </div>\n              </label>\n            </div>\n          </div>\n          <div class=\"input-field-signin\">Service Category\n            <div :class=\"{ error: v$.services.service_category.$errors.length }\">\n              <select v-model=\"services.service_category\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.service_category.$errors.length }\">\n                <option v-for=\"category in this.services.service_categories\" :key=\"category.id\" :value=\"category.id\">\n                  {{ category.name }}\n                </option>\n              </select>\n            </div>\n          </div>\n          <div class=\"input-field-signin\">\n            <div :class=\"{ error: v$.services.description.$errors.length }\">\n              <label class=\"form-label\">Description\n                <textarea v-model=\"services.description\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.description.$errors.length }\"></textarea>\n                <div class=\"input-errors\" v-for=\"error of v$.services.description.$errors\" :key=\"error.$uid\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n                </div>\n              </label>\n            </div>\n          </div>\n          <div class=\"input-field-signin\">\n            <div :class=\"{ error: v$.services.price.$errors.length }\">\n              <label class=\"form-label\">Price\n                <div class=\"input-group mb-3\" :class=\"{ error: v$.services.price.$errors.length }\">\n                  <span class=\"input-group-text\">PHP</span>\n                  <input type=\"text\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.price.$errors.length }\" id=\"price\" v-model=\"services.price\" aria-label=\"Amount (to the nearest dollar)\">\n                  <span class=\"input-group-text\">.00</span>\n                </div>\n                <div class=\"input-errors\" v-for=\"error of v$.services.price.$errors\" :key=\"error.$uid\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n                </div>\n              </label>\n            </div>\n          </div>\n          <div class=\"input-field-signin\">\n            <div class=\"row input-field-signup mt-3\">\n              <button id=\"upload_widget\" @click.prevent=\"\" class=\"cloudinary-button\">Upload files</button>\n            </div>\n            <div id=\"image-preview\" class=\"mt-3\"></div>\n            <button type=\"submit\" class=\"btn btn-primary btn-lg input-field-signin\">Create</button>\n          </div>\n        </form>\n      </div>\n      <div class=\"col-md-6\">\n        <p>Customer's View</p>\n        <div class=\"card service_new_form\">\n          <div class=\"card-body service_item\">\n            <a class=\"service_link\" href=\"#\" @click.prevent>\n              <h5>{{ services.name }}</h5>\n              <div id=\"image-preview2\" class=\"mt-3\"></div>\n              <p class=\"service_details\">{{ services.description }}</p>\n              <p class=\"service_details\">{{ formatToPHP(services.price) }}</p>\n            </a>\n            <table class=\"table service_details\">\n              <thead>\n                <tr>\n                  <th>Schedule</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <div class=\"time\">\n                    <datepicker \n                    :use-utc=\"true\"\n                    :inline=\"true\"\n                    format=\"MM/DD/yyyy\"\n                    ></datepicker>\n                  </div>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Datepicker from 'vuejs-datepicker';\nimport { required, integer, maxLength } from '@vuelidate/validators'\nimport { useVuelidate } from '@vuelidate/core';\nexport default {\n  setup () { return { v$: useVuelidate() } },\n  data () {\n    return {\n      services: {\n        service_category: '',\n        name: '',\n        price: '',\n        description: '',\n        service_categories: [],\n      },\n    }\n  },\n  validations () {\n    return {\n      services: {\n        name: { required, maxLength: maxLength(25) },\n        service_category: { required  },\n        price: {required, integer },\n        description: {required, maxLength: maxLength(100),},\n      },\n      image: '',\n    }\n  },\n  components: { Datepicker, },\n  methods: {\n    formatToPHP(number) {\n      // Convert the number to a string with two decimal places\n      const formattedNumber = Number(number).toFixed(2);\n\n      // Add \"PHP \" to the formatted number and use commas as a thousands separator\n      const result = `PHP ${formattedNumber.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ', ')}`;\n\n      return result;\n    },\n    upload(){\n        console.log('upload')\n        var myWidget = window.cloudinary.createUploadWidget({\n            cloudName: 'dovxq5gn9', \n            processQueue: false,\n            uploadPreset: 'uhjevesg'}, (error, result) => { \n                if (!error && result && result.event === \"success\") { \n                console.log('Done! Here is the image info: ', result.info); \n                    const imageUrl = result.info.secure_url;\n                    this.image = imageUrl;\n                    this.displayImage(imageUrl);\n                }\n            }\n        )\n        document.getElementById(\"upload_widget\").addEventListener(\"click\", function(){\n            myWidget.open();\n        }, false);\n    }, \n    // Function to display the uploaded image\n    displayImage(imageUrl) {\n        const imagePreviewDiv = document.getElementById('image-preview');\n        const image = document.createElement('img');\n        image.src = imageUrl;\n        image.classList.add('uploaded-image'); // Add CSS class for styling\n        imagePreviewDiv.innerHTML = ''; // Clear any existing content\n        imagePreviewDiv.appendChild(image);\n\n        const imagePreviewDiv2 = document.getElementById('image-preview2');\n        const image2 = document.createElement('img');\n        image2.src = imageUrl;\n        image2.classList.add('service_image'); // Add CSS class for styling\n        imagePreviewDiv2.innerHTML = ''; // Clear any existing content\n        imagePreviewDiv2.appendChild(image2);\n    },\n    async show_categories() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/Category.gql'),\n        });\n        console.log('the service category is here', response)\n         this.services.service_categories = response.data.categories;\n      } catch (error) {\n          console.error('Error logging out:', error);\n      }\n    },\n    async submitForm() {\n      this.v$.$touch();\n      if(!this.v$.$error) {\n        console.log()\n        try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCreate.gql'),\n          variables: {\n            serviceCategoryId: this.services.service_category,\n            name: this.services.name,\n            description: this.services.description,\n            price: parseInt(this.services.price),\n            image: this.image\n          },\n        });\n        let data = this.services;\n        data['image'] = this.image;\n        data['id'] = response.data.createService.service.id;\n        console.log('the data of new services is: ', data);\n        console.log('reply from service is: ', response)\n        if(response) { alert(\"SUCCESS, new service has been recorded\") }\n        this.$emit('newServiceAdded', data);\n        this.time_slot_one = null;\n        } catch (error) { console.error(\"Graphql Error:\", error); }\n      } else {\n        console.log(this.v$.services)\n      }\n    },\n    reloadPage() {\n      // Reload the current page\n      window.location.reload();\n    },\n  },\n  mounted() {\n    this.$refs.service_name.focus();\n    this.show_categories();\n    this.upload();\n  },\n}\n</script>\n\n<style>\n.service_new_form {\n  width: 390px;\n  margin: 0 auto;\n}\n\n.centered-form {\n  width: 230px;\n  margin: 0 auto;\n}\n\n.cloudinary-button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n\n.cloudinary-button:hover {\n    background-color: #0056b3;\n}\n\n/* Style the uploaded image */\n.uploaded-image {\n    max-width: 100%;\n    height: auto;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>"]}]}