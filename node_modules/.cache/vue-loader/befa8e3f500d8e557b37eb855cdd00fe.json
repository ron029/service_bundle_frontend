{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/views/ServiceCategoryPage.vue?vue&type=style&index=0&id=16dbe0b8&lang=css&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/views/ServiceCategoryPage.vue","mtime":1694565443449},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/css-loader/dist/cjs.js","mtime":1692833962858},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js","mtime":1692833962314},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/postcss-loader/dist/cjs.js","mtime":1692833963133},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jbG91ZGluYXJ5LWJ1dHRvbiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmOwogICAgY29sb3I6IHdoaXRlOwogICAgcGFkZGluZzogMTBweCAyMHB4OwogICAgYm9yZGVyOiBub25lOwogICAgY3Vyc29yOiBwb2ludGVyOwp9Ci5jbG91ZGluYXJ5LWJ1dHRvbjpob3ZlciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA1NmIzOwp9Ci8qIFN0eWxlIHRoZSB1cGxvYWRlZCBpbWFnZSAqLwoudXBsb2FkZWQtaW1hZ2UgewogICAgbWF4LXdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiBhdXRvOwogICAgbWFyZ2luLXRvcDogMTBweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7CiAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEpOwp9Ci5saW5rX3RleHQgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Ci5lZGl0LXRpbWUgewogIG1hcmdpbi10b3A6IC0xMDBweDsKfQo="},{"version":3,"sources":["ServiceCategoryPage.vue"],"names":[],"mappings":";AAiOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ServiceCategoryPage.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <h2>Service Category</h2>\n    <div class=\"\">\n      <span @click=\"toggleUpdateServiceCategory\" class=\"btn btn-primary\">New Service Category</span>\n      <div v-if=\"UpdateServiceCategory\" class=\"card\">\n        <div class=\"card-body\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <td>Name</td>\n                <td>Description</td>\n                <td>Image</td>\n                <td>Action</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td> \n                  <input v-model=\"update.name\"> \n                </td>\n                <td>\n                  <input v-model=\"update.description\"> \n                </td>\n                <td><button id=\"upload_widget\" @click.prevent=\"\" class=\"cloudinary-button\">Upload files</button></td>\n                <td>\n                  <span @click=\"this.create_service_category\" v-if=\"createNewServiceCategory\" class=\"btn btn-success\">CREATE</span>\n                  <span @click=\"this.update_service_category\" v-if=\"updateNewServiceCategory\" class=\"btn btn-warning\">SUBMIT</span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Image</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item, index) in this.services.service_categories\" :key=\"item.id\">\n          <td>{{ item.name }}</td>\n          <td>{{ item.description }}</td>\n          <td><img :src=\"item.image\" style=\"width: 200px; height: 150px;\"></td>\n          <td>\n            <span @click=\"show_category_one(item, index)\" class=\"btn btn-warning\">edit</span><br>\n            <span @click=\"delete_category(item, index)\" class=\"btn btn-danger\">delete</span>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n      return {\n        services: {\n          service_categories: null\n        },\n        UpdateServiceCategory: true,\n        update: {\n          name: '',\n          description: '',\n          id: '',\n          image: ''\n        },\n        createNewServiceCategory: true,\n        updateNewServiceCategory: false,\n        update_category_index: 0,\n        delete_category_index: 0\n      }\n  },\n  props: ['serviceCategoryId'],\n  name: 'ServiceCategoryPage',\n  methods: {\n    upload(){\n        console.log('upload')\n        var myWidget = window.cloudinary.createUploadWidget({\n            cloudName: 'dovxq5gn9', \n            processQueue: false,\n            uploadPreset: 'uhjevesg'}, (error, result) => {\n                if (!error && result && result.event === \"success\") {\n                console.log('Done! Here is the image info: ', result.info); \n                    const imageUrl = result.info.secure_url;\n                    this.update.image = imageUrl;\n                    // this.displayImage(imageUrl);\n                }\n            }\n        )\n        document.getElementById(\"upload_widget\").addEventListener(\"click\", function(){\n            myWidget.open();\n        }, false);  \n    },\n    // Function to display the uploaded image\n    // displayImage(imageUrl) {\n    //     this.show_old_image = false;\n    //     const imagePreviewDiv = document.getElementById('image-preview');\n    //     const image = document.createElement('img');\n    //     image.src = imageUrl;\n    //     image.classList.add('uploaded-image'); // Add CSS class for styling\n    //     imagePreviewDiv.innerHTML = ''; // Clear any existing content\n    //     imagePreviewDiv.appendChild(image);\n    // },\n    toggleUpdateServiceCategory(){\n      this.update.name = '';\n      this.update.description = '';\n      this.update.image = '';\n      this.update.id = '';\n      if (this.UpdateServiceCategory == false) this.UpdateServiceCategory = true;\n\n      this.createNewServiceCategory = true;\n      this.updateNewServiceCategory = false;\n    },\n    async create_service_category() {\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryCreate.gql'),\n          variables: {\n            name: this.update.name,\n            description: this.update.description,\n            image: this.update.image\n          },\n        });\n        let data = response.data.createServiceCategory.serviceCategory;\n        this.services.service_categories.push(data);\n        alert('New Product named \"' + data.name + '\" has been added.');\n        console.log('the details for new product is: ', response);\n      } catch (error) {\n        console.error('GraphQL Error:', error);\n      }\n    },\n    async show_categories() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/Category.gql'),\n        });\n        this.services.service_categories = response.data.categories;\n      } catch (error) {\n        console.error('Error logging out:', error);\n      }\n    },\n    async update_service_category() {\n      console.log('id of file to edit', this.update.id);\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryUpdate.gql'),\n          variables: {\n            \"id\": parseInt(this.update.id),\n            \"name\": this.update.name,\n            \"description\": this.update.description,\n            \"image\": this.update.image\n          },\n        });\n        if (response) {\n          let edit = this.services.service_categories[this.update_category_index];\n          edit.name = this.update.name;\n          edit.description = this.update.description;\n          edit.image = this.update.image;\n          console.log('this is the thing that we need to edit: ', edit);\n          console.log('the new data is now: ', edit)\n          alert('YOUR SERVICE CATEGORY HAS BEEN UPDATE');\n          // this.reloadPage()\n        }\n      } catch (error) { console.error(\"Graphql Error:\", error); }\n    },\n    async show_category_one(item, index) {\n      console.log('modifying service category with index: ', index)\n      this.update_category_index = index;\n      this.createNewServiceCategory = false;\n      this.updateNewServiceCategory = true;\n      console.log('the category to edit is ',item.id)\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryFind.gql'),\n          variables: {\n            \"id\": parseInt(item.id)\n          },\n        });\n        this.update.name = response.data.serviceCategory[0].name;\n        this.update.description = response.data.serviceCategory[0].description\n        this.update.id = response.data.serviceCategory[0].id\n        this.UpdateServiceCategory = true;\n        this.update.image = response.data.serviceCategory[0].image\n        console.log('File to edit', this.update)\n      } catch (error) { console.error(\"Graphql Error:\", error); }\n    },\n    async delete_category(item, index){\n      const userConfirmed = window.confirm(\"Do you want to delete \" + item.name + \" category?\");\n      if (userConfirmed) {\n        console.log('deleting service category with index: ', index);\n        this.delete_category_index = index;\n        try {\n          const response = await this.$apollo.mutate({\n            mutation: require('@/graphql/ServiceCategoryDelete.gql'),\n            variables: {\n              \"id\": parseInt(item.id)\n            },\n          });\n          console.log(response)\n          alert('DELETION COMPLETE!')\n          console.log('the item to delete is ');\n          this.services.service_categories.splice(this.delete_category_index, 1);\n          console.log('File to edit', this.update)\n        } catch (error) { console.error(\"Graphql Error:\", error); }\n      }\n    },\n  },\n  components: {\n\n  },\n  mounted(){\n    this.show_categories();\n    this.upload()\n  }\n}\n</script>\n\n<style>\n.cloudinary-button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n.cloudinary-button:hover {\n    background-color: #0056b3;\n}\n/* Style the uploaded image */\n.uploaded-image {\n    max-width: 100%;\n    height: auto;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n.link_text {\n    display: inline-block;\n}\n.edit-time {\n  margin-top: -100px;\n}\n</style>\n"]}]}