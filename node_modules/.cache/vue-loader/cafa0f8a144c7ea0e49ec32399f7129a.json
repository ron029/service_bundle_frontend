{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/components/ServiceDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/components/ServiceDetails.vue","mtime":1694113248270},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/babel-loader/lib/index.js","mtime":1692833949708},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnU2VydmljZURldGFpbHMnLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzZXJ2aWNlOiB7CiAgICAgICAgdGltZTogJycsCiAgICAgICAgc3RhcnRfdGltZTogJycsCiAgICAgICAgZW5kX3RpbWU6ICcnLAogICAgICAgIGRhdGU6ICcnCiAgICAgIH0KICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGdldEN1cnJlbnREYXRlKCkgewogICAgICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgIGN1cnJlbnREYXRlLnNldERhdGUoY3VycmVudERhdGUuZ2V0RGF0ZSgpICsgMSk7IC8vIEFkZCBvbmUgZGF5CiAgICAgIC8vIEZvcm1hdCB0aGUgZGF0ZSBhcyBuZWVkZWQsIGUuZy4sICJZWVlZLU1NLUREIgogICAgICBjb25zdCBmb3JtYXR0ZWREYXRlID0gY3VycmVudERhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdOwogICAgICByZXR1cm4gZm9ybWF0dGVkRGF0ZTsKICAgIH0sCiAgICBhc3luYyBzdWJtaXRGb3JtKCl7CiAgICAgIGF3YWl0IHRoaXMuY3JlYXRlX2NhcnRfaXRlbSgpOwogICAgfSwKICAgIGFzeW5jIGNyZWF0ZV9jYXJ0X2l0ZW0oKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZGF0ZSA9IGF3YWl0IHRoaXMuZmV0Y2hfdGltZV9zbG90KCkKICAgICAgICBjb25zdCBzZXJ2aWNlX2lkID0gdGhpcy4kcm91dGUucGFyYW1zLnNlcnZpY2VJZDsKICAgICAgICBjb25zdCB0aW1lID0gdGhpcy5zZXJ2aWNlLnRpbWUKICAgICAgICBjb25zb2xlLmxvZygnc2VydmljZWlkIGlzICcsIHNlcnZpY2VfaWQpCiAgICAgICAgY29uc29sZS5sb2coJ2RhdGUgJywgZGF0ZSk7CiAgICAgICAgY29uc29sZS5sb2coJ3RpbWUgJywgdGltZSkKCiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy4kYXBvbGxvLm11dGF0ZSh7CiAgICAgICAgbXV0YXRpb246IHJlcXVpcmUoJ0AvZ3JhcGhxbC9DYXJ0SXRlbUNyZWF0ZS5ncWwnKSwKICAgICAgICB2YXJpYWJsZXM6IHsKICAgICAgICAgIHNlcnZpY2VJZDogc2VydmljZV9pZCwKICAgICAgICAgIGRhdGU6IGRhdGUsCiAgICAgICAgICB0aW1lOiB0aW1lLAogICAgICAgIH0sCiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7CiAgICAgIGlmIChyZXNwb25zZS5kYXRhLmNyZWF0ZUNhcnRJdGVtLmVycm9ycyA8IDEpIHsKICAgICAgICBhbGVydCgnU1VDQ0VTUyAhJykKICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL2NhcnQnKQogICAgICB9CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBjcmVhdGVfY2FydF9pdGVtOicsIGVycm9yKTsKICAgICAgLy8gSGFuZGxlIHRoZSBlcnJvciBoZXJlLCBlLmcuLCBzaG93IGFuIGVycm9yIG1lc3NhZ2UgdG8gdGhlIHVzZXIuCiAgICB9CiAgICB9LAogICAgYXN5bmMgZmV0Y2hfdGltZV9zbG90KCl7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLiRhcG9sbG8ucXVlcnkoewogICAgICAgICAgcXVlcnk6IHJlcXVpcmUoJ0AvZ3JhcGhxbC9UaW1lU2xvdE9uZS5ncWwnKSwKICAgICAgICAgIHZhcmlhYmxlczogeyBpZDogcGFyc2VJbnQodGhpcy4kcm91dGUucGFyYW1zLnRpbWVTbG90SWQpfQogICAgICAgIH0pOwogICAgICAgIHRoaXMuc2VydmljZS5zdGFydF90aW1lID0gYXdhaXQgdGhpcy5mb3JtYXR0ZWRTdGFydFRpbWUocmVzcG9uc2UuZGF0YS50aW1lU2xvdE9uZS5zdGFydFRpbWUpOwogICAgICAgIHRoaXMuc2VydmljZS5lbmRfdGltZSA9IGF3YWl0IHRoaXMuZm9ybWF0dGVkU3RhcnRUaW1lKHJlc3BvbnNlLmRhdGEudGltZVNsb3RPbmUuZW5kVGltZSk7CiAgICAgICAgdGhpcy5zZXJ2aWNlLmRhdGUgPSBhd2FpdCByZXNwb25zZS5kYXRhLnRpbWVTbG90T25lLmRhdGU7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpCiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEudGltZVNsb3RPbmUuZGF0ZTsKCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gZmV0Y2hfdGltZV9zbG90OicsIGVycm9yKTsKICAgICAgfQogICAgfSwKICAgIGZvcm1hdHRlZFN0YXJ0VGltZSh0aW1lKSB7CiAgICAgIC8vIFBhcnNlIHRoZSBzdGFydF90aW1lIHN0cmluZyBpbnRvIGEgRGF0ZSBvYmplY3QKICAgICAgY29uc3QgZGF0ZU9iaiA9IG5ldyBEYXRlKHRpbWUpOwoKICAgICAgLy8gRXh0cmFjdCB0aGUgaG91ciwgbWludXRlLCBhbmQgQU0vUE0gcGFydHMKICAgICAgY29uc3QgaG91ciA9IGRhdGVPYmouZ2V0VVRDSG91cnMoKTsKICAgICAgY29uc3QgbWludXRlID0gZGF0ZU9iai5nZXRVVENNaW51dGVzKCk7CiAgICAgIGNvbnN0IGFtcG0gPSBob3VyID49IDEyID8gIlBNIiA6ICJBTSI7CgogICAgICAvLyBDb252ZXJ0IHRvIDEyLWhvdXIgZm9ybWF0IGFuZCBmb3JtYXQgdGhlIGhvdXIgYW5kIG1pbnV0ZSBhcyAiSEg6TU0gQU0vUE0iCiAgICAgIGNvbnN0IGZvcm1hdHRlZEhvdXIgPSAoKGhvdXIgKyAxMSkgJSAxMiArIDEpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKTsKICAgICAgcmV0dXJuIGAke2Zvcm1hdHRlZEhvdXJ9OiR7bWludXRlLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX0gJHthbXBtfWA7CiAgICB9LAogIH0sCiAgbW91bnRlZCgpewogICAgdGhpcy5mZXRjaF90aW1lX3Nsb3QoKQogIH0sICAgIAp9Cg=="},{"version":3,"sources":["ServiceDetails.vue"],"names":[],"mappings":";AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ServiceDetails.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h1>Service Details</h1>\n    <p>Category Name: {{ this.$route.params.categoryId }}</p>\n    <p>Service Name: {{ this.$route.params.serviceId }}</p>\n    <p>Time Slot: {{ this.$route.params.timeSlotId }}</p>\n    <p>Choose time between {{  this.service.start_time }} and {{   this.service.end_time }}</p>\n    <p v-if=\"service.date == getCurrentDate()\">You're about to select the date today ({{ this.service.date }}), please select the time in the future.</p>\n    <form @submit.prevent=\"submitForm\">\n      <input type=\"time\" v-model=\"service.time\">\n      <input type=\"submit\">\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ServiceDetails',\n  data() {\n    return {\n      service: {\n        time: '',\n        start_time: '',\n        end_time: '',\n        date: ''\n      }\n    }\n  },\n  methods: {\n    getCurrentDate() {\n      const currentDate = new Date();\n      currentDate.setDate(currentDate.getDate() + 1); // Add one day\n      // Format the date as needed, e.g., \"YYYY-MM-DD\"\n      const formattedDate = currentDate.toISOString().split('T')[0];\n      return formattedDate;\n    },\n    async submitForm(){\n      await this.create_cart_item();\n    },\n    async create_cart_item() {\n      try {\n        const date = await this.fetch_time_slot()\n        const service_id = this.$route.params.serviceId;\n        const time = this.service.time\n        console.log('serviceid is ', service_id)\n        console.log('date ', date);\n        console.log('time ', time)\n\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/CartItemCreate.gql'),\n        variables: {\n          serviceId: service_id,\n          date: date,\n          time: time,\n        },\n      });\n      console.log(response);\n      if (response.data.createCartItem.errors < 1) {\n        alert('SUCCESS !')\n        this.$router.push('/cart')\n      }\n    } catch (error) {\n      console.error('Error in create_cart_item:', error);\n      // Handle the error here, e.g., show an error message to the user.\n    }\n    },\n    async fetch_time_slot(){\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/TimeSlotOne.gql'),\n          variables: { id: parseInt(this.$route.params.timeSlotId)}\n        });\n        this.service.start_time = await this.formattedStartTime(response.data.timeSlotOne.startTime);\n        this.service.end_time = await this.formattedStartTime(response.data.timeSlotOne.endTime);\n        this.service.date = await response.data.timeSlotOne.date;\n        console.log(response)\n        return response.data.timeSlotOne.date;\n\n      } catch (error) {\n        console.error('Error in fetch_time_slot:', error);\n      }\n    },\n    formattedStartTime(time) {\n      // Parse the start_time string into a Date object\n      const dateObj = new Date(time);\n\n      // Extract the hour, minute, and AM/PM parts\n      const hour = dateObj.getUTCHours();\n      const minute = dateObj.getUTCMinutes();\n      const ampm = hour >= 12 ? \"PM\" : \"AM\";\n\n      // Convert to 12-hour format and format the hour and minute as \"HH:MM AM/PM\"\n      const formattedHour = ((hour + 11) % 12 + 1).toString().padStart(2, '0');\n      return `${formattedHour}:${minute.toString().padStart(2, '0')} ${ampm}`;\n    },\n  },\n  mounted(){\n    this.fetch_time_slot()\n  },    \n}\n</script>\n\n<style>\n\n</style>\n"]}]}