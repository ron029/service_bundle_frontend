{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/components/ServiceList.vue?vue&type=style&index=0&id=e861d51a&lang=css&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/components/ServiceList.vue","mtime":1695241256782},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/css-loader/dist/cjs.js","mtime":1692833962858},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js","mtime":1692833962314},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/postcss-loader/dist/cjs.js","mtime":1692833963133},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qIEBpbXBvcnQgJ3Z1ZWpzLWRhdGVwaWNrZXIvZGlzdC92dWVqcy1kYXRlcGlja2VyLmNzcyc7ICovCkBpbXBvcnQgJ3Z1ZTItdGltZXBpY2tlci9kaXN0L1Z1ZVRpbWVwaWNrZXIuY3NzJzsKLnRpbWUgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQouZXJyb3IsIC5lcnJvcjpmb2N1cywgLmVycm9yIGlucHV0W3R5cGU9InJhZGlvIl0gewogICAgYm9yZGVyLWNvbG9yOiByZWQ7CiAgICBjb2xvcjogcmVkOwp9Ci5pbnB1dC1lcnJvcnMgewogICAgY29sb3I6IHJlZDsKfQouZXJyLWNhcmQgewogICAgcG9zaXRpb246IHJlbGF0aXZlOwp9Ci5lcnJvci1tc2cgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgZm9udC1zaXplOiAxMHB4OwogICAgYm90dG9tOiAtOHB4OwogICAgbGVmdDogMTdweDsKfQo="},{"version":3,"sources":["ServiceList.vue"],"names":[],"mappings":";AA0LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ServiceList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h2>Services</h2>\n    <button @click=\"showServiceNew\">Show ServiceNew</button>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>No.</th>\n            <th>Service Name</th>\n            <th>Category Name</th>\n            <th>Price</th>\n            <th>Description</th>\n            <th>Time Slots</th>\n            <th>Image</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item, index) in services\" :key=\"item.id\">\n            <td>{{ index + 1 }}</td>\n            <td>{{ item.name }}</td>\n            <td>{{ item.serviceCategoryId.name }}</td>\n            <td>PHP {{ item.price.toFixed(2) }}</td>\n            <td>{{ item.description }}</td>\n            <td>\n              <template>\n                <div class=\"time\">\n                  <datepicker\n                  :disabled-dates=\"getDisabledDates(item.timeSlot)\"\n                  :inline=\"true\"\n                  ></datepicker>\n                </div>\n              </template>\n            </td>\n            <td><img :src=\"item.image\" :alt=item.category_name style=\"width: 200px; height: 150px;\"></td>\n            <td>\n              <span class=\"btn btn-warning\" @click=\"showEditService({id: item.id, index: index})\">Edit</span>\n              <!-- <router-link :to=\"{ path: '/services/' + item.id + '/edit' }\" class=\"btn btn-warning\"> Edit </router-link> -->\n            </td>\n          </tr>\n        </tbody>\n      </table>\n  </div>\n</template>\n\n<script>\nimport Datepicker from 'vuejs-datepicker';\nexport default {\n  name: 'ServiceList',\n  data(){\n    return {\n      showPage: 'ServicePage', // Initialize showPage to ServicePage\n      newServiceData: {},\n      updateServiceData: {},\n      services: [],\n    };\n  },\n  components: { Datepicker, },\n  props: {\n    new_time_slot: {\n      type: Object,\n      validator: function(value) {\n        if (value.time_slot) console.log('ServiceList, new timeslot with value: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n    new_service: {\n      type: Array,\n      validator: function(value) {\n        if (value.id) console.log('this is from servicePage to serviceList, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n    update_service: {\n      type: Object,\n      validator: function(value) {\n        if (value.service_details) console.log('this is from servicePage to serviceList, the update service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n  },\n  methods: {\n    getDisabledDates(dates) {\n      let enabledDates = [];\n\n      for (const date of dates) {\n        const from = this.formatDate(date.startDate);\n        const to = this.formatDate(date.endDate);\n\n        // Create an array of dates between 'from' and 'to'\n        const currentDate = new Date(from);\n        while (currentDate <= new Date(to)) {\n          enabledDates.push(currentDate.toISOString().split('T')[0]);\n          currentDate.setDate(currentDate.getDate() + 1);\n        }\n      }\n\n      return {\n        customPredictor: date => {\n          const formattedDate = date.toISOString().split('T')[0];\n          return !enabledDates.includes(formattedDate);\n        },\n      };\n    },\n    formatDate(dateToParse) {\n      const dateComponents = dateToParse.split('-');\n      const year = parseInt(dateComponents[0]);\n      const month = parseInt(dateComponents[1]) - 1;\n      const day = parseInt(dateComponents[2]);\n      const jsDate = new Date(year, month, day);\n      return jsDate;\n    },\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({ query: require('@/graphql/AdminService.gql'), });\n        this.services = response.data.serviceAdmin\n        console.log('all services: ', response);\n\n        if (this.newServiceData.id) this.merge_new_service_to_services(this.services)\n        if (this.updateServiceData.service_details) this.update_service_list(this.services)\n        if (this.new_time_slot.time_slot) {\n          this.services[this.new_time_slot.index_to_edit].timeSlot = this.new_time_slot.time_slot;\n          console.log('ServiceList/get_services:124', this.services[this.new_time_slot.index_to_edit].timeSlot);\n        } \n        console.log('ServiceList/get_services: new_time_slot.index_to_edit: ', this.new_time_slot.index_to_edit, this.new_time_slot.time_slot);\n      } catch (error) {\n        console.log('Error from get_services: ', error);\n      }\n    },\n    update_service_list(service) {\n      let service_one = service[this.updateServiceData.index_to_edit];\n      console.log('servicelist: the edited service is: ', service_one);\n      service_one['image'] = this.updateServiceData.service_details.image;\n      service_one['name'] = this.updateServiceData.service_details.name;\n      service_one['price'] = this.updateServiceData.service_details.price;\n    },\n    merge_new_service_to_services(all_service) {\n      // const category = this.newServiceData.service_categories.find(\n      //   (category) => category.id === this.newServiceData.service_category\n      // );\n      let newservice = {\n        description: this.newServiceData.description,\n        id: this.newServiceData.id,\n        image: this.newServiceData.image,\n        name: this.newServiceData.name,\n        serviceCategoryId: {\n          id: this.newServiceData.service_category,\n          name: this.newServiceData.service_categories[0].name\n        },\n        timeSlot: [],\n      }\n      all_service.push(newservice)\n    },\n    showEditService(params) {\n      console.log('serviceList: the service id to edit is: ', params['id'])\n      this.$emit('showEditService', params);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    },\n  },\n  mounted(){\n    this.get_services();\n    // Assign the prop value to the data property\n    if (this.new_service) {\n      this.newServiceData = this.new_service;\n      console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n    } \n    if (this.update_service.service_details) {\n      this.updateServiceData = this.update_service;\n      console.log('this is from servicepage to servicelist, update service data is: ', this.updateServiceData);\n    }\n  },\n  created() {\n    if (this.new_time_slot.index_to_edit) {\n      console.log('Props received: new_time_slot: ', this.new_time_slot);\n      this.services[this.new_time_slot.index_to_edit].timeSlot = this.new_time_slot.time_slot;\n    }\n  }\n}\n</script>\n\n<style>\n/* @import 'vuejs-datepicker/dist/vuejs-datepicker.css'; */\n@import 'vue2-timepicker/dist/VueTimepicker.css';\n.time {\n  display: inline-block;\n}\n.error, .error:focus, .error input[type=\"radio\"] {\n    border-color: red;\n    color: red;\n}\n.input-errors {\n    color: red;\n}\n.err-card {\n    position: relative;\n}\n.error-msg {\n    position: absolute;\n    font-size: 10px;\n    bottom: -8px;\n    left: 17px;\n}\n</style>"]}]}