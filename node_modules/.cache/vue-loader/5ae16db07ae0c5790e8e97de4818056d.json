{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/views/ServiceEdit.vue?vue&type=style&index=0&id=90e7d2d6&lang=css&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/views/ServiceEdit.vue","mtime":1697706476808},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/css-loader/dist/cjs.js","mtime":1692833962858},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js","mtime":1692833962314},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/postcss-loader/dist/cjs.js","mtime":1692833963133},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50aW1lc2xvdC1wYW5lbCB7CiAgdmVydGljYWwtYWxpZ246IHRleHQtdG9wOwogIG1pbi1oZWlnaHQ6IDY4MHB4Owp9Cgp0YWJsZSB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y2ZjZmNjsKfQoKLnByaWNlX3NlcnZpY2VfZWRpdCB7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0KCi5zZXJ2aWNlX2NhdGVnb3J5X2VkaXRfYnRuIHsKICBjb2xvcjogI0ZFQzYxRTsKfQoKLnNlcnZpY2VfY2F0ZWdvcnlfZGVsZXRlX2J0biB7CiAgY29sb3I6IHJlZDsKfQoKLnNlcnZpY2UtZWRpdC1sYWJlbCB7CiAgd2lkdGg6IDEwMCU7Cn0KCi5zZXJ2aWNlLXVwZGF0ZS1idG4gewogIG1hcmdpbi10b3A6IDIwcHg7CiAgYm9yZGVyLXJhZGl1czogMCU7CiAgaGVpZ2h0OiA1MHB4OwogIHdpZHRoOiAxMDAlOwp9CgoudGltZS1zbG90LWhlYWRlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmVkOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBtYXJnaW4tYm90dG9tOiA1N3B4Owp9CgoudGltZS1zbG90LXRpdGxlIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAxMHB4OwogIGxlZnQ6IDEwcHg7Cn0KCi50aW1lLXNsb3QtYWRkLWJ0biB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMTBweDsKICByaWdodDogMTBweDsKICBib3JkZXItcmFkaXVzOiAwJTsKfQoKLmlucHV0LWdyb3VwLXRleHQgewogIGhlaWdodDogMzcuOXB4Owp9CgoudGFibGUtY29udGFpbmVyIHsKICBvdmVyZmxvdy14OiBhdXRvOyAvKiBFbmFibGUgaG9yaXpvbnRhbCBzY3JvbGxpbmcgKi8KfQoKLnRhYmxlLWNvbnRhaW5lciB0YWJsZSB7CiAgd2lkdGg6IDEwMCU7IC8qIEVuc3VyZSB0aGUgdGFibGUgdGFrZXMgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lciAqLwogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7Cn0KCi50YWJsZS1jb250YWluZXIgdGgsIC50YWJsZS1jb250YWluZXIgdGQgewogIHBhZGRpbmc6IDhweDsKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDsKfQoKLnRhYmxlLWNvbnRhaW5lciB0aDpsYXN0LWNoaWxkLCAudGFibGUtY29udGFpbmVyIHRkOmxhc3QtY2hpbGQgewogIHBvc2l0aW9uOiBzdGlja3k7CiAgcmlnaHQ6IDA7CiAgLyogYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjsgKi8KICAgLyogT3B0aW9uYWwgYmFja2dyb3VuZCBjb2xvciBmb3IgdGhlIHN0aWNreSBjb2x1bW4gKi8KICB6LWluZGV4OiAxOyAvKiBFbnN1cmUgaXQgYXBwZWFycyBhYm92ZSBvdGhlciBlbGVtZW50cyB3aGVuIHN0aWNreSAqLwp9CgouY2xvdWRpbmFyeS1idXR0b24gewogIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7CiAgY29sb3I6IHdoaXRlOwogIHBhZGRpbmc6IDEwcHggMjBweDsKICBib3JkZXI6IG5vbmU7CiAgY3Vyc29yOiBwb2ludGVyOwp9Ci5jbG91ZGluYXJ5LWJ1dHRvbjpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTZiMzsKfQovKiBTdHlsZSB0aGUgdXBsb2FkZWQgaW1hZ2UgKi8KLnVwbG9hZGVkLWltYWdlIHsKICBtYXgtd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiBhdXRvOwogIG1hcmdpbi10b3A6IDEwcHg7CiAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEpOwp9Ci5saW5rX3RleHQgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQouZm9ybS1zZXJ2aWNlLWVkaXQgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQouZWRpdC10aW1lIHsKICBtYXJnaW4tdG9wOiAtMzkwcHg7Cn0KLmVycm9yLCAuZXJyb3I6Zm9jdXMgewogIGJvcmRlci1jb2xvcjogcmVkOwogIGNvbG9yOiByZWQ7Cn0KLmlucHV0LWVycm9ycyB7CiAgY29sb3I6IHJlZDsKfQouZm9ybS1sYWJlbCB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9Ci5lcnJvci1tc2cgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBmb250LXNpemU6IDEwcHg7CiAgYm90dG9tOiAtMTNweDsKICBsZWZ0OiAwcHg7Cn0K"},{"version":3,"sources":["ServiceEdit.vue"],"names":[],"mappings":";AA0pfile":"ServiceEdit.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- Start Modal -->\n    <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h1 class=\"modal-title fs-5\" id=\"exampleModalLabel\">\n              <span v-if=\"createTimeSlot\">New Timeslot for</span>\n              <span v-else-if=\"edit_time\">Edit timeslot for</span>\n              <span v-else>Delete timeslot for</span>\n              <span class=\"service_category_title_name\"> Service ({{ service_old_name }})</span>\n            </h1>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <form class=\"unique-vertical-form\" v-if=\"new_time_slot\">\n              <div class=\"row input-field-signup mt-3\">\n                <div class=\"col-sm-6 col-form-label\">\n                  <div :class=\"{ error: v$.newts.start_date.$errors.length }\">\n                    <label class=\"form-label\" for=\"start_date\">Start Date</label>\n                  </div>\n                </div>\n                <div class=\"col-sm-6 err-card\">\n                  <input type=\"date\" v-model=\"newts.start_date\" class=\"form-control form-control-l\" :class=\"{ error: v$.newts.start_date.$errors.length }\" id=\"start_date\" :disabled=\"delete_time\">\n                  <div class=\"input-errors\" v-for=\"error of v$.newts.start_date.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row input-field-signup mt-3\">\n                <div class=\"col-sm-6 col-form-label\">\n                  <div :class=\"{ error: v$.newts.end_date.$errors.length }\">\n                    <label class=\"form-label\" for=\"end_date\">End Date</label>\n                  </div>\n                </div>\n                <div class=\"col-sm-6 err-card\">\n                  <input type=\"date\" v-model=\"newts.end_date\" class=\"form-control form-control-l\" :class=\"{ error: v$.newts.end_date.$errors.length }\" id=\"end_date\" :disabled=\"delete_time\">\n                  <div class=\"input-errors\" v-for=\"error of v$.newts.end_date.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row input-field-signup mt-3\">\n                <div class=\"col-sm-6 col-form-label\">\n                  <div :class=\"{ error: v$.newts.start_time.$errors.length }\">\n                    <label class=\"form-label\" for=\"start_time\">Start Time</label>\n                  </div>\n                </div>\n                <div class=\"col-sm-6 err-card\">\n                  <input type=\"time\" v-model=\"newts.start_time\" class=\"form-control form-control-l\" :class=\"{ error: v$.newts.start_time.$errors.length }\" id=\"start_time\" :disabled=\"delete_time\">\n                  <div class=\"input-errors\" v-for=\"error of v$.newts.start_time.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row input-field-signup mt-3\">\n                <div class=\"col-sm-6 col-form-label\">\n                  <div :class=\"{ error: v$.newts.start_time.$errors.length }\">\n                    <label class=\"form-label\" for=\"end_time\">End Time</label>\n                  </div>\n                </div>\n                <div class=\"col-sm-6 err-card\">\n                  <input type=\"time\" v-model=\"newts.end_time\" class=\"form-control form-control-l\" :class=\"{ error: v$.newts.start_time.$errors.length }\" id=\"end_time\" :disabled=\"delete_time\">\n                  <div class=\"input-errors\" v-for=\"error of v$.newts.end_time.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row input-field-signup mt-3\">\n                <div class=\"col-sm-6 col-form-label\">\n                  <div :class=\"{ error: v$.newts.capacity.$errors.length }\">\n                    <label class=\"form-label\" for=\"capacity\">Capacity</label>\n                  </div>\n                </div>\n                <div class=\"col-sm-6 err-card\">\n                  <input type=\"number\" v-model=\"newts.capacity\" class=\"form-control form-control-l\"  :class=\"{ error: v$.newts.capacity.$errors.length }\" id=\"capacity\" :disabled=\"delete_time\">\n                  <div class=\"input-errors\" v-for=\"error of v$.newts.capacity.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row input-field-signup mt-3\">\n                <div class=\"col-sm-6 col-form-label\">\n                  <div :class=\"{ error: v$.newts.duration.$errors.length }\">\n                    <label class=\"form-label\" for=\"duration\">Duration</label>\n                  </div>\n                </div>\n                <div class=\"col-sm-6 err-card\">\n                  <input type=\"number\" v-model=\"newts.duration\" class=\"form-control form-control-l\"  :class=\"{ error: v$.newts.duration.$errors.length }\" id=\"duration\" :disabled=\"delete_time\">\n                  <div class=\"input-errors\" v-for=\"error of v$.newts.duration.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"row input-field-signup mt-3\">\n                <div class=\"col-sm-6 col-form-label\">\n                  <div :class=\"{ error: v$.newts.interval.$errors.length }\">\n                    <label class=\"form-label\" for=\"interval\">Interval</label>\n                  </div>\n                </div>\n                <div class=\"col-sm-6 err-card\">\n                  <input type=\"number\" v-model=\"newts.interval\" class=\"form-control form-control-l\"  :class=\"{ error: v$.newts.interval.$errors.length }\" id=\"interval\" :disabled=\"delete_time\">\n                  <div class=\"input-errors\" v-for=\"error of v$.newts.interval.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </div>\n              </div>\n              <!-- <div class=\"row input-field-signup mt-3\">\n                <div class=\"col-sm-6 col-form-label\">\n                  <div :class=\"{ error: v$.first_name.$errors.length }\">\n                    <label class=\"form-label\" for=\"first_name\">First Name</label>\n                  </div>\n                </div>\n                <div class=\"col-sm-6 err-card\">\n                  <input v-model=\"first_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.first_name.$errors.length }\" id=\"first_name\">\n                  <div class=\"input-errors\" v-for=\"error of v$.first_name.$errors\" :key=\"error.$uid\" placeholder=\"Enter your first name\" autofocus>\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </div>\n              </div> -->\n            </form>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" id=\"modal_close\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n            <button v-if=\"createTimeSlot\" type=\"button\" @click=\"this.create_time_slot\" class=\"btn btn-success\">Save new timeslot</button>\n            <button v-if=\"edit_time\" type=\"button\" @click=\"this.edit_time_save\" class=\"btn btn-warning\">Update timeslot</button>\n            <button v-if=\"delete_time\" type=\"button\" @click=\"this.delete_time_save\" class=\"btn btn-danger\">Delete timeslot</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- End Modal -->\n\n    <div class=\"service_category_header\">\n      <h2 class=\"service_category_title\">Edit <span class=\"service_category_title_name\">Service ({{ service_old_name }})</span></h2>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-4 col-lg-4\">\n        <div class=\"d-flex flex-row align-items-center justify-content-center justify-content-lg-start\">\n          <p class=\"login_text lead fw-normal mb-0 me-3\"></p>\n        </div>\n        <form @submit.prevent=\"submitForm\">\n          <div class=\"\">\n            <div :class=\"{ error: v$.services.name.$errors.length }\">\n              <label class=\"service-edit-label  form-label\">Service Name\n                <input v-model=\"services.name\" class=\"form-control\" :class=\"{ error: v$.services.name.$errors.length }\">\n                <div class=\"input-errors\" v-for=\"error of v$.services.name.$errors\" :key=\"error.$uid\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n                </div>\n              </label>\n            </div>\n          </div>\n          <!-- Service Category -->\n          <div class=\"input-field-service-edit\">\n            <div :class=\"{ error: v$.services.service_category.$errors.length }\">\n              <label class=\"service-edit-label  form-label\">Service Category Name\n                <select v-model=\"services.service_category\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.service_category.$errors.length }\" id=\"payment_option\">\n                  <option v-for=\"category in this.services.service_categories\" :key=\"category.id\" :value=\"category.id\"> {{ category.name }} </option>\n                </select>\n              </label>\n            </div>\n          </div>\n          <!-- Description -->\n          <div class=\"input-field-service-edit\">\n            <div :class=\"{ error: v$.services.description.$errors.length }\">\n              <label class=\"service-edit-label  form-label\">Description\n                <textarea v-model=\"services.description\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.description.$errors.length }\"></textarea>\n                <div class=\"input-errors\" v-for=\"error of v$.services.description.$errors\" :key=\"error.$uid\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n                </div>\n              </label>\n            </div>\n          </div>\n          <!-- Price -->\n          <label class=\"service-edit-label  form-label\" for=\"price\">Price</label>\n          <div class=\"input-group mb-3\" :class=\"{ error: v$.services.price.$errors.length }\">\n            <span class=\"input-group-text\">PHP</span>\n            <input type=\"text\" class=\"form-control form-control-l price_service_edit\" :class=\"{ error: v$.services.price.$errors.length }\" id=\"price\" v-model=\"services.price\" aria-label=\"Amount (to the nearest dollar)\">\n            <span class=\"input-group-text\">.00</span>\n            <div class=\"input-errors\" v-for=\"error of v$.services.price.$errors\" :key=\"error.$uid\">\n              <div class=\"error-msg\">{{ error.$message }}</div>\n            </div>\n          </div>\n          <!-- <div class=\"input-field-service-edit\">\n            <div :class=\"{ error: v$.services.price.$errors.length }\">\n              <label class=\"service-edit-label  form-label\">Price\n                <input id=\"price\" v-model=\"services.price\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.price.$errors.length }\">\n                <div class=\"input-errors\" v-for=\"error of v$.services.price.$errors\" :key=\"error.$uid\">\n                  <div class=\"error-msg\">{{ error.$message }}</div>\n                </div>\n              </label>\n            </div>\n          </div> -->\n          <!-- Image -->\n          <div class=\"row d-flex justify-content-center mt-3\">\n            <button id=\"upload_widget\" @click.prevent=\"edit\" class=\"cloudinary-button col-md-6\">Change Image</button>\n          </div>\n          <div class=\"input-field-service-edit\">\n            <div>\n              <label class=\"service-edit-label  form-label\">\n                <div id=\"image-preview\" class=\"mt-3\"> <!-- This is where the uploaded image will be displayed --> </div>\n                <img v-if=\"show_old_image\" :src=\"services.image\" style=\"height:200px; width:200px;\">\n              </label>\n            </div>\n          </div>\n          <div class=\"d-grid gap-2 mx-auto\">\n            <button type=\"submit\" class=\"btn btn-primary service-update-btn\">Update Service</button>\n          </div>\n        </form>\n      </div>\n      <!-- <div class=\"col-md-1 col-lg-1\"></div> -->\n      <div class=\"col-md-8 col-lg-8 timeslot-panel\">\n        <div class=\"time-slot-header\">\n          <h3 class=\"time-slot-title\">Manage <span class=\"service_category_title_name\">Timeslot</span></h3>\n          <span @click=\"new_time_slot\" class=\"btn btn-success time-slot-add-btn\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-plus-circle-fill\" viewBox=\"0 0 16 16\">\n              <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\"/>\n            </svg>\n            Add New Timeslot\n          </span>\n        </div>\n        <div class=\"table-responsive table-container\">\n          <table class=\"table table-bordered table-hover table-striped\">\n            <thead>\n              <tr>\n                <th>No.</th>\n                <th class=\"no-wrap\">Start Date</th>\n                <th class=\"no-wrap\">End Date</th>\n                <th class=\"no-wrap\">Start Time</th>\n                <th class=\"no-wrap\">End Time</th>\n                <th>Capacity</th>\n                <th>Duration</th>\n                <th>Break</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody v-if=\"time_slot.length > 0\">\n              <tr v-for=\"(item, index) in time_slot\" :key=\"item.id\">\n                <td>{{ index + 1 }}</td>\n                <td class=\"no-wrap\">{{ item.startDate }}</td>\n                <td class=\"no-wrap\">{{ item.endDate }}</td>\n                <td>{{ formattedStartTime(item.startTime) }}</td>\n                <td>{{ formattedStartTime(item.endTime) }}</td>\n                <td>{{ item.capacity }}</td>\n                <td>{{ item.duration }}</td>\n                <td>{{ item.interval }}</td>\n                <td class=\"no-wrap\">\n                  <span @click=\"edit_time_slot(item, index)\" class=\"btn btn-warning service_category_edit_btn\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-pen-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001z\"/>\n                    </svg>\n                  </span>\n                  <span @click=\"delete_time_slot(item, index)\" class=\"btn btn-danger service_category_delete_btn\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" class=\"bi bi-trash-fill\" viewBox=\"0 0 16 16\">\n                      <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\"/>\n                    </svg>\n                  </span>\n                </td>\n              </tr>\n            </tbody>\n            <tbody v-else>\n              <tr><td colspan=\"7\">There is nothing to show in this table.</td></tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, integer, minValue, helpers, maxLength } from '@vuelidate/validators';\n\nexport default {\n  name: 'ServiceEdit',\n    setup () { return { v$: useVuelidate() } },\n    data () {\n    return {\n      services: {\n        id: '',\n        name: '',\n        price: '',\n        image: '',\n        description: '',\n        service_categories: [],\n        service_category: '',\n      },\n      service_old_name: '',\n      id: '',\n      image: '',\n      time_slot: [],\n      time_slot_one: {\n        start_date: '',\n        end_date: '',\n        start_time: '',\n        end_time: '',\n        capacity: '',\n        id: '',\n        duration: '',\n        interval: '',\n      },\n      showTime: false,\n      edit_time: false,\n      delete_time: false,\n      time_slot_create: true,\n      createTimeSlot: false,\n      index_edit_timeslot: 0,\n      newts: {\n        id: '',\n        start_date: '',\n        end_date: '',\n        start_time: '',\n        end_time: '',\n        capacity: '',\n        duration: '',\n        interval: '',\n      },\n      show_old_image: true,\n      time_slot_index_delete: 0,\n    }\n  },\n  validations () {\n    const isBeforeDate = (value, vm) => {\n      if (!value) return true;\n      console.log(value, vm)\n      return new Date(value).getTime() <= new Date(vm.end_date).getTime();\n    };\n    const isAfterDate = (value, vm) => {\n      if (!value) return true;\n      console.log(value, vm)\n      return new Date(value).getTime() >= new Date(vm.start_date).getTime();\n    };\n    const isBeforeTime = (value, vm) => {\n      if (!value) return true;\n      console.log(value, vm);\n      return value < vm.end_time;\n    };\n    const isAfterTime = (value, vm) => {\n      if (!value) return true;\n      console.log(value, vm);\n      return value > vm.start_time;\n    };\n    return {\n      services: {\n        name: { required, maxLength: maxLength(25) },\n        service_category: { required  },\n        price: {required, integer },\n        description: {required, maxLength: maxLength(100),},\n      },\n      newts: {\n        start_date: {\n          required,\n          isBeforeDate: helpers.withMessage(\"Value must be before end date\", isBeforeDate),\n        },\n        end_date: {\n          required,\n          isAfterDate: helpers.withMessage(\"Value must be after start date\", isAfterDate),\n        },\n        start_time: {\n          required,\n          isBeforeTime: helpers.withMessage(\"Value must be before end time\", isBeforeTime),\n        },\n        end_time: {\n          required,\n          isAfterTime: helpers.withMessage(\"Value must be before start time\", isAfterTime),\n        },\n        capacity: {\n          required,\n          minValue: minValue(0), // Require a minimum value of 1\n          integer,\n        },\n        duration: {\n          minValue: minValue(0), // Require a minimum value of 1\n          integer,\n        },\n        interval: {\n          minValue: minValue(0), // Require a minimum value of 1\n          integer,\n        }\n      }\n    }\n  },\n  props: {\n    id_to_edit: Number,\n    index_to_edit: Number,\n  },\n  methods: {\n    upload(){\n      console.log('upload');\n      var myWidget = window.cloudinary.createUploadWidget({\n        cloudName: 'dovxq5gn9', \n        processQueue: false,\n        uploadPreset: 'uhjevesg'\n      }, (error, result) => {\n        if (!error && result && result.event === \"success\") { \n          console.log('Done! Here is the image info: ', result.info); \n          const imageUrl = result.info.secure_url;\n          this.services.image = imageUrl;\n          this.displayImage(imageUrl);\n        }\n      });\n      document.getElementById(\"upload_widget\").addEventListener(\"click\", function(){\n        myWidget.open();\n      }, false);  \n    }, \n    // Function to display the uploaded image\n    displayImage(imageUrl) {\n      this.show_old_image = false;\n      const imagePreviewDiv = document.getElementById('image-preview');\n      const image = document.createElement('img');\n      image.src = imageUrl;\n      image.classList.add('uploaded-image'); // Add CSS class for styling\n      imagePreviewDiv.innerHTML = ''; // Clear any existing content\n      imagePreviewDiv.appendChild(image);\n    },\n    new_time_slot(){\n      this.edit_time = false;\n      this.createTimeSlot = true;\n      this.delete_time = false;\n      this.newts.start_date = '';\n      this.newts.end_date = '';\n      this.newts.start_time = '';\n      this.newts.end_time = '';\n      this.newts.capacity = '';\n      this.newts.duration = '';\n      this.newts.interval = '';\n    },\n    async create_time_slot() {\n      this.v$.newts.$touch();\n      if (this.v$.newts.$error) return;\n\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/TimeSlotCreate.gql'),\n        variables: {\n          \"serviceId\": this.id_to_edit,\n          \"startDate\": this.newts.start_date,\n          \"endDate\": this.newts.end_date,\n          \"startTime\": this.newts.start_time,\n          \"endTime\": this.newts.end_time,\n          \"capacity\": this.newts.capacity,\n          \"duration\": this.newts.duration,\n          \"interval\": this.newts.interval,\n        },\n      });\n      if (response) {\n        const modal_close = document.getElementById('modal_close')\n        modal_close.click();\n        console.log('serviceEdit: info for new timeslot: ', response)\n        console.log('NEW TIMESLOT HAS BEEN ADDED');\n        const new_ts_data = response.data.createTimeSlot.timeSlot;\n        let index_new_ts = {\n          startDate: new_ts_data.startDate,\n          endDate: new_ts_data.endDate,\n          startTime: new_ts_data.startTime,\n          endTime: new_ts_data.endTime,\n          id: new_ts_data.id,\n          capacity: new_ts_data.capacity,\n          duration: new_ts_data.duration,\n          interval: new_ts_data.interval,\n        }\n        this.time_slot.push(index_new_ts);\n        // TODO emit timeslot :create\n        this.$emit('updateTimeSlot', {index_to_edit: this.index_to_edit, time_slot: this.time_slot});\n      }\n    },\n    async edit_time_save() {\n      this.v$.newts.$touch();\n      if (this.v$.newts.$error) return;\n\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/TimeSlotUpdate.gql'),\n          variables: {\n            \"id\": parseInt(this.newts.id),\n            \"serviceId\": this.id_to_edit,\n            \"startDate\": this.newts.start_date,\n            \"endDate\": this.newts.end_date,\n            \"startTime\": this.newts.start_time,\n            \"endTime\": this.newts.end_time,\n            \"capacity\": parseInt(this.newts.capacity),\n            \"duration\": parseInt(this.newts.duration),\n            \"interval\": parseInt(this.newts.interval),\n          },\n        });\n        if (response.data.updateTimeSlot.errors.length < 0) {\n          console.log(response.data.updateTimeSlot.errors);\n        } else {\n          const modal_close = document.getElementById('modal_close')\n          modal_close.click();\n          console.log(response)\n          console.log('list of timeslot are: ', this.time_slot)\n          console.log('index of timeslot to edit is: ', this.index_edit_timeslot)\n          this.time_slot[this.index_edit_timeslot]['id'] = parseInt(this.newts.id)\n          this.time_slot[this.index_edit_timeslot]['capacity'] = parseInt(this.newts.capacity)\n          this.time_slot[this.index_edit_timeslot]['endDate'] = this.newts.end_date\n          this.time_slot[this.index_edit_timeslot]['endTime'] = this.formattedLongTime(this.newts.end_time)\n          this.time_slot[this.index_edit_timeslot]['startDate'] = this.newts.start_date\n          this.time_slot[this.index_edit_timeslot]['startTime'] = this.formattedLongTime(this.newts.start_time)\n          this.time_slot[this.index_edit_timeslot]['duration'] = this.newts.duration\n          this.time_slot[this.index_edit_timeslot]['interval'] = this.newts.interval\n          console.log('list of timeslot after edit: ', this.time_slot);\n          // TODO emit timeslot :update\n          this.$emit('updateTimeSlot', {index_to_edit: this.index_to_edit, time_slot: this.time_slot});\n        }\n      } catch (error) { console.error(\"Graphql Error:\", error); }\n    },\n    async delete_time_save() {\n      const modal_close = document.getElementById('modal_close')\n      modal_close.click();\n      console.log('the object of time slot to delete is',this.newts.id)\n      console.log('the type of id is')\n      console.log(typeof parseInt(this.newts.id))\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/TimeSlotDelete.gql'),\n          variables: {\n            \"id\": parseInt(this.newts.id),\n          },\n        });\n        if (response) {\n          this.time_slot.splice(this.time_slot_index_delete, 1);\n          console.log('TIMESLOT HAS BEEN DELETED.');\n          // TODO emit timeslot :delete\n          this.$emit('updateTimeSlot', {index_to_edit: this.index_to_edit, time_slot: this.time_slot});\n        }\n        console.log(response)\n        this.time_slot_one = null;\n      } catch (error) { console.error(\"Graphql Error:\", error); }\n    },\n    popupTime(){ this.showTime = true; },\n    closeTime(){ this.edit_time = true; },\n    async edit_time_slot(item, index) {\n      this.index_edit_timeslot = index;\n      console.log('edit_time_slot_id is now', parseInt(item.id))\n      console.log(typeof item.id)\n      await this.show_time_slot_one(parseInt(item.id))\n      this.edit_time = true;\n      this.createTimeSlot = false;\n      this.delete_time = false;\n      this.showTime = true;\n    },\n    async delete_time_slot(item, index) {\n      this.time_slot_index_delete = parseInt(index);\n      console.log('delete_time_slot_id is ',parseInt(item.id))\n      await this.show_time_slot_one(parseInt(item.id), index)\n      this.delete_time = true;\n      this.showTime = true;\n      this.createTimeSlot = false;\n      this.edit_time = false;\n    },\n    async submitForm() {\n      this.v$.services.$touch();\n      if (this.v$.services.$error) return;\n      \n      this.services.service_category = parseInt(this.services.service_category);\n      this.services.price = parseInt(this.services.price);\n      console.log(this.services)\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/ServiceUpdate.gql'),\n        variables: {\n          id: this.services.id,\n          serviceCategoryId: this.services.service_category,\n          name: this.services.name,\n          description: this.services.description,\n          price: this.services.price,\n          image: this.services.image\n        },\n      });\n      this.$emit('updateServicePage', {index_to_edit: this.index_to_edit, service_details: this.services})\n      console.log('response after update', response)\n      console.log(response.data.updateService.errors.length)\n      if (response.data.updateService.errors.length < 1) {\n        this.service_old_name = this.services.name;\n        alert ('YOUR PRODUCT HAS BEEN UPDATED');\n        // this.$router.push('/services');\n      }\n    },\n    async show_service(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/AdminServiceFind.gql'),\n        variables: { \"id\": new_id }\n      });\n      console.log(response);\n      this.services.id = response.data.serviceAdmin[0].id;\n      this.services.name = response.data.serviceAdmin[0].name;\n      this.service_old_name = response.data.serviceAdmin[0].name;\n      this.services.price = response.data.serviceAdmin[0].price;\n      this.services.image = response.data.serviceAdmin[0].image;\n      this.services.description = response.data.serviceAdmin[0].description;\n      this.services.service_categories = response.data.serviceAdmin[0].serviceCategories;\n      this.services.service_category = response.data.serviceAdmin[0].serviceCategoryId.id;\n    },\n    async show_time_slot_one(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/TimeSlotOne.gql'),\n        variables: { \"id\": new_id }\n      });\n      // FIXME: timeslot when edit button clicks appears wrong info\n      console.log('time slot to edit is: ', response)\n      this.newts.id = response.data.timeSlotOne.id;\n      this.newts.start_date = response.data.timeSlotOne.startDate;\n      this.newts.end_date = response.data.timeSlotOne.endDate;\n      this.newts.start_time = this.formattedStartTime(response.data.timeSlotOne.startTime);\n      this.newts.end_time = this.formattedStartTime(response.data.timeSlotOne.endTime);\n      this.newts.capacity = response.data.timeSlotOne.capacity;\n      this.newts.duration = response.data.timeSlotOne.duration;\n      this.newts.interval = response.data.timeSlotOne.interval;\n    },\n    async show_time_slot_by_service(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/TimeSlotByService.gql'),\n        variables: { \"id\": new_id }\n      });\n      this.time_slot = response.data.timeSlotByService\n      console.log('TS BY SERVICE', this.time_slot)\n    },\n    reloadPage() {\n      // Reload the current page\n      window.location.reload();\n    },\n    formattedLongTime(time) {\n      // Parse the input time string into a Date object\n      const inputTime = new Date(`2000-01-01T${time}`);\n      \n      // Calculate the UTC equivalent time\n      const utcTime = new Date(inputTime.getTime() - inputTime.getTimezoneOffset() * 60000);\n\n      // Format the UTC time as \"YYYY-MM-DD HH:mm:ss UTC\"\n      const formattedDatetime = utcTime.toISOString().replace('T', ' ').replace(/\\.\\d+Z$/, ' UTC');\n\n      return formattedDatetime;\n    },\n    formattedStartTime(time) {\n      // Remove \"UTC\" from the end of the input datetime string\n      const timeWithoutUTC = time.replace(' UTC', '');\n\n      // Parse the datetime string into a Date object\n      const dateObj = new Date(timeWithoutUTC);\n\n      // Extract the hour, minute, and second parts\n      const hour = dateObj.getHours();\n      const minute = dateObj.getMinutes();\n      const second = dateObj.getSeconds();\n\n      // Format the hour, minute, and second as \"HH:MM:SS\"\n      const formattedHour = hour.toString().padStart(2, '0');\n      const formattedMinute = minute.toString().padStart(2, '0');\n      const formattedSecond = second.toString().padStart(2, '0');\n\n      return `${formattedHour}:${formattedMinute}:${formattedSecond}`;\n    }\n  },\n  mounted() {\n    this.show_service(this.id_to_edit);\n    this.show_time_slot_by_service(this.id_to_edit);\n    this.upload();\n  }\n}\n</script>\n\n<style>\n.timeslot-panel {\n  vertical-align: text-top;\n  min-height: 680px;\n}\n\ntable {\n  background-color: #f6f6f6;\n}\n\n.price_service_edit {\n  text-align: right;\n}\n\n.service_category_edit_btn {\n  color: #FEC61E;\n}\n\n.service_category_delete_btn {\n  color: red;\n}\n\n.service-edit-label {\n  width: 100%;\n}\n\n.service-update-btn {\n  margin-top: 20px;\n  border-radius: 0%;\n  height: 50px;\n  width: 100%;\n}\n\n.time-slot-header {\n  background-color: red;\n  position: relative;\n  margin-bottom: 57px;\n}\n\n.time-slot-title {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n}\n\n.time-slot-add-btn {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  border-radius: 0%;\n}\n\n.input-group-text {\n  height: 37.9px;\n}\n\n.table-container {\n  overflow-x: auto; /* Enable horizontal scrolling */\n}\n\n.table-container table {\n  width: 100%; /* Ensure the table takes up the full width of its container */\n  border-collapse: collapse;\n}\n\n.table-container th, .table-container td {\n  padding: 8px;\n  border-bottom: 1px solid #ddd;\n}\n\n.table-container th:last-child, .table-container td:last-child {\n  position: sticky;\n  right: 0;\n  /* background-color: #f2f2f2; */\n   /* Optional background color for the sticky column */\n  z-index: 1; /* Ensure it appears above other elements when sticky */\n}\n\n.cloudinary-button {\n  background-color: #007bff;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n.cloudinary-button:hover {\n  background-color: #0056b3;\n}\n/* Style the uploaded image */\n.uploaded-image {\n  max-width: 100%;\n  height: auto;\n  margin-top: 10px;\n  border: 1px solid #ccc;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n.link_text {\n  display: inline-block;\n}\n.form-service-edit {\n  display: inline-block;\n}\n.edit-time {\n  margin-top: -390px;\n}\n.error, .error:focus {\n  border-color: red;\n  color: red;\n}\n.input-errors {\n  color: red;\n}\n.form-label {\n  position: relative;\n}\n.error-msg {\n  position: absolute;\n  font-size: 10px;\n  bottom: -13px;\n  left: 0px;\n}\n</style>\n"]}]}