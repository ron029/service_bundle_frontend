{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/views/SignupEntrepPage.vue?vue&type=template&id=1e493c73&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/views/SignupEntrepPage.vue","mtime":1696481042966},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/babel-loader/lib/index.js","mtime":1692833949708},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js","mtime":1692833962314},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}