{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/components/SignupForm.vue?vue&type=style&index=0&id=943f3ba8&lang=css&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/components/SignupForm.vue","mtime":1698213239049},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/css-loader/dist/cjs.js","mtime":1692833962858},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js","mtime":1692833962314},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/postcss-loader/dist/cjs.js","mtime":1692833963133},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lcnJvciwgLmVycm9yOmZvY3VzLCAuZXJyb3IgaW5wdXRbdHlwZT0icmFkaW8iXSB7CiAgICBib3JkZXItY29sb3I6IHJlZDsKICAgIGNvbG9yOiByZWQ7Cn0KLmlucHV0LWVycm9ycyB7CiAgICBjb2xvcjogcmVkOwp9Ci5lcnItY2FyZCB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLmVycm9yLW1zZyB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBmb250LXNpemU6IDEwcHg7CiAgICBib3R0b206IC04cHg7CiAgICBsZWZ0OiAxN3B4Owp9Ci5yZWdpc3Rlci1zdGVwcGVyIHsKICAgIC8qIGRpc3BsYXk6IG5vbmU7ICovCn0K"},{"version":3,"sources":["SignupForm.vue"],"names":[],"mappings":";AAuNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SignupForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div class=\"container h-custom\">\n            <div class=\"row d-flex justify-content-center align-items-center h-100\">\n                <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1\">\n                    <div class=\"d-flex flex-row align-items-center justify-content-center justify-content-lg-start\">\n                        <p class=\"login_text lead fw-normal mb-0 me-3\"></p>\n                    </div>\n                    <form @submit.prevent=\"submitForm\">\n                        <!-- First name -->\n                        <div class=\"row input-field-signup mt-3\">\n                            <div class=\"col-sm-6 col-form-label\">\n                                <div :class=\"{ error: v$.first_name.$errors.length }\">\n                                    <label class=\"form-label\" for=\"first_name\">First Name</label>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-6 err-card\">\n                                <input v-model=\"first_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.first_name.$errors.length }\" id=\"first_name\" autofocus>\n                                <div class=\"input-errors\" v-for=\"error of v$.first_name.$errors\" :key=\"error.$uid\">\n                                    <div class=\"error-msg\">{{ error.$message }}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- Last name -->\n                        <div class=\"row input-field-signup mt-3\">\n                            <div class=\"col-sm-6 col-form-label\">\n                                <div :class=\"{ error: v$.last_name.$errors.length }\">\n                                    <label class=\"form-label\" for=\"last_name\">Last Name</label>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-6 err-card\">\n                                <input v-model=\"last_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.last_name.$errors.length }\" id=\"last_name\">\n                                <div class=\"input-errors\" v-for=\"error of v$.last_name.$errors\" :key=\"error.$uid\">\n                                    <div class=\"error-msg\">{{ error.$message }}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- Email -->\n                        <div class=\"row input-field-signup mt-3\">\n                            <div class=\"col-sm-6 col-form-label\">\n                                <div :class=\"{ error: v$.email.$errors.length }\">\n                                    <label class=\"form-label\" for=\"email\">Email</label>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-6 err-card\">\n                                <input v-model=\"email\" class=\"form-control form-control-l\" :class=\"{ error: v$.email.$errors.length }\" id=\"email\">\n                                <div class=\"input-errors\" v-for=\"error of v$.email.$errors\" :key=\"error.$uid\">\n                                    <div class=\"error-msg\">{{ error.$message }}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- Mobile Number -->\n                        <div class=\"row input-field-signup mt-3\">\n                            <div class=\"col-sm-6 col-form-label\">\n                                <div :class=\"{ error: v$.mobile_number.$errors.length }\">\n                                    <label class=\"form-label\" for=\"mobile_number\">Mobile Number</label>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-6 err-card\">\n                                <input v-model=\"mobile_number\" class=\"form-control form-control-l\" :class=\"{ error: v$.mobile_number.$errors.length }\" id=\"mobile_number\">\n                                <div class=\"input-errors\" v-for=\"error of v$.mobile_number.$errors\" :key=\"error.$uid\">\n                                    <div class=\"error-msg\">{{ error.$message }}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- Password -->\n                        <div class=\"row input-field-signup mt-3\">\n                            <div class=\"col-sm-6 col-form-label\">\n                                <div :class=\"{ error: v$.password.$errors.length }\">\n                                    <label class=\"form-label\" for=\"password\">Password</label>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-6 err-card\">\n                                <input v-model=\"password\" class=\"form-control form-control-l\" :class=\"{ error: v$.password.$errors.length }\" id=\"password\" type=\"password\">\n                                <div class=\"input-errors\" v-for=\"error of v$.password.$errors\" :key=\"error.$uid\">\n                                    <div class=\"error-msg\">{{ error.$message }}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <!-- Password Confirmation -->\n                        <div class=\"row input-field-signup mt-3\">\n                            <div class=\"col-sm-6 col-form-label\">\n                                <div :class=\"{ error: v$.password_confirmation.$errors.length }\">\n                                    <label class=\"form-label\" for=\"password_confirmation\">Password Confirmation</label>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-6 err-card\">\n                                <input v-model=\"password_confirmation\" class=\"form-control form-control-l\" :class=\"{ error: v$.password_confirmation.$errors.length }\" id=\"password_confirmation\" type=\"password\">\n                                <div class=\"input-errors\" v-for=\"error of v$.password_confirmation.$errors\" :key=\"error.$uid\">\n                                    <div class=\"error-msg\">{{ error.$message }}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"text-right mt-4\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg input-field-signup\" style=\"padding-left: 2.5rem; padding-right: 2.5rem;\">Sign up</button>\n                            <!-- <p class=\" input-field-signup\">Already have an account? -->\n                                <!-- <%= link_to 'Login', login_path, class: 'link-primary'%> -->\n                                <!-- <a href=\"#\">Login</a>\n                            </p> -->\n                        </div>\n                    </form>\n                </div>\n                <div class=\"col-md-9 col-lg-6 col-xl-5\">\n                    <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp\" class=\"img-fluid\" alt=\"Login to MovieMagic\">\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { useVuelidate } from '@vuelidate/core';\nimport SignInUser from '@/graphql/Login.gql';\nimport { required, email, helpers, numeric, minLength, maxLength, sameAs } from '@vuelidate/validators';\nimport { onLogin, createProvider } from '@/vue-apollo.js';\nimport { mapState, mapMutations } from 'vuex';\n\nexport default {\n    name: 'LoginForm',\n    setup () { return { v$: useVuelidate() } },\n    data () {\n        return {\n            first_name: null,\n            last_name: null,\n            mobile_number: null,\n            email: null,\n            password: null,\n            password_confirmation: null,\n        }\n    },\n    validations () {\n        const alphabeticWithSpaces = value => /^[a-zA-Z\\s]*$/.test(value);\n        return {\n            first_name: {\n                required: helpers.withMessage('First Name is required.', required),\n                alphabeticWithSpaces: helpers.withMessage('First Name can only contain letters and spaces.', alphabeticWithSpaces),\n            }, \n            last_name: {\n                required: helpers.withMessage('Last Name is required.', required),\n                alphabeticWithSpaces: helpers.withMessage('Last Name can only contain letters and spaces.', alphabeticWithSpaces),\n            },\n            mobile_number: { required: helpers.withMessage('Mobile Number is required.', required), numeric },\n            email: {\n                required,\n                email\n            },\n            password: { required: helpers.withMessage('Password is required.', required), minLength: minLength(8), maxLength: maxLength(20) },\n            password_confirmation: { sameAs: sameAs(this.password) }\n        }\n    },\n    methods: {\n        ...mapMutations(['setAuthenticated']),\n        toggleAuthentication() {\n            this.setAuthenticated(!this.isAuthenticated);\n        },\n        async submitForm() {\n            if (!this.v$.$touch()) {\n                try {\n                    const response = await this.$apollo.mutate({\n                        mutation: require('@/graphql/Signup.gql'),\n                        variables: {\n                            \"signupInput\": {\n                                \"role\":0,\n                                \"firstName\": this.first_name,\n                                \"lastName\": this.last_name,\n                                \"mobileNumber\": this.mobile_number,\n                                \"authProvider\": {\n                                    \"credentials\": {\n                                        \"email\": this.email,\n                                        \"password\": this.password,\n                                        \"passwordConfirmation\": this.password_confirmation\n                                    }\n                                }\n                            }\n                        }\n                    });\n                    if (response.data.createUser.errors > 0) {\n                        console.log(response.data.createUser.errors);\n                    } else {\n                        const login = await this.forceLogin();\n                        if (login && this.$route.path !== '/') {\n                            this.$router.push('/');\n                        } else {\n                            alert('Something went wrong. Please try again later');\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"Client Error:\", error);\n                }\n            }\n        },\n        async forceLogin() {\n            const response = await this.$apollo.mutate({\n                mutation: SignInUser,\n                variables: {\n                    credentials: {\n                        email: this.email,\n                        password: this.password\n                    }\n                },\n            });\n            const token = await response.data.login.token\n            const headers = { Authorization: token };\n            this.toggleAuthentication();\n            await onLogin(createProvider({}, headers), token);\n            return response.data.login === null ? false : true;\n        }\n    },\n    computed: {\n        ...mapState(['isAuthenticated']),\n    },\n}\n</script>\n\n<style>\n.error, .error:focus, .error input[type=\"radio\"] {\n    border-color: red;\n    color: red;\n}\n.input-errors {\n    color: red;\n}\n.err-card {\n    position: relative;\n}\n.error-msg {\n    position: absolute;\n    font-size: 10px;\n    bottom: -8px;\n    left: 17px;\n}\n.register-stepper {\n    /* display: none; */\n}\n</style>"]}]}