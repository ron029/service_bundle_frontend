{"remainingRequest":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js??vue-loader-options!/home/bonifacio/code/service_bundle_frontend/src/views/SignupEntrepPage.vue?vue&type=style&index=0&id=1e493c73&lang=css&","dependencies":[{"path":"/home/bonifacio/code/service_bundle_frontend/src/views/SignupEntrepPage.vue","mtime":1694331158288},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/css-loader/dist/cjs.js","mtime":1692833962858},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js","mtime":1692833962314},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/postcss-loader/dist/cjs.js","mtime":1692833963133},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1692838039149},{"path":"/home/bonifacio/code/service_bundle_frontend/node_modules/@vue/cli-service/lib/config/vue-loader-v15-resolve-compat/vue-loader.js","mtime":1692833961693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jbG91ZGluYXJ5LWJ1dHRvbiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmOwogICAgY29sb3I6IHdoaXRlOwogICAgcGFkZGluZzogMTBweCAyMHB4OwogICAgYm9yZGVyOiBub25lOwogICAgY3Vyc29yOiBwb2ludGVyOwp9Ci5jbG91ZGluYXJ5LWJ1dHRvbjpob3ZlciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA1NmIzOwp9Ci8qIFN0eWxlIHRoZSB1cGxvYWRlZCBpbWFnZSAqLwoudXBsb2FkZWQtaW1hZ2UgewogICAgbWF4LXdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiBhdXRvOwogICAgbWFyZ2luLXRvcDogMTBweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7CiAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjEpOwp9Ci5saW5rX3RleHQgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Ci5lcnJvciwgLmVycm9yOmZvY3VzLCAuZXJyb3IgaW5wdXRbdHlwZT0icmFkaW8iXSB7CiAgYm9yZGVyLWNvbG9yOiByZWQ7CiAgY29sb3I6IHJlZDsKfQouaW5wdXQtZXJyb3JzIHsKICBjb2xvcjogcmVkOwp9Ci5lcnItY2FyZCB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9Ci5lcnJvci1tc2cgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBmb250LXNpemU6IDEwcHg7CiAgYm90dG9tOiAtOHB4OwogIGxlZnQ6IDE3cHg7Cn0KLnJlZ2lzdGVyLXN0ZXBwZXIgewogIGRpc3BsYXk6IG5vbmU7Cn0K"},{"version":3,"sources":["SignupEntrepPage.vue"],"names":[],"mappings":";AA8ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SignupEntrepPage.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <div class=\"container h-custom\">\n            <div class=\"row d-flex justify-content-center align-items-center h-100\">\n                <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1\">\n                    <div class=\"d-flex flex-row align-items-center justify-content-center justify-content-lg-start\">\n                        <p class=\"login_text lead fw-normal mb-0 me-3\"></p>\n                    </div>\n                    <div class=\"register-stepper\">\n                        <div class=\"step\" :class=\"{'step-active' : step === 1, 'step-done': step > 1}\"><span class=\"step-number\">1</span></div>\n                        <div class=\"step\" :class=\"{'step-active' : step === 2, 'step-done': step > 2}\"><span class=\"step-number\">2</span></div>\n                        <div class=\"step\" :class=\"{'step-active' : step === 3, 'step-done': step > 3}\"><span class=\"step-number\">3</span></div>\n                    </div>\n                    <form @submit.prevent=\"submitForm\">\n                        <transition name=\"slide-fade\">\n                            <section v-show=\"step === 1\">\n                                <p>Who owns the business.</p>\n                                <!-- First name -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.first_name.$errors.length }\">\n                                            <label class=\"form-label\" for=\"first_name\">First Name</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"first_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.first_name.$errors.length }\" id=\"first_name\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.first_name.$errors\" :key=\"error.$uid\" placeholder=\"Enter your first name\" autofocus>\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Last name -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.last_name.$errors.length }\">\n                                            <label class=\"form-label\" for=\"last_name\">Last Name</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"last_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.last_name.$errors.length }\" id=\"last_name\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.last_name.$errors\" :key=\"error.$uid\" placeholder=\"Enter your last name\" autofocus>\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Mobile Number -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.mobile_number.$errors.length }\">\n                                            <label class=\"form-label\" for=\"mobile_number\">Mobile Number</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"mobile_number\" class=\"form-control form-control-l\" :class=\"{ error: v$.mobile_number.$errors.length }\" id=\"mobile_number\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.mobile_number.$errors\" :key=\"error.$uid\" placeholder=\"Enter your mobile number\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Email -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.email.$errors.length }\">\n                                            <label class=\"form-label\" for=\"email\">Email</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"email\" class=\"form-control form-control-l\" :class=\"{ error: v$.email.$errors.length }\" id=\"email\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.email.$errors\" :key=\"error.$uid\" placeholder=\"Enter your Email\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <a class=\"link_text\" href=\"#\" @click.prevent=\"next1()\"><span class=\"arrow-prev\"></span>Next </a>\n                            </section>\n                        </transition>\n                        <transition name=\"slide-fade\">\n                            <section v-show=\"step === 2\">\n                                <p>Describe your business</p>\n                                <!-- Service Name -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.service_name.$errors.length }\">\n                                            <label class=\"form-label\" for=\"service_name\">service_name</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"service_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.service_name.$errors.length }\" id=\"service_name\" type=\"service_name\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.service_name.$errors\" :key=\"error.$uid\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!--Service Category -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.service_category.$errors.length }\">\n                                            <label class=\"form-label\" for=\"service_category\">Service Category</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <select v-model=\"service_category\" class=\"form-control form-control-l\" :class=\"{ error: v$.service_category.$errors.length }\" id=\"service_category\">\n                                            <option v-for=\"category in service_categories\" :key=\"category.id\" :value=\"category.id\">\n                                            {{ category.name }}\n                                            </option>\n                                        </select>\n                                        <div class=\"input-errors\" v-for=\"error of v$.service_category.$errors\" :key=\"error.$uid\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Price -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.price.$errors.length }\">\n                                            <label class=\"form-label\" for=\"price\">price</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"price\" class=\"form-control form-control-l\" :class=\"{ error: v$.price.$errors.length }\" id=\"price\" type=\"price\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.service_name.$errors\" :key=\"error.$uid\" placeholder=\"\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Description -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.description.$errors.length }\">\n                                            <label class=\"form-label\" for=\"description\">description</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <textarea v-model=\"description\" class=\"form-control form-control-l\" :class=\"{ error: v$.description.$errors.length }\" id=\"description\" type=\"description\"></textarea>\n                                        <div class=\"input-errors\" v-for=\"error of v$.description.$errors\" :key=\"error.$uid\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- image-->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <button id=\"upload_widget\" @click.prevent=\"\" class=\"cloudinary-button\">Upload files</button>\n                                </div>\n                                <div id=\"image-preview\" class=\"mt-3\"> <!-- This is where the uploaded image will be displayed --> </div>\n                                <div class=\"input-field-signup mt-3\">\n                                    <a class=\"link_text\" href=\"#\" @click.prevent=\"prev()\"><span class=\"arrow-prev\"></span>Previous</a> | \n                                    <a class=\"link_text\" href=\"#\" @click.prevent=\"next2()\"><span class=\"arrow-prev\"></span>Next </a>\n                                </div>\n                            </section>\n                        </transition>\n                        <transition name=\"slide-fade\">\n                            <section v-show=\"step === 3\">\n                                <p>Create a strong password.</p>\n                                <!-- Password -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.password.$errors.length }\">\n                                            <label class=\"form-label\" for=\"password\">Password</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"password\" class=\"form-control form-control-l\" :class=\"{ error: v$.password.$errors.length }\" id=\"password\" type=\"password\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.password.$errors\" :key=\"error.$uid\" placeholder=\"Enter your Password\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Password Confirmation -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.password_confirmation.$errors.length }\">\n                                            <label class=\"form-label\" for=\"password_confirmation\">Password Confirmation</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"password_confirmation\" class=\"form-control form-control-l\" :class=\"{ error: v$.password_confirmation.$errors.length }\" id=\"password_confirmation\" type=\"password\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.password_confirmation.$errors\" :key=\"error.$uid\" placeholder=\"Enter your Password Confirmation\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <a class=\"link_text\" href=\"#\" @click.prevent=\"prev()\"><span class=\"arrow-prev\"></span>Previous </a>\n                                <div class=\"d-flex justify-content-between align-items-center\"> </div>\n                                <div class=\"text-right mt-4\">\n                                    <button type=\"submit\" class=\"btn btn-primary btn-lg input-field-signup\" style=\"padding-left: 2.5rem; padding-right: 2.5rem;\">Sign up</button>\n                                </div>\n                            </section>\n                        </transition>\n                    </form>\n                </div>\n                <div class=\"col-md-9 col-lg-6 col-xl-5\">\n                    <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp\" class=\"img-fluid\" alt=\"Login to MovieMagic\">\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, email, helpers, numeric, minLength, maxLength, sameAs } from '@vuelidate/validators';\nimport { onLogin, createProvider } from '@/vue-apollo.js';\nimport { mapState, mapMutations } from 'vuex';\nimport store from '@/store';\nconst fields = {\n    page1: ['first_name', 'last_name', 'mobile_number', 'email'],\n    page2: ['service_name','price','description'],\n    page5: ['password', 'password_confirmation']\n};\nexport default {\n    name: 'LoginForm',\n    setup () { return { v$: useVuelidate() } },\n    data () {\n        return {\n            steps: {},\n            step: 1,\n            hasSeenCongrats: false,\n            first_name: null,\n            last_name: null,\n            mobile_number: null,\n            email: null,\n            password: null,\n            password_confirmation: null,\n            price: null,\n            service_category: null,\n            service_name: null,\n            description: null,\n            service_categories: [],\n            image: null,\n            userRole: null\n        }\n    },   \n    validations () {\n        const alphabeticWithSpaces = value => /^[a-zA-Z\\s]*$/.test(value);\n        return {\n            first_name: {\n                required: helpers.withMessage('First Name is required.', required),\n                alphabeticWithSpaces: helpers.withMessage('First Name can only contain letters and spaces.', alphabeticWithSpaces),\n            },\n            last_name: {\n                required: helpers.withMessage('Last Name is required.', required),\n                alphabeticWithSpaces: helpers.withMessage('Last Name can only contain letters and spaces.', alphabeticWithSpaces),\n            },\n            price: {numeric, required},\n            description: {required},\n            service_category: { },\n            service_name: { required },\n            mobile_number: { required: helpers.withMessage('Mobile Number is required.', required), numeric },\n            email: { required, email },\n            password: { required: helpers.withMessage('Password is required.', required), minLength: minLength(8), maxLength: maxLength(20) },\n            password_confirmation: { sameAs: sameAs(this.password) }\n        }\n    },\n    methods: {\n        upload(){\n            console.log('upload')\n            var myWidget = window.cloudinary.createUploadWidget({\n                cloudName: 'dovxq5gn9', \n                processQueue: false,\n                uploadPreset: 'uhjevesg'}, (error, result) => { \n                    if (!error && result && result.event === \"success\") { \n                    console.log('Done! Here is the image info: ', result.info); \n                        const imageUrl = result.info.secure_url;\n                        this.image = imageUrl;\n                        this.displayImage(imageUrl);\n                    }\n                }\n            )\n            document.getElementById(\"upload_widget\").addEventListener(\"click\", function(){\n                myWidget.open();\n            }, false);  \n        }, \n        // Function to display the uploaded image\n        displayImage(imageUrl) {\n            const imagePreviewDiv = document.getElementById('image-preview');\n            const image = document.createElement('img');\n            image.src = imageUrl;\n            image.classList.add('uploaded-image'); // Add CSS class for styling\n            imagePreviewDiv.innerHTML = ''; // Clear any existing content\n            imagePreviewDiv.appendChild(image);\n        },\n        async show_categories() {\n            try {\n                const response = await this.$apollo.query({\n                    query: require('@/graphql/Category.gql'),\n                });\n                console.log('the service category is here', response);\n                this.service_categories = response.data.categories;\n            } catch (error) {\n                console.error('Error logging out:', error);\n            }\n        },\n        prev() { this.step--; },\n        field_to_validate(fields) {\n            const last_step = 5\n            let error = 0;\n            for (const field of fields) {\n                this.v$[field].$touch();\n                if (this.v$[field].$error) error++;\n            }\n            if (!error) {\n                if (this.step != last_step) this.step++;\n                return true;\n            }\n        },\n        next1() { this.field_to_validate(fields.page1); },\n        next2() { this.field_to_validate(fields.page2); },\n        async submitForm() {\n            if (!this.v$.$touch()) {\n                const response = await this.$apollo.mutate({\n                    mutation: require('@/graphql/Signup.gql'),\n                    variables: {\n                        \"signupInput\": {\n                            \"role\": 1,\n                            \"firstName\": this.first_name,\n                            \"lastName\": this.last_name,\n                            \"mobileNumber\": this.mobile_number,\n                            \"authProvider\": {\n                                \"credentials\": {\n                                    \"email\": this.email,\n                                    \"password\": this.password,\n                                    \"passwordConfirmation\": this.password_confirmation\n                                }\n                            }\n                        }\n                    }\n                });\n                console.log('this comming from signin mutation :', response)\n                if (response.data.createUser.errors > 0) {\n                    console.log('output when if has errors: ', response.data.createUser.errors);\n                } else {\n                    const login = await this.forceLogin(response.data.createUser.user.email);\n                    if (login && this.$route.path !== '/') {\n                        if (login) await this.create_service();\n                        this.$router.push('/merchant');\n                    } else {\n                        alert('Something went wrong. Please try again later');\n                    }\n                }\n            }\n        },\n        async forceLogin(email) {\n            console.log(email, this.password);\n            const response = await this.$apollo.mutate({\n                mutation: require('@/graphql/Login.gql'),\n                variables: {\n                    credentials: {\n                        email: email,\n                        password: this.password\n                    }\n                },\n            });\n            if (response.data.login == null) return false;\n\n            console.log('resonse from SignInUser mutation :' , response)\n            const token = await response.data.login.token\n            console.log('init token :', token)\n            // assign the Authorization header with the token provided by the backend\n            const headers = { Authorization: token };\n            console.log('init :', headers)\n            const role = await response.data.login.role;\n            console.log('init role: ', role)\n\n            await this.updateUserRole(role);\n            this.userRole = this.get_role();\n            console.log('init this.userRole: ', this.userRole)\n            // tells vue that authentication is true and chance some components\n            this.toggleAuthentication();\n            // store the token in localStorate \n            // using the default onLogin method provided by vue-apollo.js\n            await onLogin(createProvider({}, headers), token);\n\n            return response.data.login === null ? false : true;\n        },\n        async create_service() {\n            try {\n                const response = await this.$apollo.mutate({\n                mutation: require('@/graphql/ServiceCreate.gql'),\n                variables: {\n                    serviceCategoryId: parseInt(this.service_category),\n                    name: this.service_name,\n                    description: this.description,\n                    price: parseInt(this.price),\n                    image: this.image\n                },\n            });\n            if (response) { console.log(response) }\n            this.time_slot_one = null;\n            } catch (error) { console.error(\"Graphql Error:\", error); }\n        },\n        ...mapMutations(['setAuthenticated']),\n        toggleAuthentication() {\n            this.setAuthenticated(!this.isAuthenticated);\n        },\n        get_role(){\n            const userRole = localStorage.getItem('userRole');\n            return userRole;\n        },\n        updateUserRole(role) {\n            // Call the mutation 'setUserRole' with a payload (userRole)\n            store.commit('setUserRole', role); // Replace 'admin' with your actual user role data\n        },\n    },\n    computed: {\n        ...mapState(['isAuthenticated']),\n    },\n    mounted(){\n        this.show_categories(),\n        this.upload();\n    }\n}\n</script>\n\n<style>\n.cloudinary-button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n.cloudinary-button:hover {\n    background-color: #0056b3;\n}\n/* Style the uploaded image */\n.uploaded-image {\n    max-width: 100%;\n    height: auto;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n.link_text {\n    display: inline-block;\n}\n.error, .error:focus, .error input[type=\"radio\"] {\n  border-color: red;\n  color: red;\n}\n.input-errors {\n  color: red;\n}\n.err-card {\n  position: relative;\n}\n.error-msg {\n  position: absolute;\n  font-size: 10px;\n  bottom: -8px;\n  left: 17px;\n}\n.register-stepper {\n  display: none;\n}\n</style>"]}]}