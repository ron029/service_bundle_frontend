{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Datepicker from 'vuejs-datepicker';\nexport default {\n  name: 'ServiceList',\n  data() {\n    return {\n      showPage: 'ServicePage',\n      // Initialize showPage to ServicePage\n      newServiceData: {},\n      updateServiceData: {},\n      services: [],\n      disabledDates: {},\n      selectedDate: null,\n      selectedStartTime: null,\n      selectedEndTime: null,\n      // state: {\n      //   disabledDates: {\n      //     customPredictor: this.disableDatesOutsideRange,\n      //   }\n      // },\n      selectedDates: []\n    };\n  },\n  components: {\n    Datepicker\n    // Timepicker,\n  },\n\n  props: {\n    new_service: {\n      type: Object,\n      validator: function (value) {\n        if (value.id) console.log('this is from servicePage to serviceList, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      }\n    },\n    update_service: {\n      type: Object,\n      validator: function (value) {\n        if (value.service_details) console.log('this is from servicePage to serviceList, the update service is: ', value);\n        // Return true to disable type checking\n        return true;\n      }\n    }\n  },\n  methods: {\n    getDisabledDates(dates) {\n      let enabledDates = [];\n      for (const date of dates) {\n        const from = this.formatDate(date.startDate);\n        const to = this.formatDate(date.endDate);\n\n        // Create an array of dates between 'from' and 'to'\n        const currentDate = new Date(from);\n        while (currentDate <= new Date(to)) {\n          enabledDates.push(currentDate.toISOString().split('T')[0]);\n          currentDate.setDate(currentDate.getDate() + 1);\n        }\n      }\n      return {\n        customPredictor: date => {\n          const formattedDate = date.toISOString().split('T')[0];\n          return !enabledDates.includes(formattedDate);\n        }\n      };\n    },\n    formatDate(dateToParse) {\n      const dateComponents = dateToParse.split('-');\n      const year = parseInt(dateComponents[0]);\n      const month = parseInt(dateComponents[1]) - 1;\n      const day = parseInt(dateComponents[2]);\n      const jsDate = new Date(year, month, day);\n      return jsDate;\n    },\n    // disableDatesOutsideRange(date) {\n    //    // Define an array of date ranges you want to enable\n    //     let time_slots = [\n    //       {\n    //         from: this.formatDate(\"Mon, 25 Sep 2023\"),\n    //         to: this.formatDate(\"Tue, 26 Sep 2023\"),\n    //       },\n    //       {\n    //         from: this.formatDate(\"Wed, 27 Sep 2023\"),\n    //         to: this.formatDate(\"Thu, 28 Sep 2023\"),\n    //       },\n    //       { \n    //         from: this.formatDate(\"Mon, 25 Sep 2023\"),\n    //         to: this.formatDate(\"Fri, 29 Sep 2023\")\n    //       }\n    //     ]\n\n    //   // Check if the date falls within any of the defined ranges\n    //   for (const range of time_slots) {\n    //     if (date >= range.from && date <= range.to) {\n    //       return false; // Enable dates within the range\n    //     }\n    //   }\n\n    //   // Disable all other dates\n    //   return true;\n    // },\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/AdminService.gql')\n        });\n        this.services = response.data.serviceAdmin;\n        console.log(response);\n        if (this.newServiceData.id) {\n          this.merge_new_service_to_services(this.services);\n        }\n        if (this.updateServiceData.service_details) {\n          this.update_service_list(this.services);\n        }\n      } catch (error) {\n        console.log('Error from get_services: ', error);\n      }\n    },\n    update_service_list(service) {\n      let service_one = service[this.updateServiceData.index_to_edit];\n      console.log('servicelist: the edited service is: ', service_one);\n      service_one['image'] = this.updateServiceData.service_details.image;\n      service_one['name'] = this.updateServiceData.service_details.name;\n      service_one['price'] = this.updateServiceData.service_details.price;\n    },\n    merge_new_service_to_services(all_service) {\n      // const category = this.newServiceData.service_categories.find(\n      //   (category) => category.id === this.newServiceData.service_category\n      // );\n      let newservice = {\n        description: this.newServiceData.description,\n        id: this.newServiceData.id,\n        image: this.newServiceData.image,\n        name: this.newServiceData.name,\n        serviceCategoryId: {\n          id: this.newServiceData.service_category,\n          name: this.newServiceData.service_categories[0].name\n        },\n        timeSlot: []\n      };\n      all_service.push(newservice);\n    },\n    showEditService(params) {\n      console.log('serviceList: the service id to edit is: ', params['id']);\n      this.$emit('showEditService', params);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    }\n  },\n\n  mounted() {\n    this.get_services();\n    // Assign the prop value to the data property\n    if (this.new_service) {\n      this.newServiceData = this.new_service;\n      console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n    }\n    if (this.update_service.service_details) {\n      this.updateServiceData = this.update_service;\n      console.log('this is from servicepage to servicelist, update service data is: ', this.updateServiceData);\n    }\n  }\n};","map":{"version":3,"names":["Datepicker","name","data","showPage","newServiceData","updateServiceData","services","disabledDates","selectedDate","selectedStartTime","selectedEndTime","selectedDates","components","props","new_service","type","Object","validator","value","id","console","log","update_service","service_details","methods","getDisabledDates","dates","enabledDates","date","from","formatDate","startDate","to","endDate","currentDate","Date","push","toISOString","split","setDate","getDate","customPredictor","formattedDate","includes","dateToParse","dateComponents","year","parseInt","month","day","jsDate","get_services","response","$apollo","query","require","serviceAdmin","merge_new_service_to_services","update_service_list","error","service","service_one","index_to_edit","image","price","all_service","newservice","description","serviceCategoryId","service_category","service_categories","timeSlot","showEditService","params","$emit","showServiceNew","mounted"],"sources":["src/components/ServiceList.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Services</h2>\n    <button @click=\"showServiceNew\">Show ServiceNew</button>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>No.</th>\n            <th>Service Name</th>\n            <th>Category Name</th>\n            <th>Price</th>\n            <th>Description</th>\n            <th>Time Slots</th>\n            <th>Image</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item, index) in services\" :key=\"item.id\">\n            <td>{{ index + 1 }}</td>\n            <td>{{ item.name }}</td>\n            <td>{{ item.serviceCategoryId.name }}</td>\n            <td>PHP {{ item.price.toFixed(2) }}</td>\n            <td>{{ item.description }}</td>\n            <td>\n              <template>\n                <div class=\"time\">\n                  <datepicker\n                  :disabled-dates=\"getDisabledDates(item.timeSlot)\"\n                  :inline=\"true\"\n                  ></datepicker>\n                </div>\n              </template>\n            </td>\n            <td><img :src=\"item.image\" :alt=item.category_name style=\"width: 200px; height: 150px;\"></td>\n            <td>\n              <span class=\"btn btn-warning\" @click=\"showEditService({id: item.id, index: index})\">Edit</span>\n              <!-- <router-link :to=\"{ path: '/services/' + item.id + '/edit' }\" class=\"btn btn-warning\"> Edit </router-link> -->\n            </td>\n          </tr>\n        </tbody>\n      </table>\n  </div>\n</template>\n\n<script>\nimport Datepicker from 'vuejs-datepicker';\nexport default {\n  name: 'ServiceList',\n  data(){\n    return {\n      showPage: 'ServicePage', // Initialize showPage to ServicePage\n      newServiceData: {},\n      updateServiceData: {},\n      services: [],\n      disabledDates: {},\n      selectedDate: null,\n      selectedStartTime: null,\n      selectedEndTime: null,\n      // state: {\n      //   disabledDates: {\n      //     customPredictor: this.disableDatesOutsideRange,\n      //   }\n      // },\n      selectedDates: [],\n    };\n  },\n  components: {\n    Datepicker,\n    // Timepicker,\n  },\n  props: {\n    new_service: {\n      type: Object,\n      validator: function(value) {\n        if (value.id) console.log('this is from servicePage to serviceList, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n    update_service: {\n      type: Object,\n      validator: function(value) {\n        if (value.service_details) console.log('this is from servicePage to serviceList, the update service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n  },\n  methods: {\n    getDisabledDates(dates) {\n      let enabledDates = [];\n\n      for (const date of dates) {\n        const from = this.formatDate(date.startDate);\n        const to = this.formatDate(date.endDate);\n\n        // Create an array of dates between 'from' and 'to'\n        const currentDate = new Date(from);\n        while (currentDate <= new Date(to)) {\n          enabledDates.push(currentDate.toISOString().split('T')[0]);\n          currentDate.setDate(currentDate.getDate() + 1);\n        }\n      }\n\n      return {\n        customPredictor: date => {\n          const formattedDate = date.toISOString().split('T')[0];\n          return !enabledDates.includes(formattedDate);\n        },\n      };\n    },\n    formatDate(dateToParse) {\n      const dateComponents = dateToParse.split('-');\n      const year = parseInt(dateComponents[0]);\n      const month = parseInt(dateComponents[1]) - 1;\n      const day = parseInt(dateComponents[2]);\n      const jsDate = new Date(year, month, day);\n      return jsDate;\n    },\n    // disableDatesOutsideRange(date) {\n    //    // Define an array of date ranges you want to enable\n    //     let time_slots = [\n    //       {\n    //         from: this.formatDate(\"Mon, 25 Sep 2023\"),\n    //         to: this.formatDate(\"Tue, 26 Sep 2023\"),\n    //       },\n    //       {\n    //         from: this.formatDate(\"Wed, 27 Sep 2023\"),\n    //         to: this.formatDate(\"Thu, 28 Sep 2023\"),\n    //       },\n    //       { \n    //         from: this.formatDate(\"Mon, 25 Sep 2023\"),\n    //         to: this.formatDate(\"Fri, 29 Sep 2023\")\n    //       }\n    //     ]\n\n    //   // Check if the date falls within any of the defined ranges\n    //   for (const range of time_slots) {\n    //     if (date >= range.from && date <= range.to) {\n    //       return false; // Enable dates within the range\n    //     }\n    //   }\n\n    //   // Disable all other dates\n    //   return true;\n    // },\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/AdminService.gql'),\n        });\n        this.services = response.data.serviceAdmin\n        console.log(response);\n\n        if (this.newServiceData.id) { this.merge_new_service_to_services(this.services) }\n        if (this.updateServiceData.service_details) { this.update_service_list(this.services) }\n      } catch (error) {\n        console.log('Error from get_services: ', error);\n      }\n    },\n    update_service_list(service) {\n      let service_one = service[this.updateServiceData.index_to_edit];\n      console.log('servicelist: the edited service is: ', service_one);\n      service_one['image'] = this.updateServiceData.service_details.image;\n      service_one['name'] = this.updateServiceData.service_details.name;\n      service_one['price'] = this.updateServiceData.service_details.price;\n    },\n    merge_new_service_to_services(all_service) {\n      // const category = this.newServiceData.service_categories.find(\n      //   (category) => category.id === this.newServiceData.service_category\n      // );\n      let newservice = {\n        description: this.newServiceData.description,\n        id: this.newServiceData.id,\n        image: this.newServiceData.image,\n        name: this.newServiceData.name,\n        serviceCategoryId: {\n          id: this.newServiceData.service_category,\n          name: this.newServiceData.service_categories[0].name\n        },\n        timeSlot: [],\n      }\n      all_service.push(newservice)\n    },\n    showEditService(params) {\n      console.log('serviceList: the service id to edit is: ', params['id'])\n      this.$emit('showEditService', params);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    },\n  },\n  mounted(){\n    this.get_services();\n    // Assign the prop value to the data property\n    if (this.new_service) {\n      this.newServiceData = this.new_service;\n      console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n    } \n    if (this.update_service.service_details) {\n      this.updateServiceData = this.update_service;\n      console.log('this is from servicepage to servicelist, update service data is: ', this.updateServiceData);\n    }\n  }\n}\n</script>\n\n<style>\n/* @import 'vuejs-datepicker/dist/vuejs-datepicker.css'; */\n@import 'vue2-timepicker/dist/VueTimepicker.css';\n.time {\n  display: inline-block;\n}\n.error, .error:focus, .error input[type=\"radio\"] {\n    border-color: red;\n    color: red;\n}\n.input-errors {\n    color: red;\n}\n.err-card {\n    position: relative;\n}\n.error-msg {\n    position: absolute;\n    font-size: 10px;\n    bottom: -8px;\n    left: 17px;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}