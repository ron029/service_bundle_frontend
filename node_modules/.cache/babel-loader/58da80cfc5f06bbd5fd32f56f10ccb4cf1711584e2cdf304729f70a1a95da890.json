{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Datepicker from 'vuejs-datepicker';\nimport Timepicker from 'vue2-timepicker';\nexport default {\n  name: 'ServiceList',\n  data() {\n    return {\n      showPage: 'ServicePage',\n      // Initialize showPage to ServicePage\n      newServiceData: {},\n      updateServiceData: {},\n      services: [],\n      disabledDates: {\n        \"2023-09-25\": true,\n        \"2023-09-28\": true,\n        \"2023-10-02\": true\n      },\n      selectedDate: null,\n      selectedStartTime: null,\n      selectedEndTime: null\n    };\n  },\n  components: {\n    Datepicker,\n    Timepicker\n  },\n  props: {\n    new_service: {\n      type: Object,\n      validator: function (value) {\n        if (value.id) console.log('this is from servicePage to serviceList, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      }\n    },\n    update_service: {\n      type: Object,\n      validator: function (value) {\n        if (value.service_details) console.log('this is from servicePage to serviceList, the update service is: ', value);\n        // Return true to disable type checking\n        return true;\n      }\n    }\n  },\n  created() {\n    this.populateDisabledDates();\n  },\n  methods: {\n    populateDisabledDates() {\n      // Create a new Date object for tomorrow\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      const tomorrowFormatted = this.formatDate(tomorrow);\n\n      // Disable all dates except for tomorrow\n      const disabledDates = {};\n      const currentDate = new Date();\n      while (currentDate < tomorrow) {\n        disabledDates[this.formatDate(currentDate)] = true;\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n      this.disabledDates = disabledDates;\n    },\n    formatDate(date) {\n      // Format a date as \"YYYY-MM-DD\"\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    disableDates() {\n      return this.disabledDates;\n    },\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/AdminService.gql')\n        });\n        this.services = response.data.serviceAdmin;\n        console.log(response);\n        if (this.newServiceData.id) {\n          this.merge_new_service_to_services(this.services);\n        }\n        if (this.updateServiceData.service_details) {\n          this.update_service_list(this.services);\n        }\n      } catch (error) {\n        console.log('Error from get_services: ', error);\n      }\n    },\n    update_service_list(service) {\n      let service_one = service[this.updateServiceData.index_to_edit];\n      console.log('servicelist: the edited service is: ', service_one);\n      service_one['image'] = this.updateServiceData.service_details.image;\n      service_one['name'] = this.updateServiceData.service_details.name;\n      service_one['price'] = this.updateServiceData.service_details.price;\n    },\n    merge_new_service_to_services(all_service) {\n      // const category = this.newServiceData.service_categories.find(\n      //   (category) => category.id === this.newServiceData.service_category\n      // );\n      let newservice = {\n        description: this.newServiceData.description,\n        id: this.newServiceData.id,\n        image: this.newServiceData.image,\n        name: this.newServiceData.name,\n        serviceCategoryId: {\n          id: this.newServiceData.service_category,\n          name: this.newServiceData.service_categories[0].name\n        },\n        timeSlot: []\n      };\n      all_service.push(newservice);\n    },\n    showEditService(params) {\n      console.log('serviceList: the service id to edit is: ', params['id']);\n      this.$emit('showEditService', params);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    }\n  },\n\n  mounted() {\n    this.get_services();\n    // Assign the prop value to the data property\n    if (this.new_service) {\n      this.newServiceData = this.new_service;\n      console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n    }\n    if (this.update_service.service_details) {\n      this.updateServiceData = this.update_service;\n      console.log('this is from servicepage to servicelist, update service data is: ', this.updateServiceData);\n    }\n  }\n};","map":{"version":3,"names":["Datepicker","Timepicker","name","data","showPage","newServiceData","updateServiceData","services","disabledDates","selectedDate","selectedStartTime","selectedEndTime","components","props","new_service","type","Object","validator","value","id","console","log","update_service","service_details","created","populateDisabledDates","methods","tomorrow","Date","setDate","getDate","tomorrowFormatted","formatDate","currentDate","date","year","getFullYear","month","String","getMonth","padStart","day","disableDates","get_services","response","$apollo","query","require","serviceAdmin","merge_new_service_to_services","update_service_list","error","service","service_one","index_to_edit","image","price","all_service","newservice","description","serviceCategoryId","service_category","service_categories","timeSlot","push","showEditService","params","$emit","showServiceNew","mounted"],"sources":["src/components/ServiceList.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Services</h2>\n    <button @click=\"showServiceNew\">Show ServiceNew</button>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>No.</th>\n            <th>Service Name</th>\n            <th>Category Name</th>\n            <th>Price</th>\n            <th>Description</th>\n            <th>Time Slots</th>\n            <th>Image</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item, index) in services\" :key=\"item.id\">\n            <td>{{ index + 1 }}</td>\n            <td>{{ item.name }}</td>\n            <td>{{ item.serviceCategoryId.name }}</td>\n            <td>PHP {{ item.price.toFixed(2) }}</td>\n            <td>{{ item.description }}</td>\n            <td>\n              <template>\n                <div>\n                  <datepicker v-model=\"selectedDate\" :disabled-dates=\"disabledDates\"></datepicker>\n                  <timepicker v-model=\"selectedStartTime\"></timepicker>\n                  <timepicker v-model=\"selectedEndTime\"></timepicker>\n                </div>\n              </template>\n              <!-- <table>\n                <tr>\n                  <th>date</th>\n                  <th>start time</th>\n                  <th>end time</th>\n                </tr>\n                <tr v-for=\"time in item.timeSlot\" :key=\"time.id\">\n                  <td>{{ time.date }}</td>\n                  <td>{{ time.startTime }}</td>\n                  <td>{{ time.endTime }}</td>\n                </tr>\n              </table> -->\n            </td>\n            <td><img :src=\"item.image\" :alt=item.category_name style=\"width: 200px; height: 150px;\"></td>\n            <td>\n              <span class=\"btn btn-warning\" @click=\"showEditService({id: item.id, index: index})\">Edit</span>\n              <!-- <router-link :to=\"{ path: '/services/' + item.id + '/edit' }\" class=\"btn btn-warning\"> Edit </router-link> -->\n            </td>\n          </tr>\n        </tbody>\n      </table>\n  </div>\n</template>\n\n<script>\nimport Datepicker from 'vuejs-datepicker';\nimport Timepicker from 'vue2-timepicker';\nexport default {\n  name: 'ServiceList',\n  data(){\n    return {\n      showPage: 'ServicePage', // Initialize showPage to ServicePage\n      newServiceData: {},\n      updateServiceData: {},\n      services: [],\n      disabledDates: {\n  \"2023-09-25\": true,\n  \"2023-09-28\": true,\n  \"2023-10-02\": true\n},\n      selectedDate: null,\n      selectedStartTime: null,\n      selectedEndTime: null,\n    };\n  },\n  components: {\n    Datepicker,\n    Timepicker,\n  },\n  props: {\n    new_service: {\n      type: Object,\n      validator: function(value) {\n        if (value.id) console.log('this is from servicePage to serviceList, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n    update_service: {\n      type: Object,\n      validator: function(value) {\n        if (value.service_details) console.log('this is from servicePage to serviceList, the update service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n  },\n  created() {\n    this.populateDisabledDates();\n  },\n  methods: {\n    populateDisabledDates() {\n      // Create a new Date object for tomorrow\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      const tomorrowFormatted = this.formatDate(tomorrow);\n\n      // Disable all dates except for tomorrow\n      const disabledDates = {};\n      const currentDate = new Date();\n      while (currentDate < tomorrow) {\n        disabledDates[this.formatDate(currentDate)] = true;\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n\n      this.disabledDates = disabledDates;\n    },\n    formatDate(date) {\n      // Format a date as \"YYYY-MM-DD\"\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    disableDates() {\n      return this.disabledDates\n    },\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/AdminService.gql'),\n        });\n        this.services = response.data.serviceAdmin\n        console.log(response);\n\n        if (this.newServiceData.id) { this.merge_new_service_to_services(this.services) }\n        if (this.updateServiceData.service_details) { this.update_service_list(this.services) }\n      } catch (error) {\n        console.log('Error from get_services: ', error);\n      }\n    },\n    update_service_list(service) {\n      let service_one = service[this.updateServiceData.index_to_edit];\n      console.log('servicelist: the edited service is: ', service_one);\n      service_one['image'] = this.updateServiceData.service_details.image;\n      service_one['name'] = this.updateServiceData.service_details.name;\n      service_one['price'] = this.updateServiceData.service_details.price;\n    },\n    merge_new_service_to_services(all_service) {\n      // const category = this.newServiceData.service_categories.find(\n      //   (category) => category.id === this.newServiceData.service_category\n      // );\n      let newservice = {\n        description: this.newServiceData.description,\n        id: this.newServiceData.id,\n        image: this.newServiceData.image,\n        name: this.newServiceData.name,\n        serviceCategoryId: {\n          id: this.newServiceData.service_category,\n          name: this.newServiceData.service_categories[0].name\n        },\n        timeSlot: [],\n      }\n      all_service.push(newservice)\n    },\n    showEditService(params) {\n      console.log('serviceList: the service id to edit is: ', params['id'])\n      this.$emit('showEditService', params);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    },\n  },\n  mounted(){\n    this.get_services();\n    // Assign the prop value to the data property\n    if (this.new_service) {\n      this.newServiceData = this.new_service;\n      console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n    } \n    if (this.update_service.service_details) {\n      this.updateServiceData = this.update_service;\n      console.log('this is from servicepage to servicelist, update service data is: ', this.updateServiceData);\n    }\n  }\n}\n</script>\n\n<style>\n/* @import 'vuejs-datepicker/dist/vuejs-datepicker.css'; */\n@import 'vue2-timepicker/dist/VueTimepicker.css';\n.error, .error:focus, .error input[type=\"radio\"] {\n    border-color: red;\n    color: red;\n}\n.input-errors {\n    color: red;\n}\n.err-card {\n    position: relative;\n}\n.error-msg {\n    position: absolute;\n    font-size: 10px;\n    bottom: -8px;\n    left: 17px;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}