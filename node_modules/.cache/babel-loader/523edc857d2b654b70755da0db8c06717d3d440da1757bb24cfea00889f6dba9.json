{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'TimeSlotDetails',\n  data() {\n    return {\n      service: {\n        time: '',\n        start_time: '',\n        end_time: '',\n        date: ''\n      }\n    };\n  },\n  methods: {\n    getCurrentDate() {\n      const currentDate = new Date();\n      currentDate.setDate(currentDate.getDate() + 1); // Add one day\n      // Format the date as needed, e.g., \"YYYY-MM-DD\"\n      const formattedDate = currentDate.toISOString().split('T')[0];\n      return formattedDate;\n    },\n    async submitForm() {\n      await this.create_cart_item();\n    },\n    async create_cart_item() {\n      try {\n        const date = await this.fetch_time_slot();\n        const service_id = this.$route.params.serviceId;\n        const time = this.service.time;\n        console.log('serviceid is ', service_id);\n        console.log('date ', date);\n        console.log('time ', time);\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/CartItemCreate.gql'),\n          variables: {\n            serviceId: service_id,\n            date: this.$route.query.date,\n            time: time\n          }\n        });\n        console.log(response);\n        if (response.data.createCartItem.errors < 1) {\n          alert('SUCCESS !');\n          this.$router.push('/cart');\n        }\n      } catch (error) {\n        console.error('Error in create_cart_item:', error);\n        // Handle the error here, e.g., show an error message to the user.\n      }\n    },\n\n    async fetch_time_slot() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/TimeSlotOne.gql'),\n          variables: {\n            id: parseInt(this.$route.params.timeSlotId)\n          }\n        });\n        this.service.start_time = await this.formattedStartTime(response.data.timeSlotOne.startTime);\n        this.service.end_time = await this.formattedStartTime(response.data.timeSlotOne.endTime);\n        this.service.date = await response.data.timeSlotOne.date;\n        console.log(response);\n        return response.data.timeSlotOne.date;\n      } catch (error) {\n        console.error('Error in fetch_time_slot:', error);\n      }\n    },\n    formattedStartTime(time) {\n      // Parse the start_time string into a Date object\n      const dateObj = new Date(time);\n\n      // Extract the hour, minute, and AM/PM parts\n      const hour = dateObj.getUTCHours();\n      const minute = dateObj.getUTCMinutes();\n      const ampm = hour >= 12 ? \"PM\" : \"AM\";\n\n      // Convert to 12-hour format and format the hour and minute as \"HH:MM AM/PM\"\n      const formattedHour = ((hour + 11) % 12 + 1).toString().padStart(2, '0');\n      return `${formattedHour}:${minute.toString().padStart(2, '0')} ${ampm}`;\n    }\n  },\n  mounted() {\n    this.fetch_time_slot();\n  }\n};","map":{"version":3,"names":["name","data","service","time","start_time","end_time","date","methods","getCurrentDate","currentDate","Date","setDate","getDate","formattedDate","toISOString","split","submitForm","create_cart_item","fetch_time_slot","service_id","$route","params","serviceId","console","log","response","$apollo","mutate","mutation","require","variables","query","createCartItem","errors","alert","$router","push","error","id","parseInt","timeSlotId","formattedStartTime","timeSlotOne","startTime","endTime","dateObj","hour","getUTCHours","minute","getUTCMinutes","ampm","formattedHour","toString","padStart","mounted"],"sources":["src/components/TimeSlotDetails.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>TimeSlot Details</h1>\n    <p>Category Name: {{ this.$route.params.categoryId }}</p>\n    <p>Service Name: {{ this.$route.params.serviceId }}</p>\n    <p>Time Slot: {{ this.$route.params.timeSlotId }}</p>\n    <p>Choose time between {{  this.service.start_time }} and {{   this.service.end_time }}</p>\n    <p v-if=\"service.date == getCurrentDate()\">You're about to select the date today ({{ this.service.date }}), please select the time in the future.</p>\n    <form @submit.prevent=\"submitForm\">\n      <input type=\"time\" v-model=\"service.time\">\n      <input type=\"submit\">\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TimeSlotDetails',\n  data() {\n    return {\n      service: {\n        time: '',\n        start_time: '',\n        end_time: '',\n        date: ''\n      }\n    }\n  },\n  methods: {\n    getCurrentDate() {\n      const currentDate = new Date();\n      currentDate.setDate(currentDate.getDate() + 1); // Add one day\n      // Format the date as needed, e.g., \"YYYY-MM-DD\"\n      const formattedDate = currentDate.toISOString().split('T')[0];\n      return formattedDate;\n    },\n    async submitForm(){\n      await this.create_cart_item();\n    },\n    async create_cart_item() {\n      try {\n        const date = await this.fetch_time_slot()\n        const service_id = this.$route.params.serviceId;\n        const time = this.service.time\n        console.log('serviceid is ', service_id)\n        console.log('date ', date);\n        console.log('time ', time)\n\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/CartItemCreate.gql'),\n        variables: {\n          serviceId: service_id,\n          date: this.$route.query.date,\n          time: time,\n        },\n      });\n      console.log(response);\n      if (response.data.createCartItem.errors < 1) {\n        alert('SUCCESS !')\n        this.$router.push('/cart')\n      }\n    } catch (error) {\n      console.error('Error in create_cart_item:', error);\n      // Handle the error here, e.g., show an error message to the user.\n    }\n    },\n    async fetch_time_slot(){\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/TimeSlotOne.gql'),\n          variables: { id: parseInt(this.$route.params.timeSlotId)}\n        });\n        this.service.start_time = await this.formattedStartTime(response.data.timeSlotOne.startTime);\n        this.service.end_time = await this.formattedStartTime(response.data.timeSlotOne.endTime);\n        this.service.date = await response.data.timeSlotOne.date;\n        console.log(response)\n        return response.data.timeSlotOne.date;\n\n      } catch (error) {\n        console.error('Error in fetch_time_slot:', error);\n      }\n    },\n    formattedStartTime(time) {\n      // Parse the start_time string into a Date object\n      const dateObj = new Date(time);\n\n      // Extract the hour, minute, and AM/PM parts\n      const hour = dateObj.getUTCHours();\n      const minute = dateObj.getUTCMinutes();\n      const ampm = hour >= 12 ? \"PM\" : \"AM\";\n\n      // Convert to 12-hour format and format the hour and minute as \"HH:MM AM/PM\"\n      const formattedHour = ((hour + 11) % 12 + 1).toString().padStart(2, '0');\n      return `${formattedHour}:${minute.toString().padStart(2, '0')} ${ampm}`;\n    },\n  },\n  mounted(){\n    this.fetch_time_slot()\n  },    \n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":";AAgBA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;QACAC,IAAA;QACAC,UAAA;QACAC,QAAA;QACAC,IAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,eAAA;MACA,MAAAC,WAAA,OAAAC,IAAA;MACAD,WAAA,CAAAE,OAAA,CAAAF,WAAA,CAAAG,OAAA;MACA;MACA,MAAAC,aAAA,GAAAJ,WAAA,CAAAK,WAAA,GAAAC,KAAA;MACA,OAAAF,aAAA;IACA;IACA,MAAAG,WAAA;MACA,WAAAC,gBAAA;IACA;IACA,MAAAA,iBAAA;MACA;QACA,MAAAX,IAAA,cAAAY,eAAA;QACA,MAAAC,UAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,SAAA;QACA,MAAAnB,IAAA,QAAAD,OAAA,CAAAC,IAAA;QACAoB,OAAA,CAAAC,GAAA,kBAAAL,UAAA;QACAI,OAAA,CAAAC,GAAA,UAAAlB,IAAA;QACAiB,OAAA,CAAAC,GAAA,UAAArB,IAAA;QAEA,MAAAsB,QAAA,cAAAC,OAAA,CAAAC,MAAA;UACAC,QAAA,EAAAC,OAAA;UACAC,SAAA;YACAR,SAAA,EAAAH,UAAA;YACAb,IAAA,OAAAc,MAAA,CAAAW,KAAA,CAAAzB,IAAA;YACAH,IAAA,EAAAA;UACA;QACA;QACAoB,OAAA,CAAAC,GAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAxB,IAAA,CAAA+B,cAAA,CAAAC,MAAA;UACAC,KAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA;MACA,SAAAC,KAAA;QACAd,OAAA,CAAAc,KAAA,+BAAAA,KAAA;QACA;MACA;IACA;;IACA,MAAAnB,gBAAA;MACA;QACA,MAAAO,QAAA,cAAAC,OAAA,CAAAK,KAAA;UACAA,KAAA,EAAAF,OAAA;UACAC,SAAA;YAAAQ,EAAA,EAAAC,QAAA,MAAAnB,MAAA,CAAAC,MAAA,CAAAmB,UAAA;UAAA;QACA;QACA,KAAAtC,OAAA,CAAAE,UAAA,cAAAqC,kBAAA,CAAAhB,QAAA,CAAAxB,IAAA,CAAAyC,WAAA,CAAAC,SAAA;QACA,KAAAzC,OAAA,CAAAG,QAAA,cAAAoC,kBAAA,CAAAhB,QAAA,CAAAxB,IAAA,CAAAyC,WAAA,CAAAE,OAAA;QACA,KAAA1C,OAAA,CAAAI,IAAA,SAAAmB,QAAA,CAAAxB,IAAA,CAAAyC,WAAA,CAAApC,IAAA;QACAiB,OAAA,CAAAC,GAAA,CAAAC,QAAA;QACA,OAAAA,QAAA,CAAAxB,IAAA,CAAAyC,WAAA,CAAApC,IAAA;MAEA,SAAA+B,KAAA;QACAd,OAAA,CAAAc,KAAA,8BAAAA,KAAA;MACA;IACA;IACAI,mBAAAtC,IAAA;MACA;MACA,MAAA0C,OAAA,OAAAnC,IAAA,CAAAP,IAAA;;MAEA;MACA,MAAA2C,IAAA,GAAAD,OAAA,CAAAE,WAAA;MACA,MAAAC,MAAA,GAAAH,OAAA,CAAAI,aAAA;MACA,MAAAC,IAAA,GAAAJ,IAAA;;MAEA;MACA,MAAAK,aAAA,KAAAL,IAAA,iBAAAM,QAAA,GAAAC,QAAA;MACA,UAAAF,aAAA,IAAAH,MAAA,CAAAI,QAAA,GAAAC,QAAA,YAAAH,IAAA;IACA;EACA;EACAI,QAAA;IACA,KAAApC,eAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}