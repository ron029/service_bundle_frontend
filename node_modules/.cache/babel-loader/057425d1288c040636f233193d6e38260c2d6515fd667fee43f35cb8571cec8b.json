{"ast":null,"code":"import { useVuelidate } from '@vuelidate/core';\nimport { required, integer } from '@vuelidate/validators';\nexport default {\n  name: 'ServiceEdit',\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      services: {\n        service_category: '',\n        name: '',\n        price: '',\n        description: '',\n        service_categories: []\n      },\n      id: '',\n      image: '',\n      time_slot: [],\n      time_slot_one: [],\n      showTime: false,\n      edit_time: false,\n      delete_time: false,\n      time_slot_old: {\n        start_time: '',\n        end_time: '',\n        date: '',\n        capacity: ''\n      },\n      time_slot_create: true,\n      createTimeSlot: false,\n      newts: {\n        start_time: '',\n        end_time: '',\n        date: '',\n        capacity: ''\n      },\n      show_old_image: true\n    };\n  },\n  validations() {\n    return {\n      services: {\n        name: {\n          required\n        },\n        service_category: {\n          required\n        },\n        price: {\n          required,\n          integer\n        },\n        description: {\n          required\n        },\n        service_categories: {\n          required\n        }\n      }\n    };\n  },\n  props: {\n    id: Number // Define the 'id' prop with the expected data type\n  },\n\n  methods: {\n    upload() {\n      console.log('upload');\n      var myWidget = window.cloudinary.createUploadWidget({\n        cloudName: 'dovxq5gn9',\n        processQueue: false,\n        uploadPreset: 'uhjevesg'\n      }, (error, result) => {\n        if (!error && result && result.event === \"success\") {\n          console.log('Done! Here is the image info: ', result.info);\n          const imageUrl = result.info.secure_url;\n          this.services.image = imageUrl;\n          this.displayImage(imageUrl);\n        }\n      });\n      document.getElementById(\"upload_widget\").addEventListener(\"click\", function () {\n        myWidget.open();\n      }, false);\n    },\n    // Function to display the uploaded image\n    displayImage(imageUrl) {\n      this.show_old_image = false;\n      const imagePreviewDiv = document.getElementById('image-preview');\n      const image = document.createElement('img');\n      image.src = imageUrl;\n      image.classList.add('uploaded-image'); // Add CSS class for styling\n      imagePreviewDiv.innerHTML = ''; // Clear any existing content\n      imagePreviewDiv.appendChild(image);\n    },\n    new_time_slot() {\n      this.createTimeSlot = true;\n    },\n    async create_time_slot() {\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/TimeSlotCreate.gql'),\n        variables: {\n          \"serviceId\": this.id,\n          \"date\": this.newts.date,\n          \"startTime\": this.newts.start_time,\n          \"endTime\": this.newts.end_time,\n          \"capacity\": this.newts.capacity\n        }\n      });\n      this.createTimeSlot = false;\n      if (response) {\n        alert('NEW TIMESLOT HAS BEEN ADDED');\n        this.reloadPage();\n      }\n      this.show_time_slot_by_service(this.id);\n    },\n    async edit_time_save() {\n      console.log('the id of specific timeslot is now', this.time_slot_one.id);\n      console.log(\"'it is a type of', t\");\n      console.log(typeof this.time_slot_one.id);\n      const parseid = parseInt(this.time_slot_one.id);\n      this.showTime = false;\n      this.edit_time = false;\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/TimeSlotUpdate.gql'),\n          variables: {\n            \"id\": parseid,\n            \"serviceId\": this.id,\n            \"date\": this.time_slot_one.date,\n            \"startTime\": this.time_slot_one.startTime,\n            \"endTime\": this.time_slot_one.endTime,\n            \"capacity\": parseInt(this.time_slot_one.capacity)\n          }\n        });\n        console.log(response);\n        this.time_slot_one = null;\n      } catch (error) {\n        console.error(\"Graphql Error:\", error);\n      }\n    },\n    async delete_time_save() {\n      console.log('the object of time slot to delete is', this.time_slot_one.id);\n      console.log('the type of id is');\n      console.log(typeof parseInt(this.time_slot_one.id));\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/TimeSlotDelete.gql'),\n          variables: {\n            \"id\": parseInt(this.time_slot_one.id)\n          }\n        });\n        if (response) {\n          alert('TIMESLOT HAS BEEN DELETED.');\n          this.reloadPage();\n        }\n        console.log(response);\n        this.time_slot_one = null;\n      } catch (error) {\n        console.error(\"Graphql Error:\", error);\n      }\n      this.showTime = false;\n      this.delete_time = false;\n      this.time_slot_one = null;\n    },\n    popupTime() {\n      this.showTime = true;\n    },\n    closeTime() {\n      this.edit_time = true;\n    },\n    async edit_time_slot(item) {\n      console.log('edit_time_slot_id is now', parseInt(item.id));\n      await this.show_time_slot_one(parseInt(item.id));\n      this.edit_time = true;\n      this.showTime = true;\n    },\n    async delete_time_slot(item) {\n      console.log('delete_time_slot_id is ', parseInt(item.id));\n      await this.show_time_slot_one(parseInt(item.id));\n      this.delete_time = true;\n      this.showTime = true;\n    },\n    async submitForm() {\n      this.v$.$touch();\n      if (!this.v$.$error) {\n        this.services.service_category = parseInt(this.services.service_category);\n        this.services.price = parseInt(this.services.price);\n        console.log(this.services);\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceUpdate.gql'),\n          variables: {\n            id: this.services.id,\n            serviceCategoryId: this.services.service_category,\n            name: this.services.name,\n            description: this.services.description,\n            price: this.services.price,\n            image: this.services.image\n          }\n        });\n        console.log('response after update', response);\n        console.log(response.data.updateService.errors.length);\n        if (response.data.updateService.errors.length < 1) {\n          alert('YOUR PRODUCT HAS BEEN UPDATED');\n          // this.$router.push('/services');\n        }\n      }\n    },\n\n    async show_service(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/AdminServiceFind.gql'),\n        variables: {\n          \"id\": new_id\n        }\n      });\n      this.services.id = response.data.serviceAdmin[0].id;\n      this.services.name = response.data.serviceAdmin[0].name;\n      this.services.price = response.data.serviceAdmin[0].price;\n      this.services.image = response.data.serviceAdmin[0].image;\n      this.services.description = response.data.serviceAdmin[0].description;\n      this.services.service_categories = response.data.serviceAdmin[0].serviceCategories;\n      this.services.service_category = response.data.serviceAdmin[0].serviceCategoryId.name;\n    },\n    async show_time_slot() {},\n    async show_time_slot_one(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/TimeSlotOne.gql'),\n        variables: {\n          \"id\": new_id\n        }\n      });\n      this.time_slot_one = response.data.timeSlotOne;\n      this.time_slot_old.capacity = response.data.timeSlotOne.capacity;\n      this.time_slot_old.date = response.data.timeSlotOne.date;\n      this.time_slot_old.end_time = response.data.timeSlotOne.endTime;\n      this.time_slot_old.start_time = response.data.timeSlotOne.startTime;\n    },\n    async show_time_slot_by_service(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/TimeSlotByService.gql'),\n        variables: {\n          \"id\": new_id\n        }\n      });\n      this.time_slot = response.data.timeSlotByService;\n      console.log('TS BY SERVICE', this.time_slot);\n    },\n    reloadPage() {\n      // Reload the current page\n      window.location.reload();\n    },\n    formattedStartTime(time) {\n      // Parse the start_time string into a Date object\n      const dateObj = new Date(time);\n\n      // Extract the hour, minute, and AM/PM parts\n      const hour = dateObj.getUTCHours();\n      const minute = dateObj.getUTCMinutes();\n      const ampm = hour >= 12 ? \"PM\" : \"AM\";\n\n      // Convert to 12-hour format and format the hour and minute as \"HH:MM AM/PM\"\n      const formattedHour = ((hour + 11) % 12 + 1).toString().padStart(2, '0');\n      return `${formattedHour}:${minute.toString().padStart(2, '0')} ${ampm}`;\n    }\n  },\n  mounted() {\n    this.time_slot;\n    this.show_service(this.id);\n    this.show_time_slot(this.id);\n    this.show_time_slot_by_service(this.id);\n    this.upload();\n  }\n};","map":{"version":3,"names":["useVuelidate","required","integer","name","setup","v$","data","services","service_category","price","description","service_categories","id","image","time_slot","time_slot_one","showTime","edit_time","delete_time","time_slot_old","start_time","end_time","date","capacity","time_slot_create","createTimeSlot","newts","show_old_image","validations","props","Number","methods","upload","console","log","myWidget","window","cloudinary","createUploadWidget","cloudName","processQueue","uploadPreset","error","result","event","info","imageUrl","secure_url","displayImage","document","getElementById","addEventListener","open","imagePreviewDiv","createElement","src","classList","add","innerHTML","appendChild","new_time_slot","create_time_slot","response","$apollo","mutate","mutation","require","variables","alert","reloadPage","show_time_slot_by_service","edit_time_save","parseid","parseInt","startTime","endTime","delete_time_save","popupTime","closeTime","edit_time_slot","item","show_time_slot_one","delete_time_slot","submitForm","$touch","$error","serviceCategoryId","updateService","errors","length","show_service","new_id","query","serviceAdmin","serviceCategories","show_time_slot","timeSlotOne","timeSlotByService","location","reload","formattedStartTime","time","dateObj","Date","hour","getUTCHours","minute","getUTCMinutes","ampm","formattedHour","toString","padStart","mounted"],"sources":["src/views/ServiceEdit.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"row d-flex justify-content-center align-items-center h-100\">\n      <div class=\"col-md-6 col-lg-6 col-sm-6\">\n        <div class=\"d-flex flex-row align-items-center justify-content-center justify-content-lg-start\">\n          <p class=\"login_text lead fw-normal mb-0 me-3\"></p>\n        </div>\n        <form @submit.prevent=\"submitForm\" class=\"row\">\n          <div class=\"col-md-6 col-lg-6\">\n            <div class=\"input-field-signin\">\n              <div :class=\"{ error: v$.services.name.$errors.length }\">\n                <label class=\"form-label\">Service Name\n                  <input v-model=\"services.name\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.name.$errors.length }\">\n                  <div class=\"input-errors\" v-for=\"error of v$.services.name.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </label>\n              </div>\n            </div>\n            <!-- Image -->\n            <div class=\"row input-field-signup mt-3\">\n              <button id=\"upload_widget\" @click.prevent=\"\" class=\"cloudinary-button\">Change Image</button>\n            </div>\n            <div class=\"input-field-signin\">\n              <div>\n                <label class=\"form-label\">\n                  <div id=\"image-preview\" class=\"mt-3\"> <!-- This is where the uploaded image will be displayed --> </div>\n                  <img v-if=\"show_old_image\" :src=\"services.image\" style=\"height:200px; width:200px;\">\n\n                </label>\n              </div>\n            </div> \n          </div>\n          <!-- Service Category -->\n          <div class=\"col-md-3 col-lg-6\">\n            <div class=\"input-field-signin\">\n              <div :class=\"{ error: v$.services.service_category.$errors.length }\">\n                <label class=\"form-label\">name\n                  <select v-model=\"services.service_category\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.service_category.$errors.length }\">\n                    <option v-for=\"category in this.services.service_categories\" :key=\"category.id\" :value=\"category.id\">\n                      {{ category.name }}\n                    </option>\n                  </select>\n                </label>\n              </div>\n            </div>\n            <!-- Description -->\n            <div class=\"input-field-signin\">\n              <div :class=\"{ error: v$.services.description.$errors.length }\">\n                <label class=\"form-label\">Description\n                  <textarea v-model=\"services.description\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.description.$errors.length }\"></textarea>\n                  <div class=\"input-errors\" v-for=\"error of v$.services.description.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </label>\n              </div>\n            </div>\n            <!-- Price -->\n            <div class=\"input-field-signin\">\n              <div :class=\"{ error: v$.services.price.$errors.length }\">\n                <label class=\"form-label\">Price\n                  <input id=\"price\" v-model=\"services.price\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.price.$errors.length }\">\n                  <div class=\"input-errors\" v-for=\"error of v$.services.price.$errors\" :key=\"error.$uid\">\n                    <div class=\"error-msg\">{{ error.$message }}</div>\n                  </div>\n                </label>\n              </div>\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-primary btn-lg input-field-signin\">Update</button>\n        </form>\n      </div>\n      <div class=\"col-md-6 col-lg-6 col-sm-6\">\n        <span @click=\"new_time_slot\" class=\"btn btn-primary\">New Time Slot</span>\n        <table class=\"table\">\n          <tr>\n            <td>Date</td>\n            <td>Start Time</td>\n            <td>End Time</td>\n            <td>Capacity</td>\n            <td>Action</td>\n          </tr>\n          <tr v-for=\"item in this.time_slot\" :key=\"item.id\">\n            <td>{{ item.date }}</td>\n            <td>{{ formattedStartTime(item.startTime) }}</td>\n            <td>{{ formattedStartTime(item.endTime) }}</td>\n            <td>{{ item.capacity }}</td>\n            <td>\n              <span @click=\"edit_time_slot(item)\" class=\"btn btn-warning\">edit</span>\n              <span @click=\"delete_time_slot(item)\" class=\"btn btn-danger\">Delete</span>\n            </td>\n          </tr>\n        </table>\n      </div>\n      <div class=\"position-relative edit-time\">\n        <div v-if=\"showTime\" class=\"card position-absolute top-50 start-50 translate-middle\">\n          <div class=\"card-body\">\n            <h1></h1>\n            <table class=\"table\">\n              <tr>\n                <td>Date</td>\n                <td>Start Time</td>\n                <td>End Time</td>\n                <td>Capacity</td>\n                <td>Action</td>\n              </tr>\n              <tr v-if=\"delete_time\">\n                <td>{{ this.time_slot_one.date }}</td>\n                <td>{{ formattedStartTime(this.time_slot_one.startTime) }}</td>\n                <td>{{ formattedStartTime(this.time_slot_one.endTime) }}</td>\n                <td>{{ this.time_slot_one.capacity }}</td>\n                <td><span @click=\"this.delete_time_save\" class=\"btn btn-danger\">Delete</span></td>\n              </tr>\n              <tr v-if=\"edit_time\">\n                <td> <input type=\"date\" v-model=\"time_slot_one.date\"> </td> \n                <td>\n                  {{ formattedStartTime(this.time_slot_one.startTime) }}<br>\n                  <input type=\"time\" v-model=\"time_slot_one.startTime\">\n                </td>\n                <td>\n                  {{ formattedStartTime(this.time_slot_one.endTime) }}<br>\n                  <input type=\"time\" v-model=\"time_slot_one.endTime\">\n                </td>\n                <td>\n                  {{ this.time_slot_one.capacity }}<br>\n                  <input type=\"number\" v-model=\"time_slot_one.capacity\">\n                </td>\n                <td><span @click=\"this.edit_time_save\" class=\"btn btn-warning\">edit</span></td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </div>\n      <div class=\"position-relative edit-time\">\n        <div v-if=\"createTimeSlot\" class=\"card position-absolute top-50 start-50 translate-middle\">\n          <div class=\"card-body\">\n            <p>please ensure the date is now or in the future</p>\n            <p>please ensure the before and after of time, or else it wont save!</p>\n            <table class=\"table\">\n              <tr>\n                <td>Date</td>\n                <td>Start Time</td>\n                <td>End Time</td>\n                <td>Capacity</td>\n                <td>Action</td>\n              </tr>\n              <tr>\n                <td> <input type=\"date\" v-model=\"newts.date\"> </td>\n                <td> <input type=\"time\" v-model=\"newts.start_time\"> </td>\n                <td> <input type=\"time\" v-model=\"newts.end_time\"> </td>\n                <td> <input type=\"number\" v-model=\"newts.capacity\"> </td>\n                <td><span @click=\"this.create_time_slot\" class=\"btn btn-success\">Create</span></td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, integer } from '@vuelidate/validators';\nexport default {\n  name: 'ServiceEdit',\n    setup () { return { v$: useVuelidate() } },\n    data () {\n    return {\n      services: {\n        service_category: '',\n        name: '',\n        price: '',\n        description: '',\n        service_categories: [],\n      },\n      id: '',\n      image: '',\n      time_slot: [],\n      time_slot_one: [],\n      showTime: false,\n      edit_time: false,\n      delete_time: false,\n      time_slot_old: {\n        start_time: '',\n        end_time: '',\n        date: '',\n        capacity: ''\n      },\n      time_slot_create: true,\n      createTimeSlot: false,\n      newts: {\n        start_time: '',\n        end_time: '',\n        date: '',\n        capacity: ''\n      },\n      show_old_image: true,\n    }\n  },\n  validations () {\n    return {\n      services: {\n        name: { required },\n        service_category: { required  },\n        price: {required, integer },\n        description: {required},\n        service_categories: {required},\n      }\n    }\n  },\n  props: {\n    id: Number, // Define the 'id' prop with the expected data type\n  },\n  methods: {\n    upload(){\n        console.log('upload')\n        var myWidget = window.cloudinary.createUploadWidget({\n            cloudName: 'dovxq5gn9', \n            processQueue: false,\n            uploadPreset: 'uhjevesg'}, (error, result) => {\n                if (!error && result && result.event === \"success\") { \n                console.log('Done! Here is the image info: ', result.info); \n                    const imageUrl = result.info.secure_url;\n                    this.services.image = imageUrl;\n                    this.displayImage(imageUrl);\n                }\n            }\n        )\n        document.getElementById(\"upload_widget\").addEventListener(\"click\", function(){\n            myWidget.open();\n        }, false);  \n    }, \n    // Function to display the uploaded image\n    displayImage(imageUrl) {\n        this.show_old_image = false;\n        const imagePreviewDiv = document.getElementById('image-preview');\n        const image = document.createElement('img');\n        image.src = imageUrl;\n        image.classList.add('uploaded-image'); // Add CSS class for styling\n        imagePreviewDiv.innerHTML = ''; // Clear any existing content\n        imagePreviewDiv.appendChild(image);\n    },\n    new_time_slot(){\n      this.createTimeSlot = true\n    },\n    async create_time_slot(){\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/TimeSlotCreate.gql'),\n        variables: {\n          \"serviceId\": this.id,\n          \"date\": this.newts.date,\n          \"startTime\": this.newts.start_time,\n          \"endTime\": this.newts.end_time,\n          \"capacity\": this.newts.capacity,\n        },\n      });\n      this.createTimeSlot = false\n      if (response) {\n        alert('NEW TIMESLOT HAS BEEN ADDED')\n        this.reloadPage()\n      }\n      this.show_time_slot_by_service(this.id)\n    },\n    async edit_time_save() {\n      console.log('the id of specific timeslot is now',this.time_slot_one.id)\n      console.log(\"'it is a type of', t\")\n      console.log(typeof this.time_slot_one.id)\n      const parseid = parseInt(this.time_slot_one.id)\n      this.showTime = false;\n      this.edit_time = false;\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/TimeSlotUpdate.gql'),\n          variables: {\n            \"id\": parseid,\n            \"serviceId\": this.id,\n            \"date\": this.time_slot_one.date,\n            \"startTime\": this.time_slot_one.startTime,\n            \"endTime\": this.time_slot_one.endTime,\n            \"capacity\": parseInt(this.time_slot_one.capacity),\n          },\n        });\n        console.log(response)\n        this.time_slot_one = null;\n      } catch (error) { console.error(\"Graphql Error:\", error); }\n    },\n    async delete_time_save(){\n      console.log('the object of time slot to delete is',this.time_slot_one.id)\n      console.log('the type of id is')\n      console.log(typeof parseInt(this.time_slot_one.id))\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/TimeSlotDelete.gql'),\n          variables: {\n            \"id\": parseInt(this.time_slot_one.id),\n          },\n        });\n        if (response) {\n          alert('TIMESLOT HAS BEEN DELETED.')\n          this.reloadPage();\n        }\n        console.log(response)\n        this.time_slot_one = null;\n      } catch (error) { console.error(\"Graphql Error:\", error); }\n      this.showTime = false;\n      this.delete_time = false;\n      this.time_slot_one = null;\n    },\n    popupTime(){ this.showTime = true; },\n    closeTime(){ this.edit_time = true; },\n    async edit_time_slot(item) {\n      console.log('edit_time_slot_id is now',parseInt(item.id))\n      await this.show_time_slot_one(parseInt(item.id))\n      this.edit_time = true;\n      this.showTime = true;\n    },\n    async delete_time_slot(item) {\n      console.log('delete_time_slot_id is ',parseInt(item.id))\n      await this.show_time_slot_one(parseInt(item.id))\n      this.delete_time = true;\n      this.showTime = true;\n    },\n    async submitForm() {\n      this.v$.$touch();\n      if (!this.v$.$error) {\n        this.services.service_category = parseInt(this.services.service_category);\n        this.services.price = parseInt(this.services.price);\n        console.log(this.services)\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceUpdate.gql'),\n          variables: {\n            id: this.services.id,\n            serviceCategoryId: this.services.service_category,\n            name: this.services.name,\n            description: this.services.description,\n            price: this.services.price,\n            image: this.services.image\n          },\n        });\n        console.log('response after update', response)\n        console.log(response.data.updateService.errors.length)\n        if (response.data.updateService.errors.length < 1) {\n          alert ('YOUR PRODUCT HAS BEEN UPDATED')\n          // this.$router.push('/services');\n        }\n      }\n    },\n    async show_service(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/AdminServiceFind.gql'),\n        variables: { \"id\": new_id }\n      });\n      this.services.id = response.data.serviceAdmin[0].id;\n      this.services.name = response.data.serviceAdmin[0].name;\n      this.services.price = response.data.serviceAdmin[0].price;\n      this.services.image = response.data.serviceAdmin[0].image;\n      this.services.description = response.data.serviceAdmin[0].description;\n      this.services.service_categories = response.data.serviceAdmin[0].serviceCategories;\n      this.services.service_category = response.data.serviceAdmin[0].serviceCategoryId.name;\n    },\n    async show_time_slot() { },\n    async show_time_slot_one(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/TimeSlotOne.gql'),\n        variables: { \"id\": new_id }\n      });\n      this.time_slot_one = response.data.timeSlotOne\n      this.time_slot_old.capacity = response.data.timeSlotOne.capacity\n      this.time_slot_old.date = response.data.timeSlotOne.date\n      this.time_slot_old.end_time = response.data.timeSlotOne.endTime\n      this.time_slot_old.start_time = response.data.timeSlotOne.startTime\n    },\n    async show_time_slot_by_service(id) {\n      const new_id = parseInt(id);\n      const response = await this.$apollo.query({\n        query: require('@/graphql/TimeSlotByService.gql'),\n        variables: { \"id\": new_id }\n      });\n      this.time_slot = response.data.timeSlotByService\n      console.log('TS BY SERVICE',this.time_slot)\n    },\n    reloadPage() {\n      // Reload the current page\n      window.location.reload();\n    },\n    formattedStartTime(time) {\n      // Parse the start_time string into a Date object\n      const dateObj = new Date(time);\n\n      // Extract the hour, minute, and AM/PM parts\n      const hour = dateObj.getUTCHours();\n      const minute = dateObj.getUTCMinutes();\n      const ampm = hour >= 12 ? \"PM\" : \"AM\";\n\n      // Convert to 12-hour format and format the hour and minute as \"HH:MM AM/PM\"\n      const formattedHour = ((hour + 11) % 12 + 1).toString().padStart(2, '0');\n      return `${formattedHour}:${minute.toString().padStart(2, '0')} ${ampm}`;\n    }\n  },\n  mounted() {\n    this.time_slot\n    this.show_service(this.id);\n    this.show_time_slot(this.id);\n    this.show_time_slot_by_service(this.id);\n    this.upload();\n  }\n}\n</script>\n\n<style>\n.cloudinary-button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n.cloudinary-button:hover {\n    background-color: #0056b3;\n}\n/* Style the uploaded image */\n.uploaded-image {\n    max-width: 100%;\n    height: auto;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n.link_text {\n    display: inline-block;\n}\n.form-service-edit {\n  display: inline-block;\n}\n.edit-time {\n  margin-top: -390px;\n}\n.error, .error:focus {\n    border-color: red;\n    color: red;\n}\n.input-errors {\n    color: red;\n}\n.form-label {\n    position: relative;\n}\n.error-msg {\n    position: absolute;\n    font-size: 10px;\n    bottom: -13px;\n    left: 0px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}