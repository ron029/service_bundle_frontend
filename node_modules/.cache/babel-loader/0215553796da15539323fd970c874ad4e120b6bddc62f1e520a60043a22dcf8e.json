{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      services: {\n        service_categories: null\n      },\n      UpdateServiceCategory: true,\n      update: {\n        name: '',\n        description: '',\n        id: '',\n        image: ''\n      },\n      createNewServiceCategory: true,\n      updateNewServiceCategory: false,\n      update_category_index: 0,\n      delete_category_index: 0\n    };\n  },\n  props: ['serviceCategoryId'],\n  name: 'ServiceCategoryPage',\n  methods: {\n    upload() {\n      console.log('upload');\n      var myWidget = window.cloudinary.createUploadWidget({\n        cloudName: 'dovxq5gn9',\n        processQueue: false,\n        uploadPreset: 'uhjevesg'\n      }, (error, result) => {\n        if (!error && result && result.event === \"success\") {\n          console.log('Done! Here is the image info: ', result.info);\n          const imageUrl = result.info.secure_url;\n          this.update.image = imageUrl;\n          // this.displayImage(imageUrl);\n        }\n      });\n\n      document.getElementById(\"upload_widget\").addEventListener(\"click\", function () {\n        myWidget.open();\n      }, false);\n    },\n    // Function to display the uploaded image\n    // displayImage(imageUrl) {\n    //     this.show_old_image = false;\n    //     const imagePreviewDiv = document.getElementById('image-preview');\n    //     const image = document.createElement('img');\n    //     image.src = imageUrl;\n    //     image.classList.add('uploaded-image'); // Add CSS class for styling\n    //     imagePreviewDiv.innerHTML = ''; // Clear any existing content\n    //     imagePreviewDiv.appendChild(image);\n    // },\n    toggleUpdateServiceCategory() {\n      this.update.name = '';\n      this.update.description = '';\n      this.update.image = '';\n      this.update.id = '';\n      if (this.UpdateServiceCategory == false) this.UpdateServiceCategory = true;\n      this.createNewServiceCategory = true;\n      this.updateNewServiceCategory = false;\n    },\n    async create_service_category() {\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryCreate.gql'),\n          variables: {\n            name: this.update.name,\n            description: this.update.description,\n            image: this.update.image\n          }\n        });\n        let data = response.data.createServiceCategory.serviceCategory;\n        this.services.service_categories.push(data);\n        alert('New Product named \"' + data.name + '\" has been added.');\n        console.log('the details for new product is: ', response);\n      } catch (error) {\n        console.error('GraphQL Error:', error);\n      }\n    },\n    async show_categories() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/Category.gql')\n        });\n        this.services.service_categories = response.data.categories;\n      } catch (error) {\n        console.error('Error logging out:', error);\n      }\n    },\n    async update_service_category() {\n      console.log('id of file to edit', this.update.id);\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryUpdate.gql'),\n          variables: {\n            \"id\": parseInt(this.update.id),\n            \"name\": this.update.name,\n            \"description\": this.update.description,\n            \"image\": this.update.image\n          }\n        });\n        if (response) {\n          let edit = this.services.service_categories[this.update_category_index];\n          edit.name = this.update.name;\n          edit.description = this.update.description;\n          edit.image = this.update.image;\n          console.log('this is the thing that we need to edit: ', edit);\n          console.log('the new data is now: ', edit);\n          alert('YOUR SERVICE CATEGORY HAS BEEN UPDATE');\n          // this.reloadPage()\n        }\n      } catch (error) {\n        console.error(\"Graphql Error:\", error);\n      }\n    },\n    async show_category_one(item, index) {\n      console.log('modifying service category with index: ', index);\n      this.update_category_index = index;\n      this.createNewServiceCategory = false;\n      this.updateNewServiceCategory = true;\n      console.log('the category to edit is ', item.id);\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryFind.gql'),\n          variables: {\n            \"id\": parseInt(item.id)\n          }\n        });\n        this.update.name = response.data.serviceCategory[0].name;\n        this.update.description = response.data.serviceCategory[0].description;\n        this.update.id = response.data.serviceCategory[0].id;\n        this.UpdateServiceCategory = true;\n        this.update.image = response.data.serviceCategory[0].image;\n        console.log('File to edit', this.update);\n      } catch (error) {\n        console.error(\"Graphql Error:\", error);\n      }\n    },\n    async delete_category(item, index) {\n      const userConfirmed = window.confirm(\"Do you want to delete \" + item.name + \" category?\");\n      if (userConfirmed) {\n        console.log('deleting service category with index: ', index);\n        this.delete_category_index = index;\n        try {\n          const response = await this.$apollo.mutate({\n            mutation: require('@/graphql/ServiceCategoryDelete.gql'),\n            variables: {\n              \"id\": parseInt(item.id)\n            }\n          });\n          console.log(response);\n          alert('DELETION COMPLETE!');\n          this.services.splice(this.delete_category_index, 1);\n          console.log('the item to delete is ');\n          console.log(this.services[this.delete_category_index]);\n          console.log('File to edit', this.update);\n        } catch (error) {\n          console.error(\"Graphql Error:\", error);\n        }\n      }\n    }\n  },\n  components: {},\n  mounted() {\n    this.show_categories();\n    this.upload();\n  }\n};","map":{"version":3,"names":["data","services","service_categories","UpdateServiceCategory","update","name","description","id","image","createNewServiceCategory","updateNewServiceCategory","update_category_index","delete_category_index","props","methods","upload","console","log","myWidget","window","cloudinary","createUploadWidget","cloudName","processQueue","uploadPreset","error","result","event","info","imageUrl","secure_url","document","getElementById","addEventListener","open","toggleUpdateServiceCategory","create_service_category","response","$apollo","mutate","mutation","require","variables","createServiceCategory","serviceCategory","push","alert","show_categories","query","categories","update_service_category","parseInt","edit","show_category_one","item","index","delete_category","userConfirmed","confirm","splice","components","mounted"],"sources":["src/views/ServiceCategoryPage.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h2>Service Category</h2>\n    <div class=\"\">\n      <span @click=\"toggleUpdateServiceCategory\" class=\"btn btn-primary\">New Service Category</span>\n      <div v-if=\"UpdateServiceCategory\" class=\"card\">\n        <div class=\"card-body\">\n          <table class=\"table\">\n            <thead>\n              <tr>\n                <td>Name</td>\n                <td>Description</td>\n                <td>Image</td>\n                <td>Action</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td> \n                  <input v-model=\"update.name\"> \n                </td>\n                <td>\n                  <input v-model=\"update.description\"> \n                </td>\n                <td><button id=\"upload_widget\" @click.prevent=\"\" class=\"cloudinary-button\">Upload files</button></td>\n                <td>\n                  <span @click=\"this.create_service_category\" v-if=\"createNewServiceCategory\" class=\"btn btn-success\">CREATE</span>\n                  <span @click=\"this.update_service_category\" v-if=\"updateNewServiceCategory\" class=\"btn btn-warning\">SUBMIT</span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Image</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item, index) in this.services.service_categories\" :key=\"item.id\">\n          <td>{{ item.name }}</td>\n          <td>{{ item.description }}</td>\n          <td><img :src=\"item.image\" style=\"width: 200px; height: 150px;\"></td>\n          <td>\n            <span @click=\"show_category_one(item, index)\" class=\"btn btn-warning\">edit</span><br>\n            <span @click=\"delete_category(item, index)\" class=\"btn btn-danger\">delete</span>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n      return {\n        services: {\n          service_categories: null\n        },\n        UpdateServiceCategory: true,\n        update: {\n          name: '',\n          description: '',\n          id: '',\n          image: ''\n        },\n        createNewServiceCategory: true,\n        updateNewServiceCategory: false,\n        update_category_index: 0,\n        delete_category_index: 0\n      }\n  },\n  props: ['serviceCategoryId'],\n  name: 'ServiceCategoryPage',\n  methods: {\n    upload(){\n        console.log('upload')\n        var myWidget = window.cloudinary.createUploadWidget({\n            cloudName: 'dovxq5gn9', \n            processQueue: false,\n            uploadPreset: 'uhjevesg'}, (error, result) => {\n                if (!error && result && result.event === \"success\") {\n                console.log('Done! Here is the image info: ', result.info); \n                    const imageUrl = result.info.secure_url;\n                    this.update.image = imageUrl;\n                    // this.displayImage(imageUrl);\n                }\n            }\n        )\n        document.getElementById(\"upload_widget\").addEventListener(\"click\", function(){\n            myWidget.open();\n        }, false);  \n    },\n    // Function to display the uploaded image\n    // displayImage(imageUrl) {\n    //     this.show_old_image = false;\n    //     const imagePreviewDiv = document.getElementById('image-preview');\n    //     const image = document.createElement('img');\n    //     image.src = imageUrl;\n    //     image.classList.add('uploaded-image'); // Add CSS class for styling\n    //     imagePreviewDiv.innerHTML = ''; // Clear any existing content\n    //     imagePreviewDiv.appendChild(image);\n    // },\n    toggleUpdateServiceCategory(){\n      this.update.name = '';\n      this.update.description = '';\n      this.update.image = '';\n      this.update.id = '';\n      if (this.UpdateServiceCategory == false) this.UpdateServiceCategory = true;\n\n      this.createNewServiceCategory = true;\n      this.updateNewServiceCategory = false;\n    },\n    async create_service_category() {\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryCreate.gql'),\n          variables: {\n            name: this.update.name,\n            description: this.update.description,\n            image: this.update.image\n          },\n        });\n        let data = response.data.createServiceCategory.serviceCategory;\n        this.services.service_categories.push(data);\n        alert('New Product named \"' + data.name + '\" has been added.');\n        console.log('the details for new product is: ', response);\n      } catch (error) {\n        console.error('GraphQL Error:', error);\n      }\n    },\n    async show_categories() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/Category.gql'),\n        });\n        this.services.service_categories = response.data.categories;\n      } catch (error) {\n        console.error('Error logging out:', error);\n      }\n    },\n    async update_service_category() {\n      console.log('id of file to edit', this.update.id);\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryUpdate.gql'),\n          variables: {\n            \"id\": parseInt(this.update.id),\n            \"name\": this.update.name,\n            \"description\": this.update.description,\n            \"image\": this.update.image\n          },\n        });\n        if (response) {\n          let edit = this.services.service_categories[this.update_category_index];\n          edit.name = this.update.name;\n          edit.description = this.update.description;\n          edit.image = this.update.image;\n          console.log('this is the thing that we need to edit: ', edit);\n          console.log('the new data is now: ', edit)\n          alert('YOUR SERVICE CATEGORY HAS BEEN UPDATE');\n          // this.reloadPage()\n        }\n      } catch (error) { console.error(\"Graphql Error:\", error); }\n    },\n    async show_category_one(item, index) {\n      console.log('modifying service category with index: ', index)\n      this.update_category_index = index;\n      this.createNewServiceCategory = false;\n      this.updateNewServiceCategory = true;\n      console.log('the category to edit is ',item.id)\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCategoryFind.gql'),\n          variables: {\n            \"id\": parseInt(item.id)\n          },\n        });\n        this.update.name = response.data.serviceCategory[0].name;\n        this.update.description = response.data.serviceCategory[0].description\n        this.update.id = response.data.serviceCategory[0].id\n        this.UpdateServiceCategory = true;\n        this.update.image = response.data.serviceCategory[0].image\n        console.log('File to edit', this.update)\n      } catch (error) { console.error(\"Graphql Error:\", error); }\n    },\n    async delete_category(item, index){\n      const userConfirmed = window.confirm(\"Do you want to delete \" + item.name + \" category?\");\n      if (userConfirmed) {\n        console.log('deleting service category with index: ', index);\n        this.delete_category_index = index;\n        try {\n          const response = await this.$apollo.mutate({\n            mutation: require('@/graphql/ServiceCategoryDelete.gql'),\n            variables: {\n              \"id\": parseInt(item.id)\n            },\n          });\n          console.log(response)\n          alert('DELETION COMPLETE!')\n          this.services.splice(this.delete_category_index, 1);\n          console.log('the item to delete is ');\n          console.log(this.services[this.delete_category_index])\n          console.log('File to edit', this.update)\n        } catch (error) { console.error(\"Graphql Error:\", error); }\n      }\n    },\n  },\n  components: {\n\n  },\n  mounted(){\n    this.show_categories();\n    this.upload()\n  }\n}\n</script>\n\n<style>\n.cloudinary-button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n.cloudinary-button:hover {\n    background-color: #0056b3;\n}\n/* Style the uploaded image */\n.uploaded-image {\n    max-width: 100%;\n    height: auto;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n.link_text {\n    display: inline-block;\n}\n.edit-time {\n  margin-top: -100px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}