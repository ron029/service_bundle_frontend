{"ast":null,"code":"export default {\n  name: 'ServiceList',\n  data() {\n    return {\n      showPage: 'ServicePage',\n      // Initialize showPage to ServicePage\n      newServiceData: {},\n      services: []\n    };\n  },\n  props: {\n    new_service: {\n      type: Object,\n      validator: function (value) {\n        console.log('this is from appnavbar to service page, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      }\n    }\n  },\n  methods: {\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/AdminService.gql')\n        });\n        this.services;\n        console.log(response);\n      } catch (error) {}\n    },\n    showEditService(id) {\n      console.log('the service id to edit is: ', id);\n      this.$emit('showEditService', id);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    }\n  },\n\n  components: {},\n  mounted() {\n    this.get_services();\n    // Assign the prop value to the data property\n    if (this.new_service) this.newServiceData = this.new_service;\n    console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n  }\n};","map":{"version":3,"names":["name","data","showPage","newServiceData","services","props","new_service","type","Object","validator","value","console","log","methods","get_services","response","$apollo","query","require","error","showEditService","id","$emit","showServiceNew","components","mounted"],"sources":["src/components/ServiceList.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Services</h2>\n    <button @click=\"showServiceNew\">Show ServiceNew</button>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>Category Name</th>\n            <th>Description</th>\n            <th>Time Slots</th>\n            <th>Image</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody v-if=\"data && data.serviceAdmin\">\n          <tr v-for=\"item in data.serviceAdmin\" :key=\"item.id\">\n            <td>{{ item.serviceCategoryId.name }}</td>\n            <td>{{ item.description }}</td>\n            <td>\n              <table>\n                <tr>\n                  <th>date</th>\n                  <th>start time</th>\n                  <th>end time</th>\n                </tr>\n                <tr v-for=\"time in item.timeSlot\" :key=\"time.id\">\n                  <td>{{ time.date }}</td>\n                  <td>{{ time.startTime }}</td>\n                  <td>{{ time.endTime }}</td>\n                </tr>\n              </table>\n            </td>\n            <td><img :src=\"item.image\" :alt=item.category_name style=\"width: 200px; height: 150px;\"></td>\n            <td>\n              <span class=\"btn btn-warning\" @click=\"showEditService(item.id)\">Edit</span>\n              <!-- <router-link :to=\"{ path: '/services/' + item.id + '/edit' }\" class=\"btn btn-warning\"> Edit </router-link> -->\n            </td>\n          </tr>\n        </tbody>\n      </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ServiceList',\n  data(){\n    return {\n      showPage: 'ServicePage', // Initialize showPage to ServicePage\n      newServiceData: {},\n      services: [],\n    };\n  },\n  props: {\n    new_service: {\n      type: Object,\n      validator: function(value) {\n        console.log('this is from appnavbar to service page, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n  },\n  methods: {\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/AdminService.gql'),\n        });\n        this.services\n        console.log(response);\n      } catch (error) {\n        \n      }\n    },\n    showEditService(id) {\n      console.log('the service id to edit is: ', id)\n      this.$emit('showEditService', id);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    },\n  },\n  components: { },\n  mounted(){\n    this.get_services()\n    // Assign the prop value to the data property\n    if (this.new_service) this.newServiceData = this.new_service;\n    console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n  }\n}\n</script>\n\n<style>\n.error, .error:focus, .error input[type=\"radio\"] {\n    border-color: red;\n    color: red;\n}\n.input-errors {\n    color: red;\n}\n.err-card {\n    position: relative;\n}\n.error-msg {\n    position: absolute;\n    font-size: 10px;\n    bottom: -8px;\n    left: 17px;\n}\n</style>"],"mappings":"AA4CA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MAAA;MACAC,cAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACAC,WAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,SAAA,WAAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,iEAAAF,KAAA;QACA;QACA;MACA;IACA;EACA;EACAG,OAAA;IACA,MAAAC,aAAA;MACA;QACA,MAAAC,QAAA,cAAAC,OAAA,CAAAC,KAAA;UACAA,KAAA,EAAAC,OAAA;QACA;QACA,KAAAd,QAAA;QACAO,OAAA,CAAAC,GAAA,CAAAG,QAAA;MACA,SAAAI,KAAA,GAEA;IACA;IACAC,gBAAAC,EAAA;MACAV,OAAA,CAAAC,GAAA,gCAAAS,EAAA;MACA,KAAAC,KAAA,oBAAAD,EAAA;IACA;IACAE,eAAA;MACA,KAAAD,KAAA;IACA;EACA;;EACAE,UAAA;EACAC,QAAA;IACA,KAAAX,YAAA;IACA;IACA,SAAAR,WAAA,OAAAH,cAAA,QAAAG,WAAA;IACAK,OAAA,CAAAC,GAAA,wEAAAT,cAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}