{"ast":null,"code":"// import ServiceListManager from '@/components/ServiceListManager.vue';\nimport ServiceListCustomer from '@/components/ServiceListCustomer.vue';\nimport ServiceList from '@/components/ServiceList.vue';\nexport default {\n  name: 'ServicePage',\n  data() {\n    return {\n      userRole: '',\n      service_category_id: '',\n      newServiceData: {}\n    };\n  },\n  created() {\n    // Assign the prop value to the data property\n    if (this.new_service_data) this.newServiceData = this.new_service_data;\n  },\n  components: {\n    ServiceList,\n    ServiceListCustomer\n    // ServiceListManager\n  },\n\n  mounted() {\n    this.userRole = this.get_role();\n    this.validate_new_service(this.new_service_data);\n  },\n  props: {\n    new_service_data: {\n      type: Object,\n      validator: function (value) {\n        console.log('this is from appnavbar to service page, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      }\n    }\n  },\n  methods: {\n    showEditPage(id) {\n      console.log('the params are: ', id[0], id[1]);\n      this.$emit('showEditPage', id);\n      console.log('this is service page, the service id to edit is: ', id);\n    },\n    showServiceNewPage() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    },\n\n    get_role() {\n      const userRole = localStorage.getItem('userRole');\n      return userRole;\n    },\n    validate_new_service(data) {\n      if (data) {\n        console.log('the newly service that added is: ', data);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ServiceListCustomer","ServiceList","name","data","userRole","service_category_id","newServiceData","created","new_service_data","components","mounted","get_role","validate_new_service","props","type","Object","validator","value","console","log","methods","showEditPage","id","$emit","showServiceNewPage","localStorage","getItem"],"sources":["src/views/ServicePage.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div v-if=\"userRole === 'admin'\">\n      <ServiceList  \n      v-on:showServiceNew=\"showServiceNewPage()\" \n      v-on:showEditService=\"showEditPage($event)\"\n      :new_service=\"newServiceData\"\n      />\n    </div>\n    <div v-if=\"userRole === 'customer'\">\n      <ServiceListCustomer />\n    </div>\n    <div v-if=\"userRole === 'manager'\">\n      <ServiceList />\n    </div>\n  </div>\n</template>\n\n<script>\n// import ServiceListManager from '@/components/ServiceListManager.vue';\nimport ServiceListCustomer from '@/components/ServiceListCustomer.vue';\nimport ServiceList from '@/components/ServiceList.vue';\nexport default {\n  name: 'ServicePage',\n  data() {\n    return {\n      userRole: '',\n      service_category_id: '',\n      newServiceData: {}\n    };\n  },\n  created() {\n    // Assign the prop value to the data property\n    if (this.new_service_data)this.newServiceData = this.new_service_data;\n  },\n  components: {\n    ServiceList,\n    ServiceListCustomer,\n    // ServiceListManager\n  },\n  mounted() {\n    this.userRole = this.get_role();\n    this.validate_new_service(this.new_service_data);\n  },\n  props: {\n    new_service_data: {\n      type: Object,\n      validator: function(value) {\n        console.log('this is from appnavbar to service page, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n  },\n  methods: {\n    showEditPage(id) {\n      console.log('the params are: ', id[0], id[1])\n      this.$emit('showEditPage', id);\n      console.log('this is service page, the service id to edit is: ', id);\n    },\n    showServiceNewPage() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    },\n    get_role() {\n      const userRole = localStorage.getItem('userRole');\n      return userRole;\n    },\n    validate_new_service(data){\n      if (data) {\n        console.log('the newly service that added is: ', data);\n      }\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":"AAmBA;AACA,OAAAA,mBAAA;AACA,OAAAC,WAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,mBAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,SAAAC,gBAAA,OAAAF,cAAA,QAAAE,gBAAA;EACA;EACAC,UAAA;IACAR,WAAA;IACAD;IACA;EACA;;EACAU,QAAA;IACA,KAAAN,QAAA,QAAAO,QAAA;IACA,KAAAC,oBAAA,MAAAJ,gBAAA;EACA;EACAK,KAAA;IACAL,gBAAA;MACAM,IAAA,EAAAC,MAAA;MACAC,SAAA,WAAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,iEAAAF,KAAA;QACA;QACA;MACA;IACA;EACA;EACAG,OAAA;IACAC,aAAAC,EAAA;MACAJ,OAAA,CAAAC,GAAA,qBAAAG,EAAA,KAAAA,EAAA;MACA,KAAAC,KAAA,iBAAAD,EAAA;MACAJ,OAAA,CAAAC,GAAA,sDAAAG,EAAA;IACA;IACAE,mBAAA;MACA,KAAAD,KAAA;IACA;;IACAZ,SAAA;MACA,MAAAP,QAAA,GAAAqB,YAAA,CAAAC,OAAA;MACA,OAAAtB,QAAA;IACA;IACAQ,qBAAAT,IAAA;MACA,IAAAA,IAAA;QACAe,OAAA,CAAAC,GAAA,sCAAAhB,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}