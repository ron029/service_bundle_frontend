{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Datepicker from 'vuejs-datepicker';\nexport default {\n  name: 'ServiceListCustomer',\n  data() {\n    return {\n      service_by_category: []\n    };\n  },\n  components: {\n    Datepicker\n  },\n  methods: {\n    generate_service_link(service_id) {\n      return `/service_categories/${this.$route.params.categoryId}/services/${service_id}`;\n    },\n    formatToPHP(number) {\n      // Convert the number to a string with two decimal places\n      const formattedNumber = Number(number).toFixed(2);\n\n      // Add \"PHP \" to the formatted number and use commas as a thousands separator\n      const result = `PHP ${formattedNumber.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ', ')}`;\n      return result;\n    },\n    timestampTodate(timestamp) {\n      const date = new Date(timestamp);\n\n      // Extract the components (month, day, year)\n      const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Add 1 because months are zero-indexed\n      const day = date.getDate().toString().padStart(2, '0');\n      const year = date.getFullYear();\n\n      // Format the date as MM-DD-YYYY\n      return `${year}-${month}-${day}`;\n    },\n    findDateRangeIndex(dateRanges, targetDate) {\n      for (let i = 0; i < dateRanges.length; i++) {\n        const {\n          startDate,\n          endDate\n        } = dateRanges[i];\n        const date = new Date(targetDate);\n        if (date >= new Date(startDate) && date <= new Date(endDate)) {\n          return i; // Return the index if the date is within the range\n        }\n      }\n\n      return -1; // Return -1 if the date is not found in any range\n    },\n\n    format_date(params, item) {\n      if (params.isDisabled == false) {\n        console.log('item var: ', item.timeSlot, params);\n        console.log('the time is: ', this.timestampTodate(params.timestamp));\n        let range = item.timeSlot[this.findDateRangeIndex(item.timeSlot, this.timestampTodate(params.timestamp))];\n        console.log('timeslot info is: ', range);\n        return `<span class=\"date_num\" onclick=\"window.location.href='/service_categories/${this.$route.params.categoryId}/services/${item.id}/time_slots/${range.id}'\">${params.date}</span>`;\n      } else {\n        return params.date;\n      }\n    },\n    getDisabledDates(dates) {\n      let enabledDates = [];\n      for (const date of dates) {\n        const from = this.formatDate(date.startDate);\n        const to = this.formatDate(date.endDate);\n\n        // Create an array of dates between 'from' and 'to'\n        const currentDate = new Date(from);\n        while (currentDate <= new Date(to)) {\n          enabledDates.push(currentDate.toISOString().split('T')[0]);\n          currentDate.setDate(currentDate.getDate() + 1);\n        }\n      }\n      return {\n        customPredictor: date => {\n          const formattedDate = `${date.toISOString().split('T')[0]}`;\n          return !enabledDates.includes(formattedDate);\n        }\n      };\n    },\n    formatDate(dateToParse) {\n      const dateComponents = dateToParse.split('-');\n      const year = parseInt(dateComponents[0]);\n      const month = parseInt(dateComponents[1]) - 1;\n      const day = parseInt(dateComponents[2]);\n      const jsDate = new Date(year, month, day + 1);\n      return jsDate;\n    },\n    async get_service_by_category() {\n      console.log('service category id is now', this.serviceCategoryId);\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/ServiceByCategory.gql'),\n          variables: {\n            id: parseInt(this.$route.params.categoryId)\n          }\n        });\n        this.service_by_category = response.data.serviceByCategory;\n        console.log(this.service_by_category);\n      } catch (error) {\n        console.error('Error creating like:', error);\n      }\n    },\n    getServiceCategoryURL(item, ite) {\n      return `/service_categories/${this.$route.params.categoryId}/services/${item.id}/time_slots/${ite.id}`;\n    }\n  },\n  mounted() {\n    this.get_service_by_category();\n  }\n};","map":{"version":3,"names":["Datepicker","name","data","service_by_category","components","methods","generate_service_link","service_id","$route","params","categoryId","formatToPHP","number","formattedNumber","Number","toFixed","result","replace","timestampTodate","timestamp","date","Date","month","getMonth","toString","padStart","day","getDate","year","getFullYear","findDateRangeIndex","dateRanges","targetDate","i","length","startDate","endDate","format_date","item","isDisabled","console","log","timeSlot","range","id","getDisabledDates","dates","enabledDates","from","formatDate","to","currentDate","push","toISOString","split","setDate","customPredictor","formattedDate","includes","dateToParse","dateComponents","parseInt","jsDate","get_service_by_category","serviceCategoryId","response","$apollo","query","require","variables","serviceByCategory","error","getServiceCategoryURL","ite","mounted"],"sources":["src/components/ServiceListCustomer.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>Services</h1>\n    <div class=\"row\">\n      <div v-for=\"(item, index) in service_by_category\" :key=\"index\" class=\"col-md-4 mb-3\">\n        <div class=\"card\">\n          <div class=\"card-body service_item\">\n            <a class=\"service_link\" :href=\"generate_service_link(item.id)\">\n              <h5>{{ item.name }}</h5>\n              <img class=\"service_image\" :src=\"item.image\" width=\"250px\" height=\"250px\">\n              <p class=\"service_details\">{{ item.description }}</p>\n              <p class=\"service_details\">{{ formatToPHP(item.price) }}</p>\n            </a>\n            <table class=\"table service_details\">\n              <thead>\n                <tr>\n                  <th>Schedule</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <div class=\"time\">\n                    <datepicker\n                    :disabled-dates=\"getDisabledDates(item.timeSlot)\"\n                    :day-cell-content=\"params => format_date(params, item)\"\n                    :inline=\"true\">\n                    </datepicker>\n                  </div>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Datepicker from 'vuejs-datepicker';\nexport default {\n  name: 'ServiceListCustomer',\n  data() {\n    return {\n      service_by_category: [],\n    }\n  },\n  components: { Datepicker, },\n  methods: { \n    generate_service_link(service_id) {\n      return `/service_categories/${this.$route.params.categoryId}/services/${service_id}`;\n    },\n    formatToPHP(number) {\n      // Convert the number to a string with two decimal places\n      const formattedNumber = Number(number).toFixed(2);\n\n      // Add \"PHP \" to the formatted number and use commas as a thousands separator\n      const result = `PHP ${formattedNumber.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ', ')}`;\n\n      return result;\n    },\n    timestampTodate(timestamp) {\n      const date = new Date(timestamp);\n\n      // Extract the components (month, day, year)\n      const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Add 1 because months are zero-indexed\n      const day = date.getDate().toString().padStart(2, '0');\n      const year = date.getFullYear();\n\n      // Format the date as MM-DD-YYYY\n      return `${year}-${month}-${day}`;\n    },\n    findDateRangeIndex(dateRanges, targetDate) {\n      for (let i = 0; i < dateRanges.length; i++) {\n        const { startDate, endDate } = dateRanges[i];\n        const date = new Date(targetDate);\n\n        if (date >= new Date(startDate) && date <= new Date(endDate)) {\n          return i; // Return the index if the date is within the range\n        }\n      }\n      return -1; // Return -1 if the date is not found in any range\n    },\n    format_date(params, item) {\n      if (params.isDisabled == false) {\n        console.log('item var: ', item.timeSlot, params)\n        console.log('the time is: ', this.timestampTodate(params.timestamp));\n        let range = item.timeSlot[this.findDateRangeIndex(item.timeSlot, this.timestampTodate(params.timestamp))];\n        console.log('timeslot info is: ', range);\n        return `<span class=\"date_num\" onclick=\"window.location.href='/service_categories/${this.$route.params.categoryId}/services/${item.id}/time_slots/${range.id}'\">${params.date}</span>`;\n      } else {\n        return params.date\n      }\n    },\n    getDisabledDates(dates) {\n      let enabledDates = [];\n\n      for (const date of dates) {\n        const from = this.formatDate(date.startDate);\n        const to = this.formatDate(date.endDate);\n\n        // Create an array of dates between 'from' and 'to'\n        const currentDate = new Date(from);\n        while (currentDate <= new Date(to)) {\n          enabledDates.push(currentDate.toISOString().split('T')[0]);\n          currentDate.setDate(currentDate.getDate() + 1);\n        }\n      }\n\n      return {\n        customPredictor: date => {\n          const formattedDate = `${date.toISOString().split('T')[0]}`;\n          return !enabledDates.includes(formattedDate);\n        },\n      };\n    },\n    formatDate(dateToParse) {\n      const dateComponents = dateToParse.split('-');\n      const year = parseInt(dateComponents[0]);\n      const month = parseInt(dateComponents[1]) - 1;\n      const day = parseInt(dateComponents[2]);\n      const jsDate = new Date(year, month, day + 1);\n      return jsDate;\n    },\n    async get_service_by_category() {\n      console.log('service category id is now', this.serviceCategoryId)\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/ServiceByCategory.gql'),\n          variables: { id: parseInt(this.$route.params.categoryId)}\n        });\n        this.service_by_category = response.data.serviceByCategory;\n        console.log(this.service_by_category);\n      } catch (error) { \n          console.error('Error creating like:', error);\n      }\n    },\n    getServiceCategoryURL(item, ite) {\n      return `/service_categories/${this.$route.params.categoryId}/services/${item.id}/time_slots/${ite.id}`;\n    }    \n  },\n  mounted() {\n    this.get_service_by_category()\n  } \n}\n</script>\n\n<style>\n.date_link {\n  text-decoration: none;\n}\n\n.date_num {\n  /* background-color: red; */\n  padding: 6px;\n}\n\nh5 {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-weight: bolder;\n  position: relative;\n  margin-bottom: 200px;\n  z-index: 2;\n  background-color: rgba(255, 255, 255, 0.7);\n}\n\n.service_link{\n  text-decoration: none;\n  color: black;\n}\n\n.service_item {\n  position: relative;\n  z-index: 0;\n}\n\n.service_item p {\n  font-weight: bold;\n}\n\n.service_details {\n  position: relative;\n  z-index: 2;\n}\n\n.service_image {\n  top: 10px;\n  position: absolute;\n  left: 50%; /* Move the element halfway across the viewport horizontally */\n  transform: translateX(-50%); /* Center the element */\n  z-index: 1;\n}\n</style>\n"],"mappings":";AAuCA,OAAAA,UAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,mBAAA;IACA;EACA;EACAC,UAAA;IAAAJ;EAAA;EACAK,OAAA;IACAC,sBAAAC,UAAA;MACA,mCAAAC,MAAA,CAAAC,MAAA,CAAAC,UAAA,aAAAH,UAAA;IACA;IACAI,YAAAC,MAAA;MACA;MACA,MAAAC,eAAA,GAAAC,MAAA,CAAAF,MAAA,EAAAG,OAAA;;MAEA;MACA,MAAAC,MAAA,UAAAH,eAAA,CAAAI,OAAA;MAEA,OAAAD,MAAA;IACA;IACAE,gBAAAC,SAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,SAAA;;MAEA;MACA,MAAAG,KAAA,IAAAF,IAAA,CAAAG,QAAA,QAAAC,QAAA,GAAAC,QAAA;MACA,MAAAC,GAAA,GAAAN,IAAA,CAAAO,OAAA,GAAAH,QAAA,GAAAC,QAAA;MACA,MAAAG,IAAA,GAAAR,IAAA,CAAAS,WAAA;;MAEA;MACA,UAAAD,IAAA,IAAAN,KAAA,IAAAI,GAAA;IACA;IACAI,mBAAAC,UAAA,EAAAC,UAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAF,UAAA,CAAAG,MAAA,EAAAD,CAAA;QACA;UAAAE,SAAA;UAAAC;QAAA,IAAAL,UAAA,CAAAE,CAAA;QACA,MAAAb,IAAA,OAAAC,IAAA,CAAAW,UAAA;QAEA,IAAAZ,IAAA,QAAAC,IAAA,CAAAc,SAAA,KAAAf,IAAA,QAAAC,IAAA,CAAAe,OAAA;UACA,OAAAH,CAAA;QACA;MACA;;MACA;IACA;;IACAI,YAAA5B,MAAA,EAAA6B,IAAA;MACA,IAAA7B,MAAA,CAAA8B,UAAA;QACAC,OAAA,CAAAC,GAAA,eAAAH,IAAA,CAAAI,QAAA,EAAAjC,MAAA;QACA+B,OAAA,CAAAC,GAAA,uBAAAvB,eAAA,CAAAT,MAAA,CAAAU,SAAA;QACA,IAAAwB,KAAA,GAAAL,IAAA,CAAAI,QAAA,MAAAZ,kBAAA,CAAAQ,IAAA,CAAAI,QAAA,OAAAxB,eAAA,CAAAT,MAAA,CAAAU,SAAA;QACAqB,OAAA,CAAAC,GAAA,uBAAAE,KAAA;QACA,yFAAAnC,MAAA,CAAAC,MAAA,CAAAC,UAAA,aAAA4B,IAAA,CAAAM,EAAA,eAAAD,KAAA,CAAAC,EAAA,MAAAnC,MAAA,CAAAW,IAAA;MACA;QACA,OAAAX,MAAA,CAAAW,IAAA;MACA;IACA;IACAyB,iBAAAC,KAAA;MACA,IAAAC,YAAA;MAEA,WAAA3B,IAAA,IAAA0B,KAAA;QACA,MAAAE,IAAA,QAAAC,UAAA,CAAA7B,IAAA,CAAAe,SAAA;QACA,MAAAe,EAAA,QAAAD,UAAA,CAAA7B,IAAA,CAAAgB,OAAA;;QAEA;QACA,MAAAe,WAAA,OAAA9B,IAAA,CAAA2B,IAAA;QACA,OAAAG,WAAA,QAAA9B,IAAA,CAAA6B,EAAA;UACAH,YAAA,CAAAK,IAAA,CAAAD,WAAA,CAAAE,WAAA,GAAAC,KAAA;UACAH,WAAA,CAAAI,OAAA,CAAAJ,WAAA,CAAAxB,OAAA;QACA;MACA;MAEA;QACA6B,eAAA,EAAApC,IAAA;UACA,MAAAqC,aAAA,MAAArC,IAAA,CAAAiC,WAAA,GAAAC,KAAA;UACA,QAAAP,YAAA,CAAAW,QAAA,CAAAD,aAAA;QACA;MACA;IACA;IACAR,WAAAU,WAAA;MACA,MAAAC,cAAA,GAAAD,WAAA,CAAAL,KAAA;MACA,MAAA1B,IAAA,GAAAiC,QAAA,CAAAD,cAAA;MACA,MAAAtC,KAAA,GAAAuC,QAAA,CAAAD,cAAA;MACA,MAAAlC,GAAA,GAAAmC,QAAA,CAAAD,cAAA;MACA,MAAAE,MAAA,OAAAzC,IAAA,CAAAO,IAAA,EAAAN,KAAA,EAAAI,GAAA;MACA,OAAAoC,MAAA;IACA;IACA,MAAAC,wBAAA;MACAvB,OAAA,CAAAC,GAAA,oCAAAuB,iBAAA;MACA;QACA,MAAAC,QAAA,cAAAC,OAAA,CAAAC,KAAA;UACAA,KAAA,EAAAC,OAAA;UACAC,SAAA;YAAAzB,EAAA,EAAAiB,QAAA,MAAArD,MAAA,CAAAC,MAAA,CAAAC,UAAA;UAAA;QACA;QACA,KAAAP,mBAAA,GAAA8D,QAAA,CAAA/D,IAAA,CAAAoE,iBAAA;QACA9B,OAAA,CAAAC,GAAA,MAAAtC,mBAAA;MACA,SAAAoE,KAAA;QACA/B,OAAA,CAAA+B,KAAA,yBAAAA,KAAA;MACA;IACA;IACAC,sBAAAlC,IAAA,EAAAmC,GAAA;MACA,mCAAAjE,MAAA,CAAAC,MAAA,CAAAC,UAAA,aAAA4B,IAAA,CAAAM,EAAA,eAAA6B,GAAA,CAAA7B,EAAA;IACA;EACA;EACA8B,QAAA;IACA,KAAAX,uBAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}