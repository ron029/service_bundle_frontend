{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Datepicker from 'vuejs-datepicker';\nimport Timepicker from 'vue2-timepicker';\nexport default {\n  name: 'ServiceList',\n  data() {\n    return {\n      showPage: 'ServicePage',\n      // Initialize showPage to ServicePage\n      newServiceData: {},\n      updateServiceData: {},\n      services: [],\n      disabledDates: {},\n      selectedDate: null,\n      selectedStartTime: null,\n      selectedEndTime: null,\n      state: {\n        disabledDates: {\n          // to: new Date(2023, 0, 5), // Disable all dates up to specific date\n          // from: new Date(2023, 0, 26), // Disable all dates after specific date\n          // days: [6, 0], // Disable Saturday's and Sunday's\n          // daysOfMonth: [29, 30, 31], // Disable 29th, 30th and 31st of each month\n          // dates: [ // Disable an array of dates\n          //   new Date(2023, 9, 16),\n          //   new Date(2023, 9, 17),\n          //   new Date(2023, 9, 18)\n          // ],\n          // ranges: [{ // Disable dates in given ranges (exclusive).\n          //   from: new Date(2023, 8, 1),\n          //   to: new Date(2023, 8, 7)\n          // }, {\n          //   from: new Date(2023, 8, 12),\n          //   to: new Date(2023, 8, 21)\n          // }],\n          // a custom function that returns true if the date is disabled\n          // this can be used for wiring you own logic to disable a date if none\n          // of the above conditions serve your purpose\n          // this function should accept a date and return true if is disabled\n          customPredictor: this.disableDatesOutsideRange\n          // customPredictor: function(date) {\n          // disables the date if it is a multiple of 5\n          //   if(date.getDate() % 5 == 0){\n          //     return true\n          //   }\n          // }\n        }\n      }\n    };\n  },\n\n  components: {\n    Datepicker,\n    Timepicker\n  },\n  props: {\n    new_service: {\n      type: Object,\n      validator: function (value) {\n        if (value.id) console.log('this is from servicePage to serviceList, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      }\n    },\n    update_service: {\n      type: Object,\n      validator: function (value) {\n        if (value.service_details) console.log('this is from servicePage to serviceList, the update service is: ', value);\n        // Return true to disable type checking\n        return true;\n      }\n    }\n  },\n  created() {\n    this.populateDisabledDates();\n  },\n  methods: {\n    disableDatesOutsideRange(date) {\n      // Define an array of date ranges you want to enable\n      const dateRanges = [{\n        from: new Date(2023, 8, 1),\n        to: new Date(2023, 8, 7)\n      }, {\n        from: new Date(2023, 8, 12),\n        to: new Date(2023, 8, 21)\n      }\n      // Add more date ranges as needed\n      ];\n\n      // Check if the date falls within any of the defined ranges\n      for (const range of dateRanges) {\n        if (date >= range.from && date <= range.to) {\n          return false; // Enable dates within the range\n        }\n      }\n\n      // Disable all other dates\n      return true;\n    },\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/AdminService.gql')\n        });\n        this.services = response.data.serviceAdmin;\n        console.log(response);\n        if (this.newServiceData.id) {\n          this.merge_new_service_to_services(this.services);\n        }\n        if (this.updateServiceData.service_details) {\n          this.update_service_list(this.services);\n        }\n      } catch (error) {\n        console.log('Error from get_services: ', error);\n      }\n    },\n    update_service_list(service) {\n      let service_one = service[this.updateServiceData.index_to_edit];\n      console.log('servicelist: the edited service is: ', service_one);\n      service_one['image'] = this.updateServiceData.service_details.image;\n      service_one['name'] = this.updateServiceData.service_details.name;\n      service_one['price'] = this.updateServiceData.service_details.price;\n    },\n    merge_new_service_to_services(all_service) {\n      // const category = this.newServiceData.service_categories.find(\n      //   (category) => category.id === this.newServiceData.service_category\n      // );\n      let newservice = {\n        description: this.newServiceData.description,\n        id: this.newServiceData.id,\n        image: this.newServiceData.image,\n        name: this.newServiceData.name,\n        serviceCategoryId: {\n          id: this.newServiceData.service_category,\n          name: this.newServiceData.service_categories[0].name\n        },\n        timeSlot: []\n      };\n      all_service.push(newservice);\n    },\n    showEditService(params) {\n      console.log('serviceList: the service id to edit is: ', params['id']);\n      this.$emit('showEditService', params);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    }\n  },\n\n  mounted() {\n    this.get_services();\n    // Assign the prop value to the data property\n    if (this.new_service) {\n      this.newServiceData = this.new_service;\n      console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n    }\n    if (this.update_service.service_details) {\n      this.updateServiceData = this.update_service;\n      console.log('this is from servicepage to servicelist, update service data is: ', this.updateServiceData);\n    }\n  }\n};","map":{"version":3,"names":["Datepicker","Timepicker","name","data","showPage","newServiceData","updateServiceData","services","disabledDates","selectedDate","selectedStartTime","selectedEndTime","state","customPredictor","disableDatesOutsideRange","components","props","new_service","type","Object","validator","value","id","console","log","update_service","service_details","created","populateDisabledDates","methods","date","dateRanges","from","Date","to","range","get_services","response","$apollo","query","require","serviceAdmin","merge_new_service_to_services","update_service_list","error","service","service_one","index_to_edit","image","price","all_service","newservice","description","serviceCategoryId","service_category","service_categories","timeSlot","push","showEditService","params","$emit","showServiceNew","mounted"],"sources":["src/components/ServiceList.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Services</h2>\n    <button @click=\"showServiceNew\">Show ServiceNew</button>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>No.</th>\n            <th>Service Name</th>\n            <th>Category Name</th>\n            <th>Price</th>\n            <th>Description</th>\n            <th>Time Slots</th>\n            <th>Image</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item, index) in services\" :key=\"item.id\">\n            <td>{{ index + 1 }}</td>\n            <td>{{ item.name }}</td>\n            <td>{{ item.serviceCategoryId.name }}</td>\n            <td>PHP {{ item.price.toFixed(2) }}</td>\n            <td>{{ item.description }}</td>\n            <td>\n              <template>\n                <div>\n                  <datepicker v-model=\"selectedDate\" :disabled-dates=\"state.disabledDates\"></datepicker>\n                  <timepicker v-model=\"selectedStartTime\"></timepicker>\n                  <timepicker v-model=\"selectedEndTime\"></timepicker>\n                </div>\n              </template>\n              <!-- <table>\n                <tr>\n                  <th>date</th>\n                  <th>start time</th>\n                  <th>end time</th>\n                </tr>\n                <tr v-for=\"time in item.timeSlot\" :key=\"time.id\">\n                  <td>{{ time.date }}</td>\n                  <td>{{ time.startTime }}</td>\n                  <td>{{ time.endTime }}</td>\n                </tr>\n              </table> -->\n            </td>\n            <td><img :src=\"item.image\" :alt=item.category_name style=\"width: 200px; height: 150px;\"></td>\n            <td>\n              <span class=\"btn btn-warning\" @click=\"showEditService({id: item.id, index: index})\">Edit</span>\n              <!-- <router-link :to=\"{ path: '/services/' + item.id + '/edit' }\" class=\"btn btn-warning\"> Edit </router-link> -->\n            </td>\n          </tr>\n        </tbody>\n      </table>\n  </div>\n</template>\n\n<script>\nimport Datepicker from 'vuejs-datepicker';\nimport Timepicker from 'vue2-timepicker';\nexport default {\n  name: 'ServiceList',\n  data(){\n    return {\n      showPage: 'ServicePage', // Initialize showPage to ServicePage\n      newServiceData: {},\n      updateServiceData: {},\n      services: [],\n      disabledDates: {},\n      selectedDate: null,\n      selectedStartTime: null,\n      selectedEndTime: null,\n      state: {\n        disabledDates: {\n          // to: new Date(2023, 0, 5), // Disable all dates up to specific date\n          // from: new Date(2023, 0, 26), // Disable all dates after specific date\n          // days: [6, 0], // Disable Saturday's and Sunday's\n          // daysOfMonth: [29, 30, 31], // Disable 29th, 30th and 31st of each month\n          // dates: [ // Disable an array of dates\n          //   new Date(2023, 9, 16),\n          //   new Date(2023, 9, 17),\n          //   new Date(2023, 9, 18)\n          // ],\n          // ranges: [{ // Disable dates in given ranges (exclusive).\n          //   from: new Date(2023, 8, 1),\n          //   to: new Date(2023, 8, 7)\n          // }, {\n          //   from: new Date(2023, 8, 12),\n          //   to: new Date(2023, 8, 21)\n          // }],\n          // a custom function that returns true if the date is disabled\n          // this can be used for wiring you own logic to disable a date if none\n          // of the above conditions serve your purpose\n          // this function should accept a date and return true if is disabled\n          customPredictor: this.disableDatesOutsideRange,\n          // customPredictor: function(date) {\n            // disables the date if it is a multiple of 5\n          //   if(date.getDate() % 5 == 0){\n          //     return true\n          //   }\n          // }\n        }\n      }\n    };\n  },\n  components: {\n    Datepicker,\n    Timepicker,\n  },\n  props: {\n    new_service: {\n      type: Object,\n      validator: function(value) {\n        if (value.id) console.log('this is from servicePage to serviceList, the new service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n    update_service: {\n      type: Object,\n      validator: function(value) {\n        if (value.service_details) console.log('this is from servicePage to serviceList, the update service is: ', value);\n        // Return true to disable type checking\n        return true;\n      },\n    },\n  },\n  created() {\n    this.populateDisabledDates();\n  },\n  methods: {\n      disableDatesOutsideRange(date) {\n       // Define an array of date ranges you want to enable\n       const dateRanges = [\n        {\n          from: new Date(2023, 8, 1),\n          to: new Date(2023, 8, 7),\n        },\n        {\n          from: new Date(2023, 8, 12),\n          to: new Date(2023, 8, 21),\n        },\n        // Add more date ranges as needed\n      ];\n\n      // Check if the date falls within any of the defined ranges\n      for (const range of dateRanges) {\n        if (date >= range.from && date <= range.to) {\n          return false; // Enable dates within the range\n        }\n      }\n\n      // Disable all other dates\n      return true;\n    },\n    async get_services() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/AdminService.gql'),\n        });\n        this.services = response.data.serviceAdmin\n        console.log(response);\n\n        if (this.newServiceData.id) { this.merge_new_service_to_services(this.services) }\n        if (this.updateServiceData.service_details) { this.update_service_list(this.services) }\n      } catch (error) {\n        console.log('Error from get_services: ', error);\n      }\n    },\n    update_service_list(service) {\n      let service_one = service[this.updateServiceData.index_to_edit];\n      console.log('servicelist: the edited service is: ', service_one);\n      service_one['image'] = this.updateServiceData.service_details.image;\n      service_one['name'] = this.updateServiceData.service_details.name;\n      service_one['price'] = this.updateServiceData.service_details.price;\n    },\n    merge_new_service_to_services(all_service) {\n      // const category = this.newServiceData.service_categories.find(\n      //   (category) => category.id === this.newServiceData.service_category\n      // );\n      let newservice = {\n        description: this.newServiceData.description,\n        id: this.newServiceData.id,\n        image: this.newServiceData.image,\n        name: this.newServiceData.name,\n        serviceCategoryId: {\n          id: this.newServiceData.service_category,\n          name: this.newServiceData.service_categories[0].name\n        },\n        timeSlot: [],\n      }\n      all_service.push(newservice)\n    },\n    showEditService(params) {\n      console.log('serviceList: the service id to edit is: ', params['id'])\n      this.$emit('showEditService', params);\n    },\n    showServiceNew() {\n      this.$emit('showServiceNew'); // Emit a custom event\n    },\n  },\n  mounted(){\n    this.get_services();\n    // Assign the prop value to the data property\n    if (this.new_service) {\n      this.newServiceData = this.new_service;\n      console.log('this is from servicepage to servicelist, new service data is: ', this.newServiceData);\n    } \n    if (this.update_service.service_details) {\n      this.updateServiceData = this.update_service;\n      console.log('this is from servicepage to servicelist, update service data is: ', this.updateServiceData);\n    }\n  }\n}\n</script>\n\n<style>\n/* @import 'vuejs-datepicker/dist/vuejs-datepicker.css'; */\n@import 'vue2-timepicker/dist/VueTimepicker.css';\n.error, .error:focus, .error input[type=\"radio\"] {\n    border-color: red;\n    color: red;\n}\n.input-errors {\n    color: red;\n}\n.err-card {\n    position: relative;\n}\n.error-msg {\n    position: absolute;\n    font-size: 10px;\n    bottom: -8px;\n    left: 17px;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}