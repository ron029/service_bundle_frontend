{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Datepicker from 'vuejs-datepicker';\nexport default {\n  name: 'ServiceListCustomer',\n  data() {\n    return {\n      service_by_category: []\n    };\n  },\n  components: {\n    Datepicker\n  },\n  methods: {\n    format_date(date) {\n      if (date.date) {\n        return `<span onclick=\"alert()\">${date.date}</span>`;\n      } else {\n        return '0';\n      }\n    },\n    getDisabledDates(dates) {\n      let enabledDates = [];\n      for (const date of dates) {\n        const from = this.formatDate(date.startDate);\n        const to = this.formatDate(date.endDate);\n\n        // Create an array of dates between 'from' and 'to'\n        const currentDate = new Date(from);\n        while (currentDate <= new Date(to)) {\n          enabledDates.push(currentDate.toISOString().split('T')[0]);\n          currentDate.setDate(currentDate.getDate() + 1);\n        }\n      }\n      return {\n        customPredictor: date => {\n          const formattedDate = `${date.toISOString().split('T')[0]}`;\n          return !enabledDates.includes(formattedDate);\n        }\n      };\n    },\n    formatDate(dateToParse) {\n      const dateComponents = dateToParse.split('-');\n      const year = parseInt(dateComponents[0]);\n      const month = parseInt(dateComponents[1]) - 1;\n      const day = parseInt(dateComponents[2]);\n      const jsDate = new Date(year, month, day + 1);\n      return jsDate;\n    },\n    async get_service_by_category() {\n      console.log('service category id is now', this.serviceCategoryId);\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/ServiceByCategory.gql'),\n          variables: {\n            id: parseInt(this.$route.params.categoryId)\n          }\n        });\n        this.service_by_category = response.data.serviceByCategory;\n        console.log(this.service_by_category);\n      } catch (error) {\n        console.error('Error creating like:', error);\n      }\n    },\n    getServiceCategoryURL(item, ite) {\n      return `/service_categories/${this.$route.params.categoryId}/services/${item.id}/time_slots/${ite.id}`;\n    }\n  },\n  mounted() {\n    this.get_service_by_category();\n  }\n};","map":{"version":3,"names":["Datepicker","name","data","service_by_category","components","methods","format_date","date","getDisabledDates","dates","enabledDates","from","formatDate","startDate","to","endDate","currentDate","Date","push","toISOString","split","setDate","getDate","customPredictor","formattedDate","includes","dateToParse","dateComponents","year","parseInt","month","day","jsDate","get_service_by_category","console","log","serviceCategoryId","response","$apollo","query","require","variables","id","$route","params","categoryId","serviceByCategory","error","getServiceCategoryURL","item","ite","mounted"],"sources":["src/components/ServiceListCustomer.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>Services Customer</h1>\n    <div class=\"row\">\n      <div v-for=\"(item, index) in service_by_category\" :key=\"index\" class=\"col-md-4 mb-3\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h5>{{ item.name }}</h5>\n            <p>Description: {{ item.description }}</p>\n            <p>Service Category: {{ item.serviceCategoryId.name }}</p>\n            <p>Service Details: {{ item.serviceCategoryId.description }}</p>\n            <p>Price: {{ item.price }}</p>\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Schedule</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <div class=\"time\">\n                    <datepicker \n                    :disabled-dates=\"getDisabledDates(item.timeSlot)\" \n                    :day-cell-content=\"format_date\"\n                    :inline=\"true\">\n                    </datepicker>\n                  </div>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Datepicker from 'vuejs-datepicker';\nexport default {\n  name: 'ServiceListCustomer',\n  data() {\n    return {\n      service_by_category: [],\n    }\n  },\n  components: { Datepicker, },\n  methods: { \n    format_date(date) {\n      if (date.date) {\n        return `<span onclick=\"alert()\">${date.date}</span>`;\n      } else {\n        return '0'\n      }\n    },\n    getDisabledDates(dates) {\n      let enabledDates = [];\n\n      for (const date of dates) {\n        const from = this.formatDate(date.startDate);\n        const to = this.formatDate(date.endDate);\n\n        // Create an array of dates between 'from' and 'to'\n        const currentDate = new Date(from);\n        while (currentDate <= new Date(to)) {\n          enabledDates.push(currentDate.toISOString().split('T')[0]);\n          currentDate.setDate(currentDate.getDate() + 1);\n        }\n      }\n\n      return {\n        customPredictor: date => {\n          const formattedDate = `${date.toISOString().split('T')[0]}`;\n          return !enabledDates.includes(formattedDate);\n        },\n      };\n    },\n    formatDate(dateToParse) {\n      const dateComponents = dateToParse.split('-');\n      const year = parseInt(dateComponents[0]);\n      const month = parseInt(dateComponents[1]) - 1;\n      const day = parseInt(dateComponents[2]);\n      const jsDate = new Date(year, month, day + 1);\n      return jsDate;\n    },\n    async get_service_by_category() {\n      console.log('service category id is now', this.serviceCategoryId)\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/ServiceByCategory.gql'),\n          variables: { id: parseInt(this.$route.params.categoryId)}\n        });\n        this.service_by_category = response.data.serviceByCategory;\n        console.log(this.service_by_category);\n      } catch (error) { \n          console.error('Error creating like:', error);\n      }\n    },\n    getServiceCategoryURL(item, ite) {\n      return `/service_categories/${this.$route.params.categoryId}/services/${item.id}/time_slots/${ite.id}`;\n    }    \n  },\n  mounted() {\n    this.get_service_by_category()\n  } \n}\n</script>\n\n<style>\n.date_link {\n  text-decoration: none;\n  \n}\n</style>\n"],"mappings":";AAsCA,OAAAA,UAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,mBAAA;IACA;EACA;EACAC,UAAA;IAAAJ;EAAA;EACAK,OAAA;IACAC,YAAAC,IAAA;MACA,IAAAA,IAAA,CAAAA,IAAA;QACA,kCAAAA,IAAA,CAAAA,IAAA;MACA;QACA;MACA;IACA;IACAC,iBAAAC,KAAA;MACA,IAAAC,YAAA;MAEA,WAAAH,IAAA,IAAAE,KAAA;QACA,MAAAE,IAAA,QAAAC,UAAA,CAAAL,IAAA,CAAAM,SAAA;QACA,MAAAC,EAAA,QAAAF,UAAA,CAAAL,IAAA,CAAAQ,OAAA;;QAEA;QACA,MAAAC,WAAA,OAAAC,IAAA,CAAAN,IAAA;QACA,OAAAK,WAAA,QAAAC,IAAA,CAAAH,EAAA;UACAJ,YAAA,CAAAQ,IAAA,CAAAF,WAAA,CAAAG,WAAA,GAAAC,KAAA;UACAJ,WAAA,CAAAK,OAAA,CAAAL,WAAA,CAAAM,OAAA;QACA;MACA;MAEA;QACAC,eAAA,EAAAhB,IAAA;UACA,MAAAiB,aAAA,MAAAjB,IAAA,CAAAY,WAAA,GAAAC,KAAA;UACA,QAAAV,YAAA,CAAAe,QAAA,CAAAD,aAAA;QACA;MACA;IACA;IACAZ,WAAAc,WAAA;MACA,MAAAC,cAAA,GAAAD,WAAA,CAAAN,KAAA;MACA,MAAAQ,IAAA,GAAAC,QAAA,CAAAF,cAAA;MACA,MAAAG,KAAA,GAAAD,QAAA,CAAAF,cAAA;MACA,MAAAI,GAAA,GAAAF,QAAA,CAAAF,cAAA;MACA,MAAAK,MAAA,OAAAf,IAAA,CAAAW,IAAA,EAAAE,KAAA,EAAAC,GAAA;MACA,OAAAC,MAAA;IACA;IACA,MAAAC,wBAAA;MACAC,OAAA,CAAAC,GAAA,oCAAAC,iBAAA;MACA;QACA,MAAAC,QAAA,cAAAC,OAAA,CAAAC,KAAA;UACAA,KAAA,EAAAC,OAAA;UACAC,SAAA;YAAAC,EAAA,EAAAb,QAAA,MAAAc,MAAA,CAAAC,MAAA,CAAAC,UAAA;UAAA;QACA;QACA,KAAA1C,mBAAA,GAAAkC,QAAA,CAAAnC,IAAA,CAAA4C,iBAAA;QACAZ,OAAA,CAAAC,GAAA,MAAAhC,mBAAA;MACA,SAAA4C,KAAA;QACAb,OAAA,CAAAa,KAAA,yBAAAA,KAAA;MACA;IACA;IACAC,sBAAAC,IAAA,EAAAC,GAAA;MACA,mCAAAP,MAAA,CAAAC,MAAA,CAAAC,UAAA,aAAAI,IAAA,CAAAP,EAAA,eAAAQ,GAAA,CAAAR,EAAA;IACA;EACA;EACAS,QAAA;IACA,KAAAlB,uBAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}