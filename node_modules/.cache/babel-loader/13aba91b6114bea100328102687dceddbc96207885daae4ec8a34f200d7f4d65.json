{"ast":null,"code":"import { required, integer } from '@vuelidate/validators';\nimport { useVuelidate } from '@vuelidate/core';\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      services: {\n        service_category: '',\n        name: '',\n        price: '',\n        description: '',\n        service_categories: []\n      }\n    };\n  },\n  validations() {\n    return {\n      services: {\n        name: {\n          required\n        },\n        service_category: {\n          required\n        },\n        price: {\n          required,\n          integer\n        },\n        description: {\n          required\n        }\n      },\n      image: ''\n    };\n  },\n  methods: {\n    upload() {\n      console.log('upload');\n      var myWidget = window.cloudinary.createUploadWidget({\n        cloudName: 'dovxq5gn9',\n        processQueue: false,\n        uploadPreset: 'uhjevesg'\n      }, (error, result) => {\n        if (!error && result && result.event === \"success\") {\n          console.log('Done! Here is the image info: ', result.info);\n          const imageUrl = result.info.secure_url;\n          this.image = imageUrl;\n          this.displayImage(imageUrl);\n        }\n      });\n      document.getElementById(\"upload_widget\").addEventListener(\"click\", function () {\n        myWidget.open();\n      }, false);\n    },\n    // Function to display the uploaded image\n    displayImage(imageUrl) {\n      const imagePreviewDiv = document.getElementById('image-preview');\n      const image = document.createElement('img');\n      image.src = imageUrl;\n      image.classList.add('uploaded-image'); // Add CSS class for styling\n      imagePreviewDiv.innerHTML = ''; // Clear any existing content\n      imagePreviewDiv.appendChild(image);\n    },\n    async show_categories() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/Category.gql')\n        });\n        console.log('the service category is here', response);\n        this.services.service_categories = response.data.categories;\n      } catch (error) {\n        console.error('Error logging out:', error);\n      }\n    },\n    async submitForm() {\n      this.v$.$touch();\n      if (!this.v$.$touch()) {\n        console.log();\n        try {\n          const response = await this.$apollo.mutate({\n            mutation: require('@/graphql/ServiceCreate.gql'),\n            variables: {\n              serviceCategoryId: this.services.service_category,\n              name: this.services.name,\n              description: this.services.description,\n              price: parseInt(this.services.price),\n              image: this.image\n            }\n          });\n          if (response) {\n            alert(\"SUCCESS, new service has been recorded\");\n          }\n          this.reloadPage();\n          this.time_slot_one = null;\n        } catch (error) {\n          console.error(\"Graphql Error:\", error);\n        }\n      }\n    },\n    reloadPage() {\n      // Reload the current page\n      window.location.reload();\n    }\n  },\n  components: {},\n  mounted() {\n    this.show_categories();\n    this.upload();\n  }\n};","map":{"version":3,"names":["required","integer","useVuelidate","setup","v$","data","services","service_category","name","price","description","service_categories","validations","image","methods","upload","console","log","myWidget","window","cloudinary","createUploadWidget","cloudName","processQueue","uploadPreset","error","result","event","info","imageUrl","secure_url","displayImage","document","getElementById","addEventListener","open","imagePreviewDiv","createElement","src","classList","add","innerHTML","appendChild","show_categories","response","$apollo","query","require","categories","submitForm","$touch","mutate","mutation","variables","serviceCategoryId","parseInt","alert","reloadPage","time_slot_one","location","reload","components","mounted"],"sources":["src/views/ServiceNew.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>New Service</h1>\n    <form @submit.prevent=\"submitForm\" class=\"centered-form\">\n      <div class=\"input-field-signin\">\n        <div :class=\"{ error: v$.services.name.$errors.length }\">\n          <label class=\"form-label\">Service Name\n            <input v-model=\"services.name\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.name.$errors.length }\">\n            <div class=\"input-errors\" v-for=\"error of v$.services.name.$errors\" :key=\"error.$uid\">\n              <div class=\"error-msg\">{{ error.$message }}</div>\n            </div>\n          </label>\n        </div>\n      </div>\n      <div class=\"input-field-signin\">Service Category\n        <div :class=\"{ error: v$.services.service_category.$errors.length }\">\n          <select v-model=\"services.service_category\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.service_category.$errors.length }\">\n            <option v-for=\"category in this.services.service_categories\" :key=\"category.id\" :value=\"category.id\">\n              {{ category.name }}\n            </option>\n          </select>\n        </div>\n      </div>\n      <div class=\"input-field-signin\">\n        <div :class=\"{ error: v$.services.description.$errors.length }\">\n          <label class=\"form-label\">Description\n            <textarea v-model=\"services.description\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.description.$errors.length }\"></textarea>\n            <div class=\"input-errors\" v-for=\"error of v$.services.description.$errors\" :key=\"error.$uid\">\n              <div class=\"error-msg\">{{ error.$message }}</div>\n            </div>\n          </label>\n        </div>\n      </div>\n      <div class=\"input-field-signin\">\n        <div :class=\"{ error: v$.services.price.$errors.length }\">\n          <label class=\"form-label\">Price\n            <input id=\"price\" v-model=\"services.price\" class=\"form-control form-control-l\" :class=\"{ error: v$.services.price.$errors.length }\">\n            <div class=\"input-errors\" v-for=\"error of v$.services.price.$errors\" :key=\"error.$uid\">\n              <div class=\"error-msg\">{{ error.$message }}</div>\n            </div>\n          </label>\n        </div>\n      </div>\n      <div class=\"input-field-signin\">\n        <div class=\"row input-field-signup mt-3\">\n          <button id=\"upload_widget\" @click.prevent=\"\" class=\"cloudinary-button\">Upload files</button>\n        </div>\n        <div id=\"image-preview\" class=\"mt-3\"></div>\n        <button type=\"submit\" class=\"btn btn-primary btn-lg input-field-signin\">Create</button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { required, integer } from '@vuelidate/validators'\nimport { useVuelidate } from '@vuelidate/core';\nexport default {\n  setup () { return { v$: useVuelidate() } },\n  data () {\n    return {\n      services: {\n        service_category: '',\n        name: '',\n        price: '',\n        description: '',\n        service_categories: [],\n      },\n    }\n  },\n  validations () {\n    return {\n      services: {\n        name: { required },\n        service_category: { required  },\n        price: {required, integer },\n        description: {required},\n      },\n      image: '',\n    }\n  },\n  methods: {\n    upload(){\n        console.log('upload')\n        var myWidget = window.cloudinary.createUploadWidget({\n            cloudName: 'dovxq5gn9', \n            processQueue: false,\n            uploadPreset: 'uhjevesg'}, (error, result) => { \n                if (!error && result && result.event === \"success\") { \n                console.log('Done! Here is the image info: ', result.info); \n                    const imageUrl = result.info.secure_url;\n                    this.image = imageUrl;\n                    this.displayImage(imageUrl);\n                }\n            }\n        )\n        document.getElementById(\"upload_widget\").addEventListener(\"click\", function(){\n            myWidget.open();\n        }, false);  \n    }, \n        // Function to display the uploaded image\n    displayImage(imageUrl) {\n        const imagePreviewDiv = document.getElementById('image-preview');\n        const image = document.createElement('img');\n        image.src = imageUrl;\n        image.classList.add('uploaded-image'); // Add CSS class for styling\n        imagePreviewDiv.innerHTML = ''; // Clear any existing content\n        imagePreviewDiv.appendChild(image);\n    },\n    async show_categories() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/Category.gql'),\n        });\n        console.log('the service category is here', response)\n         this.services.service_categories = response.data.categories;\n      } catch (error) {\n          console.error('Error logging out:', error);\n      }\n    },\n    async submitForm() {\n      this.v$.$touch();\n      if(!this.v$.$touch()) {\n        console.log()\n        try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCreate.gql'),\n          variables: {\n            serviceCategoryId: this.services.service_category,\n            name: this.services.name,\n            description: this.services.description,\n            price: parseInt(this.services.price),\n            image: this.image\n          },\n        });\n        if(response) { alert(\"SUCCESS, new service has been recorded\") }\n        this.reloadPage()\n        this.time_slot_one = null;\n        } catch (error) { console.error(\"Graphql Error:\", error); }\n      }\n    },\n    reloadPage() {\n      // Reload the current page\n      window.location.reload();\n    },\n  },\n  components: {\n\n  },\n  mounted() {\n    this.show_categories()\n    this.upload()\n  },\n\n}\n</script>\n\n<style>\n.centered-form {\n  width: 230px;\n  margin: 0 auto;\n}\n.cloudinary-button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n.cloudinary-button:hover {\n    background-color: #0056b3;\n}\n/* Style the uploaded image */\n.uploaded-image {\n    max-width: 100%;\n    height: auto;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>"],"mappings":"AAuDA,SAAAA,QAAA,EAAAC,OAAA;AACA,SAAAC,YAAA;AACA;EACAC,MAAA;IAAA;MAAAC,EAAA,EAAAF,YAAA;IAAA;EAAA;EACAG,KAAA;IACA;MACAC,QAAA;QACAC,gBAAA;QACAC,IAAA;QACAC,KAAA;QACAC,WAAA;QACAC,kBAAA;MACA;IACA;EACA;EACAC,YAAA;IACA;MACAN,QAAA;QACAE,IAAA;UAAAR;QAAA;QACAO,gBAAA;UAAAP;QAAA;QACAS,KAAA;UAAAT,QAAA;UAAAC;QAAA;QACAS,WAAA;UAAAV;QAAA;MACA;MACAa,KAAA;IACA;EACA;EACAC,OAAA;IACAC,OAAA;MACAC,OAAA,CAAAC,GAAA;MACA,IAAAC,QAAA,GAAAC,MAAA,CAAAC,UAAA,CAAAC,kBAAA;QACAC,SAAA;QACAC,YAAA;QACAC,YAAA;MAAA,IAAAC,KAAA,EAAAC,MAAA;QACA,KAAAD,KAAA,IAAAC,MAAA,IAAAA,MAAA,CAAAC,KAAA;UACAX,OAAA,CAAAC,GAAA,mCAAAS,MAAA,CAAAE,IAAA;UACA,MAAAC,QAAA,GAAAH,MAAA,CAAAE,IAAA,CAAAE,UAAA;UACA,KAAAjB,KAAA,GAAAgB,QAAA;UACA,KAAAE,YAAA,CAAAF,QAAA;QACA;MACA,CACA;MACAG,QAAA,CAAAC,cAAA,kBAAAC,gBAAA;QACAhB,QAAA,CAAAiB,IAAA;MACA;IACA;IACA;IACAJ,aAAAF,QAAA;MACA,MAAAO,eAAA,GAAAJ,QAAA,CAAAC,cAAA;MACA,MAAApB,KAAA,GAAAmB,QAAA,CAAAK,aAAA;MACAxB,KAAA,CAAAyB,GAAA,GAAAT,QAAA;MACAhB,KAAA,CAAA0B,SAAA,CAAAC,GAAA;MACAJ,eAAA,CAAAK,SAAA;MACAL,eAAA,CAAAM,WAAA,CAAA7B,KAAA;IACA;IACA,MAAA8B,gBAAA;MACA;QACA,MAAAC,QAAA,cAAAC,OAAA,CAAAC,KAAA;UACAA,KAAA,EAAAC,OAAA;QACA;QACA/B,OAAA,CAAAC,GAAA,iCAAA2B,QAAA;QACA,KAAAtC,QAAA,CAAAK,kBAAA,GAAAiC,QAAA,CAAAvC,IAAA,CAAA2C,UAAA;MACA,SAAAvB,KAAA;QACAT,OAAA,CAAAS,KAAA,uBAAAA,KAAA;MACA;IACA;IACA,MAAAwB,WAAA;MACA,KAAA7C,EAAA,CAAA8C,MAAA;MACA,UAAA9C,EAAA,CAAA8C,MAAA;QACAlC,OAAA,CAAAC,GAAA;QACA;UACA,MAAA2B,QAAA,cAAAC,OAAA,CAAAM,MAAA;YACAC,QAAA,EAAAL,OAAA;YACAM,SAAA;cACAC,iBAAA,OAAAhD,QAAA,CAAAC,gBAAA;cACAC,IAAA,OAAAF,QAAA,CAAAE,IAAA;cACAE,WAAA,OAAAJ,QAAA,CAAAI,WAAA;cACAD,KAAA,EAAA8C,QAAA,MAAAjD,QAAA,CAAAG,KAAA;cACAI,KAAA,OAAAA;YACA;UACA;UACA,IAAA+B,QAAA;YAAAY,KAAA;UAAA;UACA,KAAAC,UAAA;UACA,KAAAC,aAAA;QACA,SAAAjC,KAAA;UAAAT,OAAA,CAAAS,KAAA,mBAAAA,KAAA;QAAA;MACA;IACA;IACAgC,WAAA;MACA;MACAtC,MAAA,CAAAwC,QAAA,CAAAC,MAAA;IACA;EACA;EACAC,UAAA,GAEA;EACAC,QAAA;IACA,KAAAnB,eAAA;IACA,KAAA5B,MAAA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}