{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, email, helpers, numeric, minLength, maxLength, sameAs } from '@vuelidate/validators';\nimport { onLogin, createProvider } from '@/vue-apollo.js';\nimport { mapState, mapMutations } from 'vuex';\nimport store from '@/store';\nconst fields = {\n  page1: ['first_name', 'last_name', 'mobile_number', 'email'],\n  page2: ['service_name', 'price', 'description'],\n  page5: ['password', 'password_confirmation']\n};\nexport default {\n  name: 'LoginForm',\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      steps: {},\n      step: 1,\n      hasSeenCongrats: false,\n      first_name: null,\n      last_name: null,\n      mobile_number: null,\n      email: null,\n      password: null,\n      password_confirmation: null,\n      price: null,\n      service_category: null,\n      service_name: null,\n      description: null,\n      service_categories: [],\n      image: null,\n      userRole: null\n    };\n  },\n  validations() {\n    const alphabeticWithSpaces = value => /^[a-zA-Z\\s]*$/.test(value);\n    return {\n      first_name: {\n        required: helpers.withMessage('First Name is required.', required),\n        alphabeticWithSpaces: helpers.withMessage('First Name can only contain letters and spaces.', alphabeticWithSpaces)\n      },\n      last_name: {\n        required: helpers.withMessage('Last Name is required.', required),\n        alphabeticWithSpaces: helpers.withMessage('Last Name can only contain letters and spaces.', alphabeticWithSpaces)\n      },\n      price: {\n        numeric,\n        required\n      },\n      description: {\n        required\n      },\n      service_category: {},\n      service_name: {\n        required\n      },\n      mobile_number: {\n        required: helpers.withMessage('Mobile Number is required.', required),\n        numeric\n      },\n      email: {\n        required,\n        email\n      },\n      password: {\n        required: helpers.withMessage('Password is required.', required),\n        minLength: minLength(8),\n        maxLength: maxLength(20)\n      },\n      password_confirmation: {\n        sameAs: sameAs(this.password)\n      }\n    };\n  },\n  methods: {\n    upload() {\n      console.log('upload');\n      var myWidget = window.cloudinary.createUploadWidget({\n        cloudName: 'dovxq5gn9',\n        processQueue: false,\n        uploadPreset: 'uhjevesg'\n      }, (error, result) => {\n        if (!error && result && result.event === \"success\") {\n          console.log('Done! Here is the image info: ', result.info);\n          const imageUrl = result.info.secure_url;\n          this.image = imageUrl;\n          this.displayImage(imageUrl);\n        }\n      });\n      document.getElementById(\"upload_widget\").addEventListener(\"click\", function () {\n        myWidget.open();\n      }, false);\n    },\n    // Function to display the uploaded image\n    displayImage(imageUrl) {\n      const imagePreviewDiv = document.getElementById('image-preview');\n      const image = document.createElement('img');\n      image.src = imageUrl;\n      image.classList.add('uploaded-image'); // Add CSS class for styling\n      imagePreviewDiv.innerHTML = ''; // Clear any existing content\n      imagePreviewDiv.appendChild(image);\n    },\n    async show_categories() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/Category.gql')\n        });\n        console.log('the service category is here', response);\n        this.service_categories = response.data.categories;\n      } catch (error) {\n        console.error('Error logging out:', error);\n      }\n    },\n    prev() {\n      this.step--;\n    },\n    field_to_validate(fields) {\n      const last_step = 5;\n      let error = 0;\n      for (const field of fields) {\n        this.v$[field].$touch();\n        if (this.v$[field].$error) error++;\n      }\n      if (!error) {\n        if (this.step != last_step) this.step++;\n        return true;\n      }\n    },\n    next1() {\n      this.field_to_validate(fields.page1);\n    },\n    next2() {\n      this.field_to_validate(fields.page2);\n    },\n    async submitForm() {\n      if (!this.v$.$touch()) {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/Signup.gql'),\n          variables: {\n            \"signupInput\": {\n              \"role\": 1,\n              \"firstName\": this.first_name,\n              \"lastName\": this.last_name,\n              \"mobileNumber\": this.mobile_number,\n              \"authProvider\": {\n                \"credentials\": {\n                  \"email\": this.email,\n                  \"password\": this.password,\n                  \"passwordConfirmation\": this.password_confirmation\n                }\n              }\n            }\n          }\n        });\n        console.log('this comming from signin mutation :', response);\n        if (response.data.createUser.errors > 0) {\n          console.log('output when if has errors: ', response.data.createUser.errors);\n        } else {\n          const login = await this.forceLogin(response.data.createUser.user.email);\n          if (login && this.$route.path !== '/') {\n            if (login) await this.create_service();\n            this.$router.push('/merchant');\n          } else {\n            alert('Something went wrong. Please try again later');\n          }\n        }\n      }\n    },\n    async forceLogin(email) {\n      console.log(email, this.password);\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/Login.gql'),\n        variables: {\n          credentials: {\n            email: email,\n            password: this.password\n          }\n        }\n      });\n      if (response.data.login == null) return false;\n      console.log('resonse from SignInUser mutation :', response);\n      const token = await response.data.login.token;\n      console.log('init token :', token);\n      // assign the Authorization header with the token provided by the backend\n      const headers = {\n        Authorization: token\n      };\n      console.log('init :', headers);\n      const role = await response.data.login.role;\n      console.log('init role: ', role);\n      await this.updateUserRole(role);\n      this.userRole = this.get_role();\n      console.log('init this.userRole: ', this.userRole);\n      // tells vue that authentication is true and chance some components\n      this.toggleAuthentication();\n      // store the token in localStorate \n      // using the default onLogin method provided by vue-apollo.js\n      await onLogin(createProvider({}, headers), token);\n      return response.data.login === null ? false : true;\n    },\n    async create_service() {\n      try {\n        const response = await this.$apollo.mutate({\n          mutation: require('@/graphql/ServiceCreate.gql'),\n          variables: {\n            serviceCategoryId: parseInt(this.service_category),\n            name: this.service_name,\n            description: this.description,\n            price: parseInt(this.price),\n            image: this.image\n          }\n        });\n        if (response) {\n          console.log(response);\n        }\n        this.time_slot_one = null;\n      } catch (error) {\n        console.error(\"Graphql Error:\", error);\n      }\n    },\n    ...mapMutations(['setAuthenticated']),\n    toggleAuthentication() {\n      this.setAuthenticated(!this.isAuthenticated);\n    },\n    get_role() {\n      const userRole = localStorage.getItem('userRole');\n      return userRole;\n    },\n    updateUserRole(role) {\n      // Call the mutation 'setUserRole' with a payload (userRole)\n      store.commit('setUserRole', role); // Replace 'admin' with your actual user role data\n    }\n  },\n\n  computed: {\n    ...mapState(['isAuthenticated'])\n  },\n  mounted() {\n    this.show_categories(), this.upload();\n  }\n};","map":{"version":3,"names":["useVuelidate","required","email","helpers","numeric","minLength","maxLength","sameAs","onLogin","createProvider","mapState","mapMutations","store","fields","page1","page2","page5","name","setup","v$","data","steps","step","hasSeenCongrats","first_name","last_name","mobile_number","password","password_confirmation","price","service_category","service_name","description","service_categories","image","userRole","validations","alphabeticWithSpaces","value","test","withMessage","methods","upload","console","log","myWidget","window","cloudinary","createUploadWidget","cloudName","processQueue","uploadPreset","error","result","event","info","imageUrl","secure_url","displayImage","document","getElementById","addEventListener","open","imagePreviewDiv","createElement","src","classList","add","innerHTML","appendChild","show_categories","response","$apollo","query","require","categories","prev","field_to_validate","last_step","field","$touch","$error","next1","next2","submitForm","mutate","mutation","variables","createUser","errors","login","forceLogin","user","$route","path","create_service","$router","push","alert","credentials","token","headers","Authorization","role","updateUserRole","get_role","toggleAuthentication","serviceCategoryId","parseInt","time_slot_one","setAuthenticated","isAuthenticated","localStorage","getItem","commit","computed","mounted"],"sources":["src/views/SignupEntrepPage.vue"],"sourcesContent":["<template>\n    <div>\n        <!-- <% provide(:title, custom_title('Sign Up'))%> -->\n        <div class=\"container h-custom\">\n            <div class=\"row d-flex justify-content-center align-items-center h-100\">\n                <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1\">\n                    <div class=\"d-flex flex-row align-items-center justify-content-center justify-content-lg-start\">\n                        <p class=\"login_text lead fw-normal mb-0 me-3\"></p>\n                    </div>\n                    <div class=\"register-stepper\">\n                        <div class=\"step\" :class=\"{'step-active' : step === 1, 'step-done': step > 1}\"><span class=\"step-number\">1</span></div>\n                        <div class=\"step\" :class=\"{'step-active' : step === 2, 'step-done': step > 2}\"><span class=\"step-number\">2</span></div>\n                        <div class=\"step\" :class=\"{'step-active' : step === 3, 'step-done': step > 3}\"><span class=\"step-number\">3</span></div>\n                    </div>\n                    <form @submit.prevent=\"submitForm\">\n                        <transition name=\"slide-fade\">\n                            <section v-show=\"step === 1\">\n                                <p>Who owns the business.</p>\n                                <!-- First name -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.first_name.$errors.length }\">\n                                            <label class=\"form-label\" for=\"first_name\">First Name</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"first_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.first_name.$errors.length }\" id=\"first_name\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.first_name.$errors\" :key=\"error.$uid\" placeholder=\"Enter your first name\" autofocus>\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Last name -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.last_name.$errors.length }\">\n                                            <label class=\"form-label\" for=\"last_name\">Last Name</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"last_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.last_name.$errors.length }\" id=\"last_name\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.last_name.$errors\" :key=\"error.$uid\" placeholder=\"Enter your last name\" autofocus>\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Mobile Number -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.mobile_number.$errors.length }\">\n                                            <label class=\"form-label\" for=\"mobile_number\">Mobile Number</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"mobile_number\" class=\"form-control form-control-l\" :class=\"{ error: v$.mobile_number.$errors.length }\" id=\"mobile_number\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.mobile_number.$errors\" :key=\"error.$uid\" placeholder=\"Enter your mobile number\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Email -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.email.$errors.length }\">\n                                            <label class=\"form-label\" for=\"email\">Email</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"email\" class=\"form-control form-control-l\" :class=\"{ error: v$.email.$errors.length }\" id=\"email\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.email.$errors\" :key=\"error.$uid\" placeholder=\"Enter your Email\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <a class=\"link_text\" href=\"#\" @click.prevent=\"next1()\"><span class=\"arrow-prev\"></span>Next </a>\n                            </section>\n                        </transition>\n                        <transition name=\"slide-fade\">\n                            <section v-show=\"step === 2\">\n                                <p>Describe your business</p>\n                                <!-- Service Name -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.service_name.$errors.length }\">\n                                            <label class=\"form-label\" for=\"service_name\">service_name</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"service_name\" class=\"form-control form-control-l\" :class=\"{ error: v$.service_name.$errors.length }\" id=\"service_name\" type=\"service_name\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.service_name.$errors\" :key=\"error.$uid\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!--Service Category -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.service_category.$errors.length }\">\n                                            <label class=\"form-label\" for=\"service_category\">Service Category</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <select v-model=\"service_category\" class=\"form-control form-control-l\" :class=\"{ error: v$.service_category.$errors.length }\" id=\"service_category\">\n                                            <option v-for=\"category in service_categories\" :key=\"category.id\" :value=\"category.id\">\n                                            {{ category.name }}\n                                            </option>\n                                        </select>\n                                        <div class=\"input-errors\" v-for=\"error of v$.service_category.$errors\" :key=\"error.$uid\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Price -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.price.$errors.length }\">\n                                            <label class=\"form-label\" for=\"price\">price</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"price\" class=\"form-control form-control-l\" :class=\"{ error: v$.price.$errors.length }\" id=\"price\" type=\"price\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.service_name.$errors\" :key=\"error.$uid\" placeholder=\"\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Description -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.description.$errors.length }\">\n                                            <label class=\"form-label\" for=\"description\">description</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <textarea v-model=\"description\" class=\"form-control form-control-l\" :class=\"{ error: v$.description.$errors.length }\" id=\"description\" type=\"description\"></textarea>\n                                        <div class=\"input-errors\" v-for=\"error of v$.description.$errors\" :key=\"error.$uid\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- image-->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <button id=\"upload_widget\" @click.prevent=\"\" class=\"cloudinary-button\">Upload files</button>\n                                </div>\n                                <div id=\"image-preview\" class=\"mt-3\"> <!-- This is where the uploaded image will be displayed --> </div>\n                                <div class=\"input-field-signup mt-3\">\n                                    <a class=\"link_text\" href=\"#\" @click.prevent=\"prev()\"><span class=\"arrow-prev\"></span>Previous</a> | \n                                    <a class=\"link_text\" href=\"#\" @click.prevent=\"next2()\"><span class=\"arrow-prev\"></span>Next </a>\n                                </div>\n                            </section>\n                        </transition>\n                        <transition name=\"slide-fade\">\n                            <section v-show=\"step === 3\">\n                                <p>Create a strong password.</p>\n                                <!-- Password -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.password.$errors.length }\">\n                                            <label class=\"form-label\" for=\"password\">Password</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"password\" class=\"form-control form-control-l\" :class=\"{ error: v$.password.$errors.length }\" id=\"password\" type=\"password\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.password.$errors\" :key=\"error.$uid\" placeholder=\"Enter your Password\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <!-- Password Confirmation -->\n                                <div class=\"row input-field-signup mt-3\">\n                                    <div class=\"col-sm-6 col-form-label\">\n                                        <div :class=\"{ error: v$.password_confirmation.$errors.length }\">\n                                            <label class=\"form-label\" for=\"password_confirmation\">Password Confirmation</label>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-sm-6 err-card\">\n                                        <input v-model=\"password_confirmation\" class=\"form-control form-control-l\" :class=\"{ error: v$.password_confirmation.$errors.length }\" id=\"password_confirmation\" type=\"password\">\n                                        <div class=\"input-errors\" v-for=\"error of v$.password_confirmation.$errors\" :key=\"error.$uid\" placeholder=\"Enter your Password Confirmation\">\n                                            <div class=\"error-msg\">{{ error.$message }}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <a class=\"link_text\" href=\"#\" @click.prevent=\"prev()\"><span class=\"arrow-prev\"></span>Previous </a>\n                                <div class=\"d-flex justify-content-between align-items-center\"> </div>\n                                <div class=\"text-right mt-4\">\n                                    <button type=\"submit\" class=\"btn btn-primary btn-lg input-field-signup\" style=\"padding-left: 2.5rem; padding-right: 2.5rem;\">Sign up</button>\n                                </div>\n                            </section>\n                        </transition>\n                    </form>\n                </div>\n                <div class=\"col-md-9 col-lg-6 col-xl-5\">\n                    <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp\" class=\"img-fluid\" alt=\"Login to MovieMagic\">\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, email, helpers, numeric, minLength, maxLength, sameAs } from '@vuelidate/validators';\nimport { onLogin, createProvider } from '@/vue-apollo.js';\nimport { mapState, mapMutations } from 'vuex';\nimport store from '@/store';\nconst fields = {\n    page1: ['first_name', 'last_name', 'mobile_number', 'email'],\n    page2: ['service_name','price','description'],\n    page5: ['password', 'password_confirmation']\n};\nexport default {\n    name: 'LoginForm',\n    setup () { return { v$: useVuelidate() } },\n    data () {\n        return {\n            steps: {},\n            step: 1,\n            hasSeenCongrats: false,\n            first_name: null,\n            last_name: null,\n            mobile_number: null,\n            email: null,\n            password: null,\n            password_confirmation: null,\n            price: null,\n            service_category: null,\n            service_name: null,\n            description: null,\n            service_categories: [],\n            image: null,\n            userRole: null\n        }\n    },   \n    validations () {\n        const alphabeticWithSpaces = value => /^[a-zA-Z\\s]*$/.test(value);\n        return {\n            first_name: {\n                required: helpers.withMessage('First Name is required.', required),\n                alphabeticWithSpaces: helpers.withMessage('First Name can only contain letters and spaces.', alphabeticWithSpaces),\n            }, \n            last_name: {\n                required: helpers.withMessage('Last Name is required.', required),\n                alphabeticWithSpaces: helpers.withMessage('Last Name can only contain letters and spaces.', alphabeticWithSpaces),\n            },\n            price: {numeric, required},\n            description: {required},\n            service_category: { },\n            service_name: { required },\n            mobile_number: { required: helpers.withMessage('Mobile Number is required.', required), numeric },\n            email: { required, email },\n            password: { required: helpers.withMessage('Password is required.', required), minLength: minLength(8), maxLength: maxLength(20) },\n            password_confirmation: { sameAs: sameAs(this.password) }\n        }\n    },\n    methods: {\n        upload(){\n            console.log('upload')\n            var myWidget = window.cloudinary.createUploadWidget({\n                cloudName: 'dovxq5gn9', \n                processQueue: false,\n                uploadPreset: 'uhjevesg'}, (error, result) => { \n                    if (!error && result && result.event === \"success\") { \n                    console.log('Done! Here is the image info: ', result.info); \n                        const imageUrl = result.info.secure_url;\n                        this.image = imageUrl;\n                        this.displayImage(imageUrl);\n                    }\n                }\n            )\n            document.getElementById(\"upload_widget\").addEventListener(\"click\", function(){\n                myWidget.open();\n            }, false);  \n        }, \n        // Function to display the uploaded image\n        displayImage(imageUrl) {\n            const imagePreviewDiv = document.getElementById('image-preview');\n            const image = document.createElement('img');\n            image.src = imageUrl;\n            image.classList.add('uploaded-image'); // Add CSS class for styling\n            imagePreviewDiv.innerHTML = ''; // Clear any existing content\n            imagePreviewDiv.appendChild(image);\n        },\n        async show_categories() {\n            try {\n                const response = await this.$apollo.query({\n                    query: require('@/graphql/Category.gql'),\n                });\n                console.log('the service category is here', response)\n                this.service_categories = response.data.categories;\n            } catch (error) {\n                console.error('Error logging out:', error);\n            }\n        },\n        prev() { this.step--; },\n        field_to_validate(fields) {\n            const last_step = 5\n            let error = 0;\n            for (const field of fields) {\n                this.v$[field].$touch();\n                if (this.v$[field].$error) error++;\n            }\n            if (!error) {\n                if (this.step != last_step) this.step++;\n                return true;\n            }\n        },\n        next1() { this.field_to_validate(fields.page1); },\n        next2() { this.field_to_validate(fields.page2); },\n        async submitForm() {\n            if (!this.v$.$touch()) {\n                const response = await this.$apollo.mutate({\n                    mutation: require('@/graphql/Signup.gql'),\n                    variables: {\n                        \"signupInput\": {\n                            \"role\": 1,\n                            \"firstName\": this.first_name,\n                            \"lastName\": this.last_name,\n                            \"mobileNumber\": this.mobile_number,\n                            \"authProvider\": {\n                                \"credentials\": {\n                                    \"email\": this.email,\n                                    \"password\": this.password,\n                                    \"passwordConfirmation\": this.password_confirmation\n                                }\n                            }\n                        }\n                    }\n                });\n                console.log('this comming from signin mutation :', response)\n                if (response.data.createUser.errors > 0) {\n                    console.log('output when if has errors: ', response.data.createUser.errors);\n                } else {\n                    const login = await this.forceLogin(response.data.createUser.user.email);\n                    if (login && this.$route.path !== '/') {\n                        if (login) await this.create_service();\n                        this.$router.push('/merchant');\n                    } else {\n                        alert('Something went wrong. Please try again later');\n                    }\n                }\n            }\n        },\n        async forceLogin(email) {\n            console.log(email, this.password);\n            const response = await this.$apollo.mutate({\n                mutation: require('@/graphql/Login.gql'),\n                variables: {\n                    credentials: {\n                        email: email,\n                        password: this.password\n                    }\n                },\n            });\n            if (response.data.login == null) return false;\n\n            console.log('resonse from SignInUser mutation :' , response)\n            const token = await response.data.login.token\n            console.log('init token :', token)\n            // assign the Authorization header with the token provided by the backend\n            const headers = { Authorization: token };\n            console.log('init :', headers)\n            const role = await response.data.login.role;\n            console.log('init role: ', role)\n\n            await this.updateUserRole(role);\n            this.userRole = this.get_role();\n            console.log('init this.userRole: ', this.userRole)\n            // tells vue that authentication is true and chance some components\n            this.toggleAuthentication();\n            // store the token in localStorate \n            // using the default onLogin method provided by vue-apollo.js\n            await onLogin(createProvider({}, headers), token);\n\n            return response.data.login === null ? false : true;\n        },\n        async create_service() {\n            try {\n                const response = await this.$apollo.mutate({\n                mutation: require('@/graphql/ServiceCreate.gql'),\n                variables: {\n                    serviceCategoryId: parseInt(this.service_category),\n                    name: this.service_name,\n                    description: this.description,\n                    price: parseInt(this.price),\n                    image: this.image\n                },\n            });\n            if (response) { console.log(response) }\n            this.time_slot_one = null;\n            } catch (error) { console.error(\"Graphql Error:\", error); }\n        },\n        ...mapMutations(['setAuthenticated']),\n        toggleAuthentication() {\n            this.setAuthenticated(!this.isAuthenticated);\n        },\n        get_role(){\n            const userRole = localStorage.getItem('userRole');\n            return userRole;\n        },\n        updateUserRole(role) {\n            // Call the mutation 'setUserRole' with a payload (userRole)\n            store.commit('setUserRole', role); // Replace 'admin' with your actual user role data\n        },\n    },\n    computed: {\n        ...mapState(['isAuthenticated']),\n    },\n    mounted(){\n        this.show_categories(),\n        this.upload();\n    }\n}\n</script>\n\n<style>\n.cloudinary-button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n.cloudinary-button:hover {\n    background-color: #0056b3;\n}\n/* Style the uploaded image */\n.uploaded-image {\n    max-width: 100%;\n    height: auto;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n.link_text {\n    display: inline-block;\n}\n.error, .error:focus, .error input[type=\"radio\"] {\n  border-color: red;\n  color: red;\n}\n.input-errors {\n  color: red;\n}\n.err-card {\n  position: relative;\n}\n.error-msg {\n  position: absolute;\n  font-size: 10px;\n  bottom: -8px;\n  left: 17px;\n}\n.register-stepper {\n  display: none;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}