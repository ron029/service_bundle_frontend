{"ast":null,"code":"import Vue from 'vue';\nimport VueApollo from 'vue-apollo';\nimport { createApolloClient, restartWebsockets } from 'vue-cli-plugin-apollo/graphql-client';\n// import { createUploadLink } from 'apollo-upload-client';\n// import { InMemoryCache } from 'apollo-cache-inmemory';\n// Install the vue plugin\nVue.use(VueApollo);\n\n// Name of the localStorage item\nconst AUTH_TOKEN = 'apollo-token';\n\n// Http endpoint\n// const httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'https://service-bundle.onrender.com/api/v1/graphql'\nconst httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'http://localhost:3000/api/v1/graphql';\n\n// an extension of the Apollo Client for handling file uploads in GraphQL\n// const httpLink = createUploadLink({ uri: 'http://localhost:3000/api/v1/graphql' })\n\n// Files URL root\nexport const filesRoot = process.env.VUE_APP_FILES_ROOT || httpEndpoint.substr(0, httpEndpoint.indexOf('/graphql'));\nVue.prototype.$filesRoot = filesRoot;\n\n// Config\nconst defaultOptions = {\n  // You can use `https` for secure connection (recommended in production)\n  httpEndpoint,\n  // You can use `wss` for secure connection (recommended in production)\n  // Use `null` to disable subscriptions\n  wsEndpoint: null,\n  // LocalStorage token\n  tokenName: AUTH_TOKEN,\n  // Enable Automatic Query persisting with Apollo Engine\n  persisting: false,\n  // Use websockets for everything (no HTTP)\n  // You need to pass a `wsEndpoint` for this to work\n  websocketsOnly: false,\n  // Is being rendered on the server?\n  ssr: false\n\n  // Override default apollo link\n  // note: don't override httpLink here, specify httpLink options in the\n  // httpLinkOptions property of defaultOptions.\n  // link: myLink\n  // link: httpLink,\n\n  // Override default cache\n  // cache: new InMemoryCache(),\n\n  // Override the way the Authorization header is set\n  // getAuth: (tokenName) => ...\n\n  // Additional ApolloClient options\n  // apollo: { ... }\n\n  // Client local data (see apollo-link-state)\n  // clientState: { resolvers: { ... }, defaults: { ... } }\n};\n\n// Call this in the Vue app file\nexport function createProvider(options = {}) {\n  // Create apollo client\n  const {\n    apolloClient,\n    wsClient\n  } = createApolloClient({\n    ...defaultOptions,\n    ...options\n  });\n  apolloClient.wsClient = wsClient;\n\n  // Create vue apollo provider\n  const apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n    defaultOptions: {\n      $query: {\n        // fetchPolicy: 'cache-and-network',\n      }\n    },\n    errorHandler(error) {\n      // eslint-disable-next-line no-console\n      console.log('%cError', 'background: red; color: white; padding: 2px 4px; border-radius: 3px; font-weight: bold;', error.message);\n    }\n  });\n  return apolloProvider;\n}\n\n// Manually call this when user log in\nexport async function onLogin(apolloClient, token) {\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem(AUTH_TOKEN, token);\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient);\n  try {\n    await apolloClient.resetStore();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (login)', 'color: orange;', e.message);\n  }\n}\n\n// Manually call this when user log out\nexport async function onLogout(apolloClient) {\n  if (typeof localStorage !== 'undefined') {\n    localStorage.removeItem(AUTH_TOKEN);\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient);\n  try {\n    await apolloClient.resetStore();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (logout)', 'color: orange;', e.message);\n  }\n}","map":{"version":3,"names":["Vue","VueApollo","createApolloClient","restartWebsockets","use","AUTH_TOKEN","httpEndpoint","process","env","VUE_APP_GRAPHQL_HTTP","filesRoot","VUE_APP_FILES_ROOT","substr","indexOf","prototype","$filesRoot","defaultOptions","wsEndpoint","tokenName","persisting","websocketsOnly","ssr","createProvider","options","apolloClient","wsClient","apolloProvider","defaultClient","$query","errorHandler","error","console","log","message","onLogin","token","localStorage","setItem","resetStore","e","onLogout","removeItem"],"sources":["/home/bonifacio/code/service_bundle_frontend/src/vue-apollo.js"],"sourcesContent":["import Vue from 'vue'\nimport VueApollo from 'vue-apollo'\nimport { createApolloClient, restartWebsockets } from 'vue-cli-plugin-apollo/graphql-client'\n// import { createUploadLink } from 'apollo-upload-client';\n// import { InMemoryCache } from 'apollo-cache-inmemory';\n// Install the vue plugin\nVue.use(VueApollo)\n\n// Name of the localStorage item\nconst AUTH_TOKEN = 'apollo-token'\n\n// Http endpoint\n// const httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'https://service-bundle.onrender.com/api/v1/graphql'\nconst httpEndpoint = process.env.VUE_APP_GRAPHQL_HTTP || 'http://localhost:3000/api/v1/graphql'\n\n// an extension of the Apollo Client for handling file uploads in GraphQL\n// const httpLink = createUploadLink({ uri: 'http://localhost:3000/api/v1/graphql' })\n\n// Files URL root\nexport const filesRoot = process.env.VUE_APP_FILES_ROOT || httpEndpoint.substr(0, httpEndpoint.indexOf('/graphql'))\n\nVue.prototype.$filesRoot = filesRoot\n\n// Config\nconst defaultOptions = {\n  // You can use `https` for secure connection (recommended in production)\n  httpEndpoint,\n  // You can use `wss` for secure connection (recommended in production)\n  // Use `null` to disable subscriptions\n  wsEndpoint: null,\n  // LocalStorage token\n  tokenName: AUTH_TOKEN,\n  // Enable Automatic Query persisting with Apollo Engine\n  persisting: false,\n  // Use websockets for everything (no HTTP)\n  // You need to pass a `wsEndpoint` for this to work\n  websocketsOnly: false,\n  // Is being rendered on the server?\n  ssr: false,\n\n  // Override default apollo link\n  // note: don't override httpLink here, specify httpLink options in the\n  // httpLinkOptions property of defaultOptions.\n  // link: myLink\n  // link: httpLink,\n\n  // Override default cache\n  // cache: new InMemoryCache(),\n\n  // Override the way the Authorization header is set\n  // getAuth: (tokenName) => ...\n\n  // Additional ApolloClient options\n  // apollo: { ... }\n\n  // Client local data (see apollo-link-state)\n  // clientState: { resolvers: { ... }, defaults: { ... } }\n}\n\n// Call this in the Vue app file\nexport function createProvider (options = {}) {\n  // Create apollo client\n  const { apolloClient, wsClient } = createApolloClient({\n    ...defaultOptions,\n    ...options,\n  })\n  apolloClient.wsClient = wsClient\n\n  // Create vue apollo provider\n  const apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n    defaultOptions: {\n      $query: {\n        // fetchPolicy: 'cache-and-network',\n      },\n    },\n    errorHandler (error) {\n      // eslint-disable-next-line no-console\n      console.log('%cError', 'background: red; color: white; padding: 2px 4px; border-radius: 3px; font-weight: bold;', error.message)\n    },\n  })\n\n  return apolloProvider\n}\n\n// Manually call this when user log in\nexport async function onLogin (apolloClient, token) {\n  if (typeof localStorage !== 'undefined' && token) {\n    localStorage.setItem(AUTH_TOKEN, token)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (login)', 'color: orange;', e.message)\n  }\n}\n\n// Manually call this when user log out\nexport async function onLogout (apolloClient) {\n  if (typeof localStorage !== 'undefined') {\n    localStorage.removeItem(AUTH_TOKEN)\n  }\n  if (apolloClient.wsClient) restartWebsockets(apolloClient.wsClient)\n  try {\n    await apolloClient.resetStore()\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('%cError on cache reset (logout)', 'color: orange;', e.message)\n  }\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,kBAAkB,EAAEC,iBAAiB,QAAQ,sCAAsC;AAC5F;AACA;AACA;AACAH,GAAG,CAACI,GAAG,CAACH,SAAS,CAAC;;AAElB;AACA,MAAMI,UAAU,GAAG,cAAc;;AAEjC;AACA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,sCAAsC;;AAE/F;AACA;;AAEA;AACA,OAAO,MAAMC,SAAS,GAAGH,OAAO,CAACC,GAAG,CAACG,kBAAkB,IAAIL,YAAY,CAACM,MAAM,CAAC,CAAC,EAAEN,YAAY,CAACO,OAAO,CAAC,UAAU,CAAC,CAAC;AAEnHb,GAAG,CAACc,SAAS,CAACC,UAAU,GAAGL,SAAS;;AAEpC;AACA,MAAMM,cAAc,GAAG;EACrB;EACAV,YAAY;EACZ;EACA;EACAW,UAAU,EAAE,IAAI;EAChB;EACAC,SAAS,EAAEb,UAAU;EACrB;EACAc,UAAU,EAAE,KAAK;EACjB;EACA;EACAC,cAAc,EAAE,KAAK;EACrB;EACAC,GAAG,EAAE;;EAEL;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;AACF,CAAC;;AAED;AACA,OAAO,SAASC,cAAcA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC5C;EACA,MAAM;IAAEC,YAAY;IAAEC;EAAS,CAAC,GAAGvB,kBAAkB,CAAC;IACpD,GAAGc,cAAc;IACjB,GAAGO;EACL,CAAC,CAAC;EACFC,YAAY,CAACC,QAAQ,GAAGA,QAAQ;;EAEhC;EACA,MAAMC,cAAc,GAAG,IAAIzB,SAAS,CAAC;IACnC0B,aAAa,EAAEH,YAAY;IAC3BR,cAAc,EAAE;MACdY,MAAM,EAAE;QACN;MAAA;IAEJ,CAAC;IACDC,YAAYA,CAAEC,KAAK,EAAE;MACnB;MACAC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,yFAAyF,EAAEF,KAAK,CAACG,OAAO,CAAC;IAClI;EACF,CAAC,CAAC;EAEF,OAAOP,cAAc;AACvB;;AAEA;AACA,OAAO,eAAeQ,OAAOA,CAAEV,YAAY,EAAEW,KAAK,EAAE;EAClD,IAAI,OAAOC,YAAY,KAAK,WAAW,IAAID,KAAK,EAAE;IAChDC,YAAY,CAACC,OAAO,CAAChC,UAAU,EAAE8B,KAAK,CAAC;EACzC;EACA,IAAIX,YAAY,CAACC,QAAQ,EAAEtB,iBAAiB,CAACqB,YAAY,CAACC,QAAQ,CAAC;EACnE,IAAI;IACF,MAAMD,YAAY,CAACc,UAAU,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACAR,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE,gBAAgB,EAAEO,CAAC,CAACN,OAAO,CAAC;EAC5E;AACF;;AAEA;AACA,OAAO,eAAeO,QAAQA,CAAEhB,YAAY,EAAE;EAC5C,IAAI,OAAOY,YAAY,KAAK,WAAW,EAAE;IACvCA,YAAY,CAACK,UAAU,CAACpC,UAAU,CAAC;EACrC;EACA,IAAImB,YAAY,CAACC,QAAQ,EAAEtB,iBAAiB,CAACqB,YAAY,CAACC,QAAQ,CAAC;EACnE,IAAI;IACF,MAAMD,YAAY,CAACc,UAAU,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACAR,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE,gBAAgB,EAAEO,CAAC,CAACN,OAAO,CAAC;EAC7E;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}