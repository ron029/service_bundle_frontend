{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, email, helpers } from '@vuelidate/validators';\nimport SignInUser from '@/graphql/Login.gql';\nimport { onLogin, createProvider } from '@/vue-apollo.js';\nimport { mapState, mapMutations } from 'vuex';\nimport store from '@/store';\nexport default {\n  name: 'LoginForm',\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      email: null,\n      password: null\n    };\n  },\n  validations() {\n    return {\n      email: {\n        required: helpers.withMessage('Email is required.', required),\n        email\n      },\n      password: {\n        required: helpers.withMessage('Password is required.', required)\n      }\n    };\n  },\n  computed: {\n    ...mapState(['isAuthenticated', 'userRole'])\n  },\n  methods: {\n    async submitForm() {\n      this.v$.$touch();\n      if (!this.v$.$error) {\n        const response = await this.$apollo.mutate({\n          mutation: SignInUser,\n          variables: {\n            credentials: {\n              email: this.email,\n              password: this.password\n            }\n          }\n        });\n        // console.log(response)\n        // Redirect to homepage for valid credentials\n        if (response.data.login === null) {\n          alert('Invalid credentials');\n        } else {\n          // get the response token from the backend\n          const token = await response.data.login.token;\n          // assign the Authorization header with the token provided by the backend\n          const headers = {\n            Authorization: token\n          };\n          // tells vue that authentication is true and chance some components\n          const role = await response.data.login.role;\n          console.log('The role get from the service vie response data is ', role);\n          await this.updateUserRole(role);\n          console.log('new role now', this.userRole);\n          await this.toggleAuthentication();\n          // store the token in localStorate \n          // using the default onLogin method provided by vue-apollo.js\n          await onLogin(createProvider({}, headers), token);\n          // redirect to Homepage\n          if (this.get_role() == \"admin\") {\n            this.$router.push('/merchant');\n          } else {\n            this.$router.push('/');\n          }\n        }\n      }\n    },\n    ...mapMutations(['setAuthenticated']),\n    toggleAuthentication() {\n      this.setAuthenticated(!this.isAuthenticated);\n    },\n    get_role() {\n      const userRole = localStorage.getItem('userRole');\n      return userRole;\n    },\n    updateUserRole(role) {\n      // Call the mutation 'setUserRole' with a payload (userRole)\n      store.commit('setUserRole', role); // Replace 'admin' with your actual user role data\n    }\n  }\n};","map":{"version":3,"names":["useVuelidate","required","email","helpers","SignInUser","onLogin","createProvider","mapState","mapMutations","store","name","setup","v$","data","password","validations","withMessage","computed","methods","submitForm","$touch","$error","response","$apollo","mutate","mutation","variables","credentials","login","alert","token","headers","Authorization","role","console","log","updateUserRole","userRole","toggleAuthentication","get_role","$router","push","setAuthenticated","isAuthenticated","localStorage","getItem","commit"],"sources":["src/components/LoginForm.vue"],"sourcesContent":["<template>\n    <div class=\"row d-flex justify-content-center align-items-center h-100\">\n        <div class=\"col-md-9 col-lg-6 col-xl-5\">\n            <img src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp\" class=\"img-fluid\" alt=\"Login to MovieMagic\">\n        </div>\n        <div class=\"col-md-8 col-lg-6 col-xl-4 offset-xl-1 signin-form\">\n            <div class=\"d-flex flex-row align-items-center justify-content-center justify-content-lg-start\">\n                <p class=\"login_text lead fw-normal mb-0 me-3\"></p>\n            </div>\n            <form @submit.prevent=\"submitForm\">\n                <!-- Email input -->\n                <div class=\"input-field-signin\">\n                    <div :class=\"{ error: v$.email.$errors.length }\">\n                        <label class=\"form-label\">Email\n                            <input v-model=\"email\" class=\"form-control form-control-l\" :class=\"{ error: v$.email.$errors.length }\">\n                            <div class=\"input-errors\" v-for=\"error of v$.email.$errors\" :key=\"error.$uid\">\n                                <div class=\"error-msg\">{{ error.$message }}</div>\n                            </div>\n                        </label>\n                    </div>\n                </div>\n                <!-- Password input -->\n                <div class=\"input-field-signin\">\n                    <div :class=\"{ error: v$.password.$errors.length }\">\n                        <label class=\"form-label\">Password\n                            <input v-model=\"password\" class=\"form-control form-control-l\" :class=\"{ error: v$.password.$errors.length }\" type=\"password\">\n                            <div class=\"input-errors\" v-for=\"error of v$.password.$errors\" :key=\"error.$uid\">\n                                <div class=\"error-msg\">{{ error.$message }}</div>\n                            </div> \n                        </label>                       \n                    </div>\n                </div>\n                <div class=\"d-flex justify-content-between align-items-center\">\n                    <!-- Checkbox -->\n                    <!-- <div class=\"form-check mb-0\">\n                        <input class=\"form-check-input me-2\" type=\"checkbox\" value=\"\" id=\"form2Example3\" />\n                        <label class=\"form-check-label\" for=\"form2Example3\"> Remember me </label>\n                    </div>\n                    <a href=\"#!\" class=\"text-body\">Forgot password?</a> -->\n                </div>\n                <div class=\"text-right text-lg-start mt-4 pt-2\">\n                    <button type=\"submit\" class=\"btn btn-primary btn-lg input-field-signin\">Log in</button>\n                    <p class=\"input-field-signin\">Don't have an account? <router-link to=\"/signup\">Signup</router-link></p>\n                    <p class=\"input-field-signin\"><a href=\"/signup_entrepreneur\">Are you an entrepreneur?</a></p>\n                </div>\n            </form>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { useVuelidate } from '@vuelidate/core'\nimport { required, email, helpers } from '@vuelidate/validators'\nimport SignInUser from '@/graphql/Login.gql';\nimport { onLogin, createProvider } from '@/vue-apollo.js';\nimport { mapState, mapMutations } from 'vuex';\nimport store from '@/store';\nexport default {\n    name: 'LoginForm',\n    setup () { return { v$: useVuelidate() } },\n    data () {\n        return {\n            email: null,\n            password: null\n        }\n    },\n    validations () {\n        return {\n            email: { required: helpers.withMessage('Email is required.', required), email },\n            password: { required: helpers.withMessage('Password is required.', required) }\n        }\n    },\n    computed: {\n        ...mapState(['isAuthenticated', 'userRole']),\n    },\n    methods: {\n        async submitForm() {\n            this.v$.$touch();\n            if (!this.v$.$error) {\n                const response = await this.$apollo.mutate({\n                    mutation: SignInUser,\n                    variables: {\n                        credentials: {\n                            email: this.email,\n                            password: this.password\n                        }\n                    },\n                });\n                // console.log(response)\n                // Redirect to homepage for valid credentials\n                if (response.data.login === null) {\n                    alert('Invalid credentials');\n                } else {\n                    // get the response token from the backend\n                    const token = await response.data.login.token\n                    // assign the Authorization header with the token provided by the backend\n                    const headers = { Authorization: token };\n                    // tells vue that authentication is true and chance some components\n                    const role = await response.data.login.role;\n                    console.log('The role get from the service vie response data is ', role)\n                    await this.updateUserRole(role)\n                    console.log('new role now',this.userRole);\n                    await this.toggleAuthentication();\n                    // store the token in localStorate \n                    // using the default onLogin method provided by vue-apollo.js\n                    await onLogin(createProvider({}, headers), token);\n                    // redirect to Homepage\n                    if (this.get_role()==\"admin\") {\n                        this.$router.push('/merchant');\n                    } else {\n                        this.$router.push('/');\n                    }\n                }\n            }\n        },\n        ...mapMutations(['setAuthenticated']),\n        toggleAuthentication() {\n            this.setAuthenticated(!this.isAuthenticated);\n        },\n        get_role(){\n            const userRole = localStorage.getItem('userRole');\n            return userRole;\n        },\n\n        updateUserRole(role) {\n            // Call the mutation 'setUserRole' with a payload (userRole)\n            store.commit('setUserRole', role); // Replace 'admin' with your actual user role data\n        },\n    },\n\n}\n</script>\n\n<style>\n.error, .error:focus {\n    border-color: red;\n    color: red;\n}\n.input-errors {\n    color: red;\n}\n.form-label {\n    position: relative;\n}\n.error-msg {\n    position: absolute;\n    font-size: 10px;\n    bottom: -13px;\n    left: 0px;\n}\n</style>"],"mappings":";AAmDA,SAAAA,YAAA;AACA,SAAAC,QAAA,EAAAC,KAAA,EAAAC,OAAA;AACA,OAAAC,UAAA;AACA,SAAAC,OAAA,EAAAC,cAAA;AACA,SAAAC,QAAA,EAAAC,YAAA;AACA,OAAAC,KAAA;AACA;EACAC,IAAA;EACAC,MAAA;IAAA;MAAAC,EAAA,EAAAZ,YAAA;IAAA;EAAA;EACAa,KAAA;IACA;MACAX,KAAA;MACAY,QAAA;IACA;EACA;EACAC,YAAA;IACA;MACAb,KAAA;QAAAD,QAAA,EAAAE,OAAA,CAAAa,WAAA,uBAAAf,QAAA;QAAAC;MAAA;MACAY,QAAA;QAAAb,QAAA,EAAAE,OAAA,CAAAa,WAAA,0BAAAf,QAAA;MAAA;IACA;EACA;EACAgB,QAAA;IACA,GAAAV,QAAA;EACA;EACAW,OAAA;IACA,MAAAC,WAAA;MACA,KAAAP,EAAA,CAAAQ,MAAA;MACA,UAAAR,EAAA,CAAAS,MAAA;QACA,MAAAC,QAAA,cAAAC,OAAA,CAAAC,MAAA;UACAC,QAAA,EAAArB,UAAA;UACAsB,SAAA;YACAC,WAAA;cACAzB,KAAA,OAAAA,KAAA;cACAY,QAAA,OAAAA;YACA;UACA;QACA;QACA;QACA;QACA,IAAAQ,QAAA,CAAAT,IAAA,CAAAe,KAAA;UACAC,KAAA;QACA;UACA;UACA,MAAAC,KAAA,SAAAR,QAAA,CAAAT,IAAA,CAAAe,KAAA,CAAAE,KAAA;UACA;UACA,MAAAC,OAAA;YAAAC,aAAA,EAAAF;UAAA;UACA;UACA,MAAAG,IAAA,SAAAX,QAAA,CAAAT,IAAA,CAAAe,KAAA,CAAAK,IAAA;UACAC,OAAA,CAAAC,GAAA,wDAAAF,IAAA;UACA,WAAAG,cAAA,CAAAH,IAAA;UACAC,OAAA,CAAAC,GAAA,sBAAAE,QAAA;UACA,WAAAC,oBAAA;UACA;UACA;UACA,MAAAjC,OAAA,CAAAC,cAAA,KAAAyB,OAAA,GAAAD,KAAA;UACA;UACA,SAAAS,QAAA;YACA,KAAAC,OAAA,CAAAC,IAAA;UACA;YACA,KAAAD,OAAA,CAAAC,IAAA;UACA;QACA;MACA;IACA;IACA,GAAAjC,YAAA;IACA8B,qBAAA;MACA,KAAAI,gBAAA,OAAAC,eAAA;IACA;IACAJ,SAAA;MACA,MAAAF,QAAA,GAAAO,YAAA,CAAAC,OAAA;MACA,OAAAR,QAAA;IACA;IAEAD,eAAAH,IAAA;MACA;MACAxB,KAAA,CAAAqC,MAAA,gBAAAb,IAAA;IACA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}