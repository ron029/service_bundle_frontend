{"ast":null,"code":"export default {\n  name: 'ServiceListCustomer',\n  data() {\n    return {\n      service_by_category: []\n    };\n  },\n  methods: {\n    async get_service_by_category() {\n      console.log('service category id is now', this.serviceCategoryId);\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/ServiceByCategory.gql'),\n          variables: {\n            id: parseInt(this.$route.params.categoryId)\n          }\n        });\n        this.service_by_category = response.data.serviceByCategory;\n        console.log(this.service_by_category);\n      } catch (error) {\n        console.error('Error creating like:', error);\n      }\n    },\n    getServiceCategoryURL(item, ite) {\n      return `/service_categories/${this.$route.params.categoryId}/services/${item.id}/time_slots/${ite.id}`;\n    }\n  },\n  mounted() {\n    this.get_service_by_category();\n  }\n};","map":{"version":3,"names":["name","data","service_by_category","methods","get_service_by_category","console","log","serviceCategoryId","response","$apollo","query","require","variables","id","parseInt","$route","params","categoryId","serviceByCategory","error","getServiceCategoryURL","item","ite","mounted"],"sources":["src/components/ServiceListCustomer.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>Services Customer</h1>\n    <div class=\"row\">\n      <div v-for=\"(item, index) in service_by_category\" :key=\"index\" class=\"col-md-4 mb-3\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h5>{{ item.name }}</h5>\n            <p>Description: {{ item.description }}</p>\n            <p>Service Category: {{ item.serviceCategoryId.name }}</p>\n            <p>Service Details: {{ item.serviceCategoryId.description }}</p>\n            <p>Price: {{ item.price }}</p>\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Start Time</th>\n                  <th>End Time</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"(ite, index2) in item.timeSlot\" :key=\"index2\">\n                  <td><a :href=\"getServiceCategoryURL(item, ite)\">{{ ite.date }}</a></td>\n                  <td>{{ ite.startTime }}</td>\n                  <td>{{ ite.endTime }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ServiceListCustomer',\n  data() {\n    return {\n      service_by_category: [],\n    }\n  },\n  methods: {\n    async get_service_by_category() {\n      console.log('service category id is now', this.serviceCategoryId)\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/ServiceByCategory.gql'),\n          variables: { id: parseInt(this.$route.params.categoryId)}\n        });\n        this.service_by_category = response.data.serviceByCategory;\n        console.log(this.service_by_category);\n      } catch (error) { \n          console.error('Error creating like:', error);\n      }\n    },\n    getServiceCategoryURL(item, ite) {\n      return `/service_categories/${this.$route.params.categoryId}/services/${item.id}/time_slots/${ite.id}`;\n    }    \n  },\n  mounted() {\n    this.get_service_by_category()\n  } \n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":"AAoCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,mBAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,wBAAA;MACAC,OAAA,CAAAC,GAAA,oCAAAC,iBAAA;MACA;QACA,MAAAC,QAAA,cAAAC,OAAA,CAAAC,KAAA;UACAA,KAAA,EAAAC,OAAA;UACAC,SAAA;YAAAC,EAAA,EAAAC,QAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,UAAA;UAAA;QACA;QACA,KAAAf,mBAAA,GAAAM,QAAA,CAAAP,IAAA,CAAAiB,iBAAA;QACAb,OAAA,CAAAC,GAAA,MAAAJ,mBAAA;MACA,SAAAiB,KAAA;QACAd,OAAA,CAAAc,KAAA,yBAAAA,KAAA;MACA;IACA;IACAC,sBAAAC,IAAA,EAAAC,GAAA;MACA,mCAAAP,MAAA,CAAAC,MAAA,CAAAC,UAAA,aAAAI,IAAA,CAAAR,EAAA,eAAAS,GAAA,CAAAT,EAAA;IACA;EACA;EACAU,QAAA;IACA,KAAAnB,uBAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}