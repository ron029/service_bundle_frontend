{"ast":null,"code":"export default {\n  name: 'BookingManager',\n  data() {\n    return {\n      history: []\n    };\n  },\n  methods: {\n    async action_item(item, action) {\n      console.log(item, action);\n      let status = 0;\n      if (action == 'cancelled') status = 3;\n      if (action == 'completed') status = 4;\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/UpdateStatusAdminCartItem.gql'),\n        variables: {\n          id: parseInt(item.id),\n          status: status\n        }\n      });\n      if (response) {\n        alert('The item id: ' + item.id + ' has been ' + action);\n        this.reloadPage();\n      }\n      console.log(response);\n    },\n    async booking_details() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/BookingHistory.gql')\n        });\n        console.log(response);\n        this.history = response.data.bookingDetails;\n      } catch (error) {\n        console.error('Error in update_service:', error);\n      }\n    },\n    getStatusLabel(item) {\n      const statusMap = {\n        pending: 0,\n        paid: 1,\n        confirmed: 2,\n        cancelled: 3,\n        completed: 4\n      };\n      const statusLabel = Object.keys(statusMap).find(key => statusMap[key] === parseInt(item.status));\n      return statusLabel || 'Unknown'; // Fallback for unknown status\n    },\n\n    reloadPage() {\n      // Reload the current page\n      window.location.reload();\n    }\n  },\n  mounted() {\n    this.booking_details(), this.action_item();\n  }\n};","map":{"version":3,"names":["name","data","history","methods","action_item","item","action","console","log","status","response","$apollo","mutate","mutation","require","variables","id","parseInt","alert","reloadPage","booking_details","query","bookingDetails","error","getStatusLabel","statusMap","pending","paid","confirmed","cancelled","completed","statusLabel","Object","keys","find","key","window","location","reload","mounted"],"sources":["src/views/BookingManager.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <h1>Booking History</h1>\n    <ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n      <li class=\"nav-item\" role=\"presentation\">\n        <button class=\"nav-link active\" id=\"home-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#home-tab-pane\" type=\"button\" role=\"tab\" aria-controls=\"home-tab-pane\" aria-selected=\"true\">Booking</button>\n      </li>\n      <li class=\"nav-item\" role=\"presentation\">\n        <button class=\"nav-link\" id=\"profile-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#profile-tab-pane\" type=\"button\" role=\"tab\" aria-controls=\"profile-tab-pane\" aria-selected=\"false\">Bookings History</button>\n      </li>\n    </ul>\n    <div class=\"tab-content\" id=\"myTabContent\">\n      <div class=\"tab-pane fade show active\" id=\"home-tab-pane\" role=\"tabpanel\" aria-labelledby=\"home-tab\" tabindex=\"0\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <td>id</td>\n              <td>bookingId</td>\n              <td>cartDate</td>\n              <td>serviceCategories</td>\n              <td>services</td>\n              <td>nameOfCustomer</td>\n              <td>date</td>\n              <td>time</td>\n              <td>amount</td>\n              <td>status</td>\n              <td>action</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"item in history\" :key=\"item.id\">\n              <td>{{ item.id }}</td>\n              <td>{{ item.bookingId }}</td>\n              <td>{{ item.cartDate }}</td>\n              <td>{{ item.serviceCategories }}</td>\n              <td>{{ item.services }}</td>\n              <td>{{ item.nameOfCustomer }}</td>\n              <td>{{ item.date }}</td>\n              <td>{{ item.time }}</td>\n              <td>{{ item.amount }}</td>\n              <td>{{ getStatusLabel(item) }}</td>\n              <td>\n                <button :disabled=\"parseInt(item.status)!==1\" @click=\"action_item(item, 'completed')\" class=\"btn btn-success\">complete</button>\n                <button  @click=\"action_item(item, 'cancelled')\" class=\"btn btn-danger\">cancelled</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div class=\"tab-pane fade show active\" id=\"profile-tab-pane\" role=\"tabpanel\" aria-labelledby=\"profile-tab\" tabindex=\"0\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <td>id</td>\n              <td>bookingId</td>\n              <td>cartDate</td>\n              <td>serviceCategories</td>\n              <td>services</td>\n              <td>nameOfCustomer</td>\n              <td>date</td>\n              <td>time</td>\n              <td>amount</td>\n              <td>status</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"item in history\" :key=\"item.id\">\n              <td>{{ item.id }}</td>\n              <td>{{ item.bookingId }}</td>\n              <td>{{ item.cartDate }}</td>\n              <td>{{ item.serviceCategories }}</td>\n              <td>{{ item.services }}</td>\n              <td>{{ item.nameOfCustomer }}</td>\n              <td>{{ item.date }}</td>\n              <td>{{ item.time }}</td>\n              <td>{{ item.amount }}</td>\n              <td>{{ getStatusLabel(item) }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'BookingManager',\n  data(){\n    return {\n      history: []\n    }\n  },\n  methods: {\n    async action_item(item, action) {\n      console.log(item, action)\n      let status = 0;\n      if (action == 'cancelled') status = 3\n      if (action == 'completed') status = 4\n      const response = await this.$apollo.mutate({\n        mutation: require('@/graphql/UpdateStatusAdminCartItem.gql'),\n        variables: {\n          id: parseInt(item.id),\n          status: status\n        }\n      })\n      if (response) {\n        alert('The item id: ' + item.id + ' has been ' + action )\n        this.reloadPage()\n      }\n      console.log(response)\n    },\n    async booking_details() {\n      try {\n        const response = await this.$apollo.query({\n          query: require('@/graphql/BookingHistory.gql'),\n        });\n        console.log(response)\n        this.history = response.data.bookingDetails\n      } catch (error) {\n        console.error('Error in update_service:', error);\n      }\n    },\n    getStatusLabel(item) {\n      const statusMap = { pending: 0, paid: 1, confirmed: 2, cancelled: 3, completed: 4 };\n      const statusLabel = Object.keys(statusMap).find(key => statusMap[key] === parseInt(item.status));\n      return statusLabel || 'Unknown'; // Fallback for unknown status\n    },\n    reloadPage() {\n      // Reload the current page\n      window.location.reload();\n    },\n  },\n  mounted() {\n    this.booking_details(),\n    this.action_item()\n  }\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":"AAsFA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,YAAAC,IAAA,EAAAC,MAAA;MACAC,OAAA,CAAAC,GAAA,CAAAH,IAAA,EAAAC,MAAA;MACA,IAAAG,MAAA;MACA,IAAAH,MAAA,iBAAAG,MAAA;MACA,IAAAH,MAAA,iBAAAG,MAAA;MACA,MAAAC,QAAA,cAAAC,OAAA,CAAAC,MAAA;QACAC,QAAA,EAAAC,OAAA;QACAC,SAAA;UACAC,EAAA,EAAAC,QAAA,CAAAZ,IAAA,CAAAW,EAAA;UACAP,MAAA,EAAAA;QACA;MACA;MACA,IAAAC,QAAA;QACAQ,KAAA,mBAAAb,IAAA,CAAAW,EAAA,kBAAAV,MAAA;QACA,KAAAa,UAAA;MACA;MACAZ,OAAA,CAAAC,GAAA,CAAAE,QAAA;IACA;IACA,MAAAU,gBAAA;MACA;QACA,MAAAV,QAAA,cAAAC,OAAA,CAAAU,KAAA;UACAA,KAAA,EAAAP,OAAA;QACA;QACAP,OAAA,CAAAC,GAAA,CAAAE,QAAA;QACA,KAAAR,OAAA,GAAAQ,QAAA,CAAAT,IAAA,CAAAqB,cAAA;MACA,SAAAC,KAAA;QACAhB,OAAA,CAAAgB,KAAA,6BAAAA,KAAA;MACA;IACA;IACAC,eAAAnB,IAAA;MACA,MAAAoB,SAAA;QAAAC,OAAA;QAAAC,IAAA;QAAAC,SAAA;QAAAC,SAAA;QAAAC,SAAA;MAAA;MACA,MAAAC,WAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAR,SAAA,EAAAS,IAAA,CAAAC,GAAA,IAAAV,SAAA,CAAAU,GAAA,MAAAlB,QAAA,CAAAZ,IAAA,CAAAI,MAAA;MACA,OAAAsB,WAAA;IACA;;IACAZ,WAAA;MACA;MACAiB,MAAA,CAAAC,QAAA,CAAAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAnB,eAAA,IACA,KAAAhB,WAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}